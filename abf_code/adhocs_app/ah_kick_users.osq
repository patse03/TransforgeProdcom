INITIALIZE () =

DECLARE
  h_frpr_name       = VARCHAR(24)  NOT NULL,
  h_command         = VARCHAR(99)  NOT NULL,
  h_return          = INTEGER      NOT NULL,
  h_attempts        = INTEGER1     NOT NULL,
  h_retries         = INTEGER1     NOT NULL,
  h_retries_allowed = INTEGER1     NOT NULL,
  h_retry_or_not    = CHAR(5)      NOT NULL,
  h_table           = CHAR(25)     NOT NULL,

  lp_load_data        = PROCEDURE ,
  lp_drop_table       = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,
  lp_error_check      = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,
  lp_full_error_check = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,

{
  h_frpr_name       = 'ah_fr_kick_users';
  h_attempts        = 0;
  h_retries_allowed = 3;
  h_table           = 'tt_ah_kick_users';

  SELECT DBMSINFO('username') AS g_user_id;

  SET_FORMS FRS (MAPFILE='/home/prodcom/admin/prodcom.map');

  CALLPROC lp_load_data;

  RESUME MENU;

} 

/**************************** KEY ACTIVATIONS *****************************/

'Go', KEY FRSKEY4 =
{

  UNLOADTABLE tf
  BEGIN

     DELETE FROM inter_image_params
     WHERE user_id = :tf.user_id;
     commit;
    
     h_command = IFNULL(SQUEEZE('kill_user_no_password ' + :tf.user_id ),'');

     CALL SYSTEM :h_command;

     MESSAGE 'KILLED: [' +:tf.user_id + '] ' +VARCHAR(:tf.user_name) + ' ('
           + :tf.ext +')' WITH STYLE = POPUP;

  END;

  CALLPROC lp_load_data;

}

'End', KEY FRSKEY14 = 
{
  h_return = CALLPROC lp_drop_table (p_table_name = :h_table);

  EXIT;
}

/**************************** LOCAL PROCEDURES ****************************/


/*===========================================================================
	      Local procedure for dropping a table if it exists.
============================================================================*/

PROCEDURE lp_drop_table(p_table_name = CHAR(36) NOT NULL) = 

  DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT,
          lp_table  = CHAR(36) NOT NULL

BEGIN

  SELECT table_name as lp_table 
    FROM iitables
   WHERE table_name  = :p_table_name
     AND table_owner = :g_user_id;

  lp_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF lp_return = 0
  THEN
    RETURN 0;
  ENDIF;

  IF lp_return > 1 
  THEN
    MESSAGE 'SYSTEM ERROR: Failed whilst selecting ' 
          +  VARCHAR(:p_table_name) + ' from iitables prior to droping, '
          + 'with error code ' + VARCHAR(:lp_return) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9;
  ENDIF;

  MODIFY :p_table_name to TRUNCATED;

  DROP TABLE :p_table_name;

  h_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF h_return != 0 
  THEN 
    MESSAGE 'SYSTEM ERROR: Unable to drop ' + VARCHAR(:p_table_name) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9; 
  ENDIF;

  RETURN 0;

END


/*=======================================================================
    Local procedure to check sql for errors during sections of code that
    utilise personal temp tables. Committed, no rollback.
=======================================================================*/

PROCEDURE lp_error_check (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing 
            ( h_num_row_ck = :p_num_row_ck,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

  RETURN IFNULL(:lp_return,9);

}


/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing 
            ( h_num_row_ck      = :p_num_row_ck,
              h_commit          = 'Y',
              h_rollback        = 'N',
              h_retries         = :h_retries,
              h_retries_allowed = :h_retries_allowed,
              h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}

/*===========================================================================
    Local procedure for displaying online users for kicking.
============================================================================*/

PROCEDURE lp_load_data =

  DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC lp_drop_table (p_table_name = :h_table);

  CREATE TABLE :h_table 
  AS
  SELECT user_id,
         'UNKNOWN USER            '   AS user_name,
         '0000'                       AS ext,
         RIGHT(VARCHAR(login_date),8) AS logged_in
  FROM   inter_image_params;
  commit;

  UPDATE :h_table a
  FROM   passwords_new b
  SET    user_name = b.user_name,
         ext       = b.extension
  WHERE  a.user_id = b.user_id;
  commit;

  tf = 
  SELECT * 
  FROM :h_table
  ORDER BY user_id;
  commit;
 
  REDISPLAY;

}
