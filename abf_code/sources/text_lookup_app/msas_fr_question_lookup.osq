/*----------------------------------------------------------------------
           Finds questions containing a specified string
----------------------------------------------------------------------*/

INITIALIZE () =

DECLARE     ret_val           = INTEGER NOT NULL,
            allrows           = INTEGER4 NOT NULL,
            current_row       = INTEGER4 NOT NULL,
            search_array      = ARRAY OF word_type,
            h_retries         = INTEGER1 NOT NULL,
            h_max_period      = INTEGER4 NOT NULL,
            h_retries_allowed = INTEGER1 NOT NULL,
            h_display         = INTEGER1 NOT NULL,
            h_retry_or_not    = VARCHAR(5) NOT NULL,
            h_frpr_name       = VARCHAR(25) NOT NULL,
            h_letter          = CHAR(1) NOT NULL,
            h_letter_counter  = INTEGER4 NOT NULL,
            h_counter         = INTEGER4 NOT NULL,
            h_no_search       = INTEGER4 NOT NULL,
            search            = VARCHAR(100) NOT NULL,
            s1                = VARCHAR(100) NOT NULL,
            s2                = VARCHAR(100) NOT NULL,
            s3                = VARCHAR(100) NOT NULL,
            s4                = VARCHAR(100) NOT NULL,
            s5                = VARCHAR(100) NOT NULL,
            h_leftmost        = VARCHAR(100) NOT NULL,
            sql_statement     = VARCHAR(200) NOT NULL,
            h_position        = INTEGER4 NOT NULL,
            h_record          = INTEGER4 NOT NULL,
            h_question        = INTEGER4 NOT NULL,
            h_table           = VARCHAR(24) NOT NULL,
            h_table1          = VARCHAR(24) NOT NULL,
	    keyword           = CHAR(15) NOT NULL,
            question          = INTEGER4 NOT NULL,
	    question_text     = CHAR(65) NOT NULL,
	    text_line1        = CHAR(65) NOT NULL,
	    word_found        = CHAR(34) NOT NULL,
            lp_setup_screen   = PROCEDURE RETURNING INTEGER
{
    g_help = CALLPROC msa_cp_getvar('PROD_HELP');

    h_frpr_name = 'msas_fr_question_lookup';
    h_retries_allowed = 3;
    msa_date = 'now';
    h_table1 = 'temp_question';
    current_row = 0;
    allrows = 0;

    SET_FORMS FIELD '' ( INVISIBLE(question_count)= 1,
    /*                     DISPLAYONLY(period) = 0,
                         REVERSE(period) = 0,
                         UNDERLINE(period) = 1,
			 */
                         DISPLAYONLY(word) = 0,
                         REVERSE(word) = 0,
                         UNDERLINE(word) = 1,
			 MODE(tf) = 'READ');

/*moved from here*/

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        SELECT MAX(period) AS h_max_period,
	       MAX(period) AS period
        FROM   inquiry_period
        WHERE  inquiry = 14;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in accessing inquiry_period'
        WITH STYLE = POPUP;
        RETURN 9;

    ENDIF;
    period = :period;
    /*------------------------------------------------------------------
     Only search for current annual period and the newer one
   (also previous period allowed (maybe temporary) - sjh  11/10/2000)
    ------------------------------------------------------------------*/

    IF :period <> :h_max_period AND :period <> :h_max_period + 100
                                AND :period <> :h_max_period - 100
    THEN
        MESSAGE 'The only Periods that may be searched for are ' +
                VARCHAR(:h_max_period) + ' and ' +
                VARCHAR(:h_max_period - 100) + ' and ' +
                VARCHAR(:h_max_period + 100)
        WITH STYLE = POPUP;
        RESUME FIELD period;
    ENDIF;

}

FIELD period =
{

    h_table = 'question_word_' + VARCHAR(:period);

    /*------------------------------------------------------------------
      Check date on iitables
    ------------------------------------------------------------------*/

    MESSAGE 'Checking Date of Table . . .';

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < :h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO
        h_retries = :h_retries + 1;

        SELECT create_date
        FROM   iitables
        WHERE  table_name = :h_table;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_rollback        = 'N',
                  h_commit          = 'Y',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;
    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error accessing iitables'
        WITH STYLE = POPUP;
        RETURN 9;
    ELSEIF ret_val = 1
    THEN
        MESSAGE 'Error finding creation date of ' + :h_table
        WITH STYLE = POPUP;
        RETURN 1;
    ENDIF;

    SET_FORMS FIELD '' ( DISPLAYONLY(period) = 1,
                         REVERSE(period) = 1,
                         UNDERLINE(period) = 0);

}

'Help', KEY FRSKEY1 =
{
    HELP_FORMS(SUBJECT = 'help',
               FILE    = :g_help + '/' + :h_frpr_name + '.hlp');
}

'Clear' =
{
    CLEAR FIELD  word, question_count,tf ;
    

    msa_date = 'now';
    SET_FORMS FIELD '' ( INVISIBLE(question_count)= 1,
                         DISPLAYONLY(word) = 0,
                         REVERSE(word) = 0,
                         UNDERLINE(word) = 1);
    current_row = 0;
    allrows = 0;
    RESUME FIELD word;
}

FIELD word = 
{
    SET_FORMS FIELD '' ( DISPLAYONLY(period) = 1,
                         REVERSE(period) = 1,
                         UNDERLINE(period) = 0);

    INQUIRE_FORMS FIELD '' (h_display = DISPLAYONLY(period));
    IF :h_display = 0
    THEN
        MESSAGE 'Please complete the Period' WITH STYLE = POPUP;
        RESUME FIELD period;
    ENDIF;

    /*------------------------------------------------------------------
    Build up the search string (could have &'s in it) into arrays: max 5
    ------------------------------------------------------------------*/

    ret_val = CALLPROC ARRAYCLEAR(search_array);

    IF LEFT(word,LENGTH(word)) = ''
    THEN
        MESSAGE 'Nothing to search for'
        WITH STYLE = POPUP;
        RESUME FIELD word;
    ENDIF;

    search = LEFT(word,LENGTH(word));
    h_counter = 0;
    h_letter_counter = 1;
    h_leftmost = '';

    WHILE h_letter_counter <= LENGTH(search)
    DO
        h_letter = CHAREXTRACT(search,h_letter_counter);
        IF h_letter = '&'
        THEN
            IF LENGTH(h_leftmost) > 0
            THEN
                INSERTROW search_array[h_counter] (word = h_leftmost);
                h_leftmost = '';
                h_counter = h_counter + 1;
            ENDIF;

        ELSEIF h_letter <> ' '
        THEN
            h_leftmost = CONCAT(h_leftmost, h_letter);
        ENDIF;
        h_letter_counter = h_letter_counter + 1;
    ENDWHILE;
    IF LENGTH(h_leftmost) > 0
    THEN
        INSERTROW search_array[h_counter] (word = h_leftmost);
        h_leftmost = '';
    ENDIF;

    h_no_search = CALLPROC ARRAYALLROWS(search_array);

    IF h_no_search > 5
    THEN
        h_no_search = 5;
    ENDIF;

    /*------------------------------------------------------------------
    Redisplay the re-built search string (the variable word)
    and add a '%' to each search for the SQL statement
    ------------------------------------------------------------------*/

    s1 = '';
    s2 = '';
    s3 = '';
    s4 = '';
    s5 = '';

    word = search_array[1].word;
    s1 = search_array[1].word + '%';

    IF h_no_search > 1
    THEN
        s2 = search_array[2].word + '%';
        word = word + '&' + search_array[2].word;
        IF h_no_search > 2
        THEN
            s3 = search_array[3].word + '%';
            word = word + '&' + search_array[3].word;
            IF h_no_search > 3
            THEN
                s4 = search_array[4].word + '%';
                word = word + '&' + search_array[4].word;
                IF h_no_search > 4
                THEN
                    s5 = search_array[5].word + '%';
                    word = word + '&' + search_array[5].word;
                ENDIF;
            ENDIF;
        ENDIF;
    ENDIF;


    current_row = 0;

    ret_val = CALLPROC ARRAYCLEAR(g_q_array);

    SET_FORMS FIELD '' ( INVISIBLE(question_count)= 0);
    REDISPLAY;

    MESSAGE 'Searching Question Text . . .';

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < :h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO
        h_retries = :h_retries + 1;

        IF h_no_search = 1
        THEN
            g_q_array = SELECT question,
                               word AS word_found
                      FROM   :h_table
                      WHERE  word LIKE :s1
        ELSEIF h_no_search = 2
        THEN
            g_q_array = SELECT question,
                               word AS word_found
                      FROM   :h_table
                      WHERE  word LIKE :s1
                      AND    question IN (
                             SELECT question
                             FROM   :h_table
                             WHERE word LIKE :s2);
        ELSEIF h_no_search = 3
        THEN
            g_q_array = SELECT question,
                               word AS word_found
                      FROM   :h_table
                      WHERE  word LIKE :s1
                      AND    question IN (
                             SELECT question
                             FROM   :h_table
                             WHERE word LIKE :s2)
                      AND    question IN (
                             SELECT question
                             FROM   :h_table
                             WHERE word LIKE :s3);
        ELSEIF h_no_search = 4
        THEN
            g_q_array = SELECT question,
                               word AS word_found
                      FROM   :h_table
                      WHERE  word LIKE :s1
                      AND    question IN (
                             SELECT question 
                             FROM   :h_table
                             WHERE word LIKE :s2)
                      AND    question IN (
                             SELECT question
                             FROM   :h_table
                             WHERE word LIKE :s3)
                      AND    question IN (
                             SELECT question
                             FROM   :h_table
                             WHERE word LIKE :s4);
        ELSE
            g_q_array = SELECT question,
                               word AS word_found
                      FROM   :h_table
                      WHERE  word LIKE :s1
                      AND    question IN (
                             SELECT question
                             FROM   :h_table
                             WHERE word LIKE :s2)
                      AND    question IN (
                             SELECT question
                             FROM   :h_table
                             WHERE word LIKE :s3)
                      AND    question IN (
                             SELECT question
                             FROM   :h_table
                             WHERE word LIKE :s4)
                      AND    question IN (
                             SELECT question
                             FROM   :h_table
                             WHERE word LIKE :s5);
        ENDIF;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_rollback        = 'N',
                  h_commit          = 'Y',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;
    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error accessing question table'
        WITH STYLE = POPUP;
        RETURN 9;
    ENDIF;

    allrows = CALLPROC ARRAYALLROWS(g_q_array);

    IF allrows = 0
    THEN
        MESSAGE 'No questions were found using this search string'
        WITH STYLE = POPUP;
        CLEAR FIELD word, question_count;
        RESUME FIELD word;
    ENDIF;

    SET_FORMS FIELD '' ( DISPLAYONLY(word) = 1,
                         REVERSE(word) = 1,
                         UNDERLINE(word) = 0);

    current_row = 1;

    ret_val = CALLPROC lp_setup_screen;
    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;
}

'QuestionText' =
{
    msa_date = 'now';
    ret_val = CALLPROC ARRAYCLEAR(g_q_array);

    /*------------------------------------------------------------------
    Copy all the tf questions into the array
    ------------------------------------------------------------------*/

    h_counter = 0;

    UNLOADTABLE tf
    {
        INSERTROW g_q_array [:h_counter] (
                  question = :tf.question,
		  word_found = :tf.word);
        h_counter = h_counter + 1;
    };

    /*------------------------------------------------------------------
    Get the current question's position and pass it through to the
    text displaying program
    ------------------------------------------------------------------*/

    h_counter = 0;

    UNLOADTABLE g_q_array
    {
        h_counter = :h_counter + 1;
        IF :g_q_array.question = :tf.question
        THEN
            ENDLOOP;
        ENDIF;
    };


    h_question = :tf.question;

    ret_val = CALLFRAME msas_fr_dis_ques_text(
              period    = :period,
              industry  = :tf.question_industry,
              h_counter = :h_counter,
              question  = BYREF(:h_question));


    UNLOADTABLE tf (h_record = _RECORD)
    {
         IF :tf.question = :h_question
         THEN
             SCROLL tf TO :h_record;
             RESUME FIELD tf;
         ENDIF;
    };

}

'CNs' =
{
    msa_date = 'now';

    ret_val = CALLFRAME msas_fr_show_cns (
              question = :tf.question,
              period   = :period);

    UNLOADTABLE tf (h_record = _RECORD)
    {
         IF :tf.question = :h_question
         THEN
             SCROLL tf TO :h_record;
             RESUME FIELD tf;
         ENDIF;
    };

}

'End', KEY FRSKEY6 =
{
    RETURN 0;
}

/*----------------------------------------------------------------------
                  L O C A L    P R O C E D U R E
----------------------------------------------------------------------*/

PROCEDURE lp_setup_screen () =
{

 /*
message 'all = ' + ascii(:allrows) +
 'curr row = ' + VARCHAR(:current_row)
+ 'curr quest = ' + VARCHAR(:g_q_array[:current_row].question)
 + 'all quest = ' + VARCHAR(:g_q_array[:allrows].question)
+ 's1 = ' + :s1
with style = popup;

 + 's1 = ' + :search_array[1].word 
 + 's2 = ' + :search_array[2].word 
 + 's3 = ' + :search_array[3].word 
 + 's4 = ' + :search_array[4].word 
 + 's5 = ' + :search_array[5].word 
   */ 
    question_count = SQUEEZE( 'Questions found = ' + CHAR(:allrows));

    SET_FORMS FIELD '' ( INVISIBLE(question_count)= 0);

    msa_date = 'now';

    ret_val = CALLPROC msa_fp_drop_table (
              h_table = :h_table1);

    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < :h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO
      CREATE TABLE :h_table1(
		    keyword char(15) not null,
		    question_industry integer4 not null,
		    question integer4 not null,
		    question_text char(65) not null);

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_rollback        = 'N',
                  h_commit          = 'Y',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;
    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error creating table' + :h_table1
        WITH STYLE = POPUP;
        RETURN 9;
    ENDIF;

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < :h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO
        h_retries = :h_retries + 1;
       
	current_row = 1;

	WHILE current_row <= allrows
	DO
	  INSERT INTO :h_table1
	  VALUES( :g_q_array[:current_row].word_found,
		  0,
                  :g_q_array[:current_row].question,
		  '');
	  current_row = current_row + 1;

	ENDWHILE;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_rollback        = 'N',
                  h_commit          = 'Y',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;
    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error inserting array questions into table ' + :h_table1
        WITH STYLE = POPUP;
        RETURN 9;
    ELSEIF ret_val = 1
    THEN
        MESSAGE 'Error finding question ' + VARCHAR(:g_q_array[:current_row].question)
        WITH STYLE = POPUP;
    ENDIF;

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < :h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO
        h_retries = :h_retries + 1;
      
	UPDATE :h_table1 a
	FROM   question_library b
	SET    question_industry = b.question_industry,
	       question_text = b.text_line1
	WHERE  a.question = b.question
	AND    b.period = :period;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_rollback        = 'N',
                  h_commit          = 'Y',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;
    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error updating question text on ' + :h_table1
        WITH STYLE = POPUP;
        RETURN 9;
    ENDIF;

    CLEAR FIELD tf;

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < :h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO
        h_retries = :h_retries + 1;

	tf = SELECT keyword as word,
		    question_industry as question_industry,
		    question,
		    question_text as text_line1
	     FROM   :h_table1
	     ORDER BY question_industry,
		      question;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_rollback        = 'N',
                  h_commit          = 'Y',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;
    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error selecting data into tablefield '
        WITH STYLE = POPUP;
        RETURN 9;
    ENDIF;


    REDISPLAY;
    RETURN 0;
}
