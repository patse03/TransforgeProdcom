/*--------------------------------------------------------------------
Procedure msaca_fp_allocation

---------------------------------------------------------------------*/

PROCEDURE msaca_fp_allocation () =

DECLARE   ret_val               = INTEGER1 NOT NULL,
          h_frpr_name           = VARCHAR(24) NOT NULL,
          h_table1              = VARCHAR(24) NOT NULL,
          h_table2              = VARCHAR(24) NOT NULL,
          h_table3              = VARCHAR(24) NOT NULL,
          h_table4              = VARCHAR(24) NOT NULL,
          h_table5              = VARCHAR(24) NOT NULL,
          h_found               = INTEGER2 NOT NULL,
          period                = INTEGER4 NOT NULL,
          fourdig               = INTEGER4 NOT NULL,
          alloc_selected        = INTEGER2 NOT NULL,
          stratum               = INTEGER2 NOT NULL,
          prn                   = INTEGER4 NOT NULL,
          avalue                = INTEGER4 NOT NULL,
          contributor_reference = VARCHAR(11) NOT NULL,
          sixdig                = INTEGER4 NOT NULL


{

    h_frpr_name = 'msaca_fp_allocation';
    h_table1 = 'ppi_detr_sixdig_data';
    h_table2 = 'ppi_contribs_found';
    h_table3 = 'ppi_contribs_count';
    h_table4 = 'ppi_detr_sixdig_count';
    h_table5 = 'ppi_prodcom_weight';

    /*--------------------------------------------------------------------
    Insert into table of sixdig data of the DETR inclusions the current
    periods data. These are needed by PPI on top of the references sampled. 
    They must not be included in the table that the Random Sample is being 
    selected from. PPI IS require this table
    ---------------------------------------------------------------------*/
  
    MESSAGE 'Deleting existing rows from ' + :h_table1;

    DELETE FROM :h_table1
    WHERE  period/100 = :g_period/100;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
  
    IF ret_val = 9 
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'System error deleting current period from ' + :h_table1,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    MESSAGE 'Inserting new periods data into  ' + :h_table1;

    INSERT INTO :h_table1
    SELECT    a.* 
    FROM      ppi_sixdig_ann_sum a
    WHERE     period/100 = :g_period/100
    AND       contributor_reference IN
              (SELECT contributor_reference
               FROM   ppi_detr_inclusions b
               WHERE  b.period = :g_period 
               AND    a.sixdig = b.question/1000);

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
  
    IF ret_val = 9 
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'System error inserting new periods data into ' + :h_table1,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*--------------------------------------------------------------------
    Delete DETR references and their sixdigits from the table 
    ppi_sixdig_ann_sum as they must not be included in the table 
    the Sample is selected from for those sixdigits within the
    eightdigit Prodcom question held on ppi_detr_inclusions. The references 
    may be randomly selected for other sixdigits they respond to.
    ---------------------------------------------------------------------*/

    DELETE FROM ppi_sixdig_ann_sum a
    WHERE       period/100 = :g_period/100
    AND         contributor_reference IN
                (SELECT contributor_reference
                 FROM   :h_table1 b
		 WHERE  a.sixdig = b.sixdig);


    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
  
    IF ret_val = 9 
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'System error deleting from ' + :h_table1,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*--------------------------------------------------------------------
    Deleting any existing rows for current period from ppi_contribs_found
    MESSAGE 'Deleting existing rows from ' + :h_table2;
    ---------------------------------------------------------------------*/
    
    DELETE FROM :h_table2
    WHERE  period = :g_period;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
  
    IF ret_val = 9 
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'System error deleting existing rows from ' + :h_table2,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*--------------------------------------------------------------------
    Some four digits have no third stratum and the six digits within
    the group only have an allocation for strata 1 and 2 (Check the
    file of data supplied by SCPR as in the original file they gave
    allocations for strata 1 and 3 and we had to edit the data for
    strata 3 to become 2. Graham will ask them not to send the data like
    this in the future)

    Deal with these four digits first as only the first strata will be
    randomly selected and the second strata will be completely
    enumerated ie. 1 in 1s


    Select loop to select the alloc_selected per stratum from the data
    in table ppi_all_params, this is supplied by Graham. This should
    eventually be the same as the alloc_required supplied by SCPR
    but for the first year will usually be more than the number needed
    to allow for the drop-off of non-suitable contributors at
    recruitment stage in PPI

    Loop around the contributors and their sixdigit sales, inserting into 
    the empty table until the number required is met. Random selection is 
    only done for strata 1 and 2 
    ---------------------------------------------------------------------*/
    /*--------------------------------------------------------------------
    Deal with the four digits that have no third stratum
    ---------------------------------------------------------------------*/

    SELECT  period,
            sixdig,
	    sixdig/100 as fourdig,
            stratum,
            alloc_selected
    FROM    ppi_all_params
    WHERE   period = :g_period
    AND     stratum = 1
    AND     sixdig/100 IN 
            (SELECT fourdig
             FROM   ppi_bound_params
             WHERE  period = :g_period
             AND    stratum = 2
             AND    upper_bound = 999999999)
    {
        MESSAGE 'Processing Fourdig - ' +
                 VARCHAR(:fourdig) + ' . . .';
  	 
        h_found = 1;
  
        SELECT contributor_reference,
               avalue,
               prn
        FROM   ppi_sixdig_ann_sum
        WHERE  period/100 = :g_period/100
        AND    sixdig = :sixdig
        AND    stratum = :stratum
        ORDER BY prn,
  	         contributor_reference
  
        {	
            IF h_found <= alloc_selected
            THEN 
                INSERT INTO :h_table2
                VALUES (:period,
                        :contributor_reference,
                        :sixdig,
                        :avalue,
                        :prn,
                        :stratum);
  
                ret_val = CALLPROC batch_check_inq_ing (
                          h_num_row_ck = 1,
                          h_commit     = 'Y',
                          h_rollback   = 'N',
                          h_frpr_name  = :h_frpr_name);
  
                IF ret_val <> 0
                THEN
                    INSERT INTO error_log
                    VALUES (    'now',
                                'Error inserting fourdigit level into ' + :h_table2,
                                :h_frpr_name,
                                :ret_val,
                                 :g_user_id);
                    COMMIT;
                    RETURN ret_val;
                ENDIF;
            ENDIF;

            h_found = :h_found + 1;
        };
  
    };

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
  
    IF ret_val = 9 
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error in first select loop for fourdigits',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*--------------------------------------------------------------------
    deal with the rest of the six digits 
    ---------------------------------------------------------------------*/
    SELECT  period,
            sixdig,
            stratum,
            alloc_selected
    FROM    ppi_all_params
    WHERE   period = :g_period
    AND     stratum IN (1,2)
    AND     sixdig/100 NOT IN 
            (SELECT fourdig
             FROM   ppi_bound_params
             WHERE  period = :g_period
             AND    stratum = 2
             AND    upper_bound = 999999999)
 
    ORDER BY sixdig
  
    {
        MESSAGE 'Processing Sixdig ' +
                 VARCHAR(:sixdig) + ' . . .';
  	 
        h_found = 1;
  
        SELECT contributor_reference,
               avalue,
               prn
        FROM   ppi_sixdig_ann_sum
        WHERE  period/100 = :g_period/100
        AND    sixdig = :sixdig
        AND    stratum = :stratum
        ORDER BY prn,
  	         contributor_reference
  
        {	
            IF h_found <= alloc_selected
            THEN 
                INSERT INTO :h_table2
                VALUES (:period,
                        :contributor_reference,
                        :sixdig,
                        :avalue,
                        :prn,
                        :stratum);
  
                ret_val = CALLPROC batch_check_inq_ing (
                          h_num_row_ck = 1,
                          h_commit     = 'Y',
                          h_rollback   = 'N',
                          h_frpr_name  = :h_frpr_name);
  
                IF ret_val <> 0
                THEN
                    INSERT INTO error_log
                    VALUES (    'now',
                                'Error inserting sixdigit level into ' + :h_table2,
                                :h_frpr_name,
                                :ret_val,
                                 :g_user_id);
                    COMMIT;
                    RETURN ret_val;
                ENDIF;
            ENDIF;

            h_found = :h_found + 1;
        };
  
    };
  
    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
  
    IF ret_val = 9 
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error in second select loop for sixdigits',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*--------------------------------------------------------------------
    Insert into table all contributors and their sixdigit sales for
    stratum 2. This stratum is completely enumerated ie. 1 in 1s
    for those four digits that have no stratum 3

    Default to the annual global period rather than the 4th quarterly
    period as this causes duplicates later on
    ---------------------------------------------------------------------*/
    INSERT INTO :h_table2
    SELECT :g_period,
           contributor_reference,
           sixdig,
  	   avalue,
  	   prn,
  	   stratum
    FROM   ppi_sixdig_ann_sum
    WHERE  stratum = 2
    AND    period/100 = :g_period/100
    AND    sixdig IN       
           (SELECT sixdig 
            FROM   ppi_all_params
            WHERE  period = :g_period)
    AND    sixdig/100 IN 
           (SELECT fourdig
            FROM   ppi_bound_params
            WHERE  stratum = 2
            AND    period = :g_period
            AND    upper_bound = 999999999);
  
    /*--------------------------------------------------------------------
    Insert into table all contributors and their sixdigit sales for
    stratum 3. This stratum is completely enumerated ie. 1 in 1s

    Default to the annual global period rather than the 4th quarterly
    period as this causes duplicates later on
    ---------------------------------------------------------------------*/
    INSERT INTO :h_table2
    SELECT :g_period,
           contributor_reference,
           sixdig,
  	   avalue,
  	   prn,
  	   stratum
    FROM   ppi_sixdig_ann_sum
    WHERE  stratum = 3
    AND    period/100 = :g_period/100
    AND    sixdig IN           
           (SELECT sixdig 
            FROM   ppi_all_params
            WHERE  period = :g_period)
    AND    sixdig/100 NOT IN 
           (SELECT fourdig
            FROM   ppi_bound_params
            WHERE  stratum = 2
            AND    period = :g_period
            AND    upper_bound = 999999999);
  
  
    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
  
    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error in select loop for 1 in 1s stratum 3 ' + :h_table2,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*--------------------------------------------------------------------
    Create a table counting the number of contributors that have been
    found using the random sampling select loop above. Update table 
    ppi_all_params, contribs_found with the figures. 
    These are to be used for comparison purposes in reports later. 
    ---------------------------------------------------------------------*/

    ret_val = CALLPROC batch_fp_drop_table (
                       h_table = :h_table3);
  
    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;
  
    MESSAGE 'Creating table ' + :h_table3;
  
    CREATE TABLE :h_table3 
    AS SELECT period,
              sixdig,
              stratum,
              COUNT(contributor_reference) as contribs_found
    FROM      :h_table2
    WHERE     period = :g_period
    GROUP BY  period,
              sixdig,
              stratum;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
  
    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error creating ' + :h_table3,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    UPDATE ppi_all_params a
    FROM   :h_table3 b
    SET    alloc_found = b.contribs_found
    WHERE  a.sixdig = b.sixdig
    AND    a.period  = :g_period
    AND    a.period  = b.period
    AND    a.stratum = b.stratum;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
  
    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error updating ppi_all_params with contribs_found count ',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*--------------------------------------------------------------------
    Create a table to hold the counts by stratum and sixdig of the DETR
    inclusions held in table ppi_detr_sixdig_data created above. 
    These need to be added to the total number of contribs_found that 
    was calculated after running the sample program above. This means 
    that there will be cases where the total contribs_found is greater 
    than the number required for the sixdigits affected
    ---------------------------------------------------------------------*/
  
    MESSAGE 'Deleting existing rows from ' + :h_table4;

    DELETE FROM :h_table4
    WHERE  period/100 = :g_period/100;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
  
    IF ret_val = 9 
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'System error deleting current period from ' + :h_table4,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    INSERT INTO :h_table4 
    SELECT    period,
              stratum,
              sixdig,
              COUNT(contributor_reference) as contribs_found
    FROM      :h_table1
    WHERE     period = :g_period
    GROUP BY  period,
              stratum,
              sixdig;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
  
    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error inserting new periods data into  ' + :h_table4,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    UPDATE ppi_all_params a
    FROM   :h_table4 b
    SET    alloc_found = alloc_found + b.contribs_found
    WHERE  a.sixdig = b.sixdig
    AND    a.period = :g_period
    AND    a.period = b.period
    AND    a.stratum = b.stratum;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
  
    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error updating ppi_all_params with DETR contribs_found count ',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*--------------------------------------------------------------------
    Create a table selecting all the references that have been 
    successfully sampled in table ppi_contribs_found above with their 
    registered employment.

    Update this table with the totals of the Prodcom universe and 
    number selected using tables avg_prodcom_universe 
    and avg_prodcom_selected (quarterly figures have been averaged 
    over the four quarters), created in Process 1.

    Use this to calculate a Prodcom weight and pass this to PPI on 
    the ppi_recruitment table which is created in Process ??
    ---------------------------------------------------------------------*/

    ret_val = CALLPROC batch_fp_drop_table (
                       h_table = :h_table5);
  
    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;
  
    MESSAGE 'Creating table ' + :h_table5;
  
    CREATE TABLE :h_table5 
    AS SELECT a.period,
              a.contributor_industry,
              a.contributor_reference,
              a.register_emp,
              INT4(0) as prodcom_universe,  
              INT4(0) as prodcom_selected,
              FLOAT8(0) as prodcom_weight  
    FROM      contributor_period a,
              :h_table2 b          
    WHERE     a.contributor_reference = b.contributor_reference
    AND       a.period IN (:g_period,:g_q2)
    AND       b.period = :g_period;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
  
    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error creating ' + :h_table5,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;
    /*--------------------------------------------------------------------
    Update with average universe for 10-19 employment
    ---------------------------------------------------------------------*/

    UPDATE :h_table5 a
    FROM    avg_prodcom_universe b
    SET     prodcom_universe = b.avg_u10_19
    WHERE   a.contributor_industry = b.industry
    AND     a.period IN (:g_period,:g_q2)
    AND     a.register_emp >= 10
    AND     a.register_emp < 20;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
  
    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error updating avg_u10_19 on ' + :h_table5,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;
    /*--------------------------------------------------------------------
    Update with average universe for 20-49 employment
    ---------------------------------------------------------------------*/

    UPDATE :h_table5 a
    FROM    avg_prodcom_universe b
    SET     prodcom_universe = b.avg_u20_49
    WHERE   a.contributor_industry = b.industry
    AND     a.period IN (:g_period,:g_q2)
    AND     a.register_emp >= 20
    AND     a.register_emp < 50;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
  
    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error updating avg_u20_49 on ' + :h_table5,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;
    /*--------------------------------------------------------------------
    Update with average universe for 50-99 employment
    ---------------------------------------------------------------------*/

    UPDATE :h_table5 a
    FROM    avg_prodcom_universe b
    SET     prodcom_universe = b.avg_u50_99
    WHERE   a.contributor_industry = b.industry
    AND     a.period IN (:g_period,:g_q2)
    AND     a.register_emp >= 50
    AND     a.register_emp < 100;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
  
    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error updating avg_u50_99 on ' + :h_table5,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*--------------------------------------------------------------------
    Update with average universe for 100+ employment
    ---------------------------------------------------------------------*/

    UPDATE :h_table5 a
    FROM    avg_prodcom_universe b
    SET     prodcom_universe = b.avg_u100_plus
    WHERE   a.contributor_industry = b.industry
    AND     a.period IN (:g_period,:g_q2)
    AND     a.register_emp >= 100;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
  
    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error updating avg_u100_plus on ' + :h_table5,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;
    /*--------------------------------------------------------------------
    Update with average number selected for 10_19 employment
    ---------------------------------------------------------------------*/

    UPDATE :h_table5 a
    FROM    avg_prodcom_selected b
    SET     prodcom_selected = b.avg_s10_19
    WHERE   a.contributor_industry = b.industry
    AND     a.period IN (:g_period,:g_q2)
    AND     a.register_emp >= 10  
    AND     a.register_emp < 20;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
  
    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error updating avg_s10_19 on ' + :h_table5,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;
    /*--------------------------------------------------------------------
    Update with average number selected for 20_49 employment
    ---------------------------------------------------------------------*/

    UPDATE :h_table5 a
    FROM    avg_prodcom_selected b
    SET     prodcom_selected = b.avg_s20_49
    WHERE   a.contributor_industry = b.industry
    AND     a.period IN (:g_period,:g_q2)
    AND     a.register_emp >= 20  
    AND     a.register_emp < 50;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
  
    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error updating avg_s20_49 on ' + :h_table5,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;
    /*--------------------------------------------------------------------
    Update with average number selected for 50_99 employment
    ---------------------------------------------------------------------*/

    UPDATE :h_table5 a
    FROM    avg_prodcom_selected b
    SET     prodcom_selected = b.avg_s50_99
    WHERE   a.contributor_industry = b.industry
    AND     a.period IN (:g_period,:g_q2)
    AND     a.register_emp >= 50  
    AND     a.register_emp < 100;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
  
    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error updating avg_s50_99 on ' + :h_table5,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*--------------------------------------------------------------------
    Update with average number selected for 100+ employment
    ---------------------------------------------------------------------*/

    UPDATE :h_table5 a
    FROM    avg_prodcom_selected b
    SET     prodcom_selected = b.avg_s100_plus
    WHERE   a.contributor_industry = b.industry
    AND     a.period IN (:g_period,:g_q2)
    AND     a.register_emp >= 100;  

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
  
    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error updating avg_s100_plus on ' + :h_table5,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*--------------------------------------------------------------------
    Set prodcom weight to equal 1 for the 1 in 1s ie. over cutoff.

    For the first run 199600 although they were selected using their
    original cutoffs as at 199600 use the new size bands as at 
    199700  and 199803 to calculate whether the contributor is over 
    the cutoff.

    For the second run with 199700 data use original cutoffs for quarterly
    and new cutoffs on industry_period for annual. You only need to update
    199700 once but keep other updates for the 199706 data
    ---------------------------------------------------------------------*/

    UPDATE :h_table5 a
    FROM   industry_period b
    SET    prodcom_weight = 1
    WHERE  a.contributor_industry = b.industry
    AND    a.period = :g_period
    AND    a.period = b.period
    AND    a.register_emp >= b.emp_cutoff;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
  
    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error in first update 1 in 1s for annual on ' + :h_table5,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    UPDATE :h_table5 a
    FROM   industry_period b
    SET    prodcom_weight = 1
    WHERE  a.contributor_industry = b.industry
    AND    a.period = :g_q2
    AND    a.period = b.period
    AND    b.emp_cutoff  IN (20,50,100)
    AND    a.register_emp >= b.emp_cutoff;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
  
    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error in first update 1 in 1s on quarterly ' + :h_table5,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*--------------------------------------------------------------------
    Graham decided to set prodcom weight to equal 1 where: 

    1. The cutoffs are between 20 and 50 and register_emp >= 50
    as this will make a contributor whose employment was 51 and the 
    industry cutoff 35 be treated as those above the cutoff ie. 
    1 in 1s the same as the first update above

    2. The cutoffs are between 50 and 100 and register_emp >= 100 
    this will make a contributor whose employment was 101 and the 
    cutoff was 75 be treated as those above the cutoff ie. 1 in 1s
   
    3. The cutoffs are greater than 100 and register_emp >= 100 but 
    where their weight is < 1. This will make a contributor whose 
    employment was 101 and their cutoff was 250 be treated as those 
    above the cutoff ie. 1 in 1s and also make anybody where the 
    number selected in Prodcom is > than the number in the universe 
    1 rather than less than 1

    ---------------------------------------------------------------------*/

    UPDATE :h_table5 a
    FROM   industry_period b
    SET    prodcom_weight = 1
    WHERE  a.contributor_industry = b.industry
    AND    a.period IN (:g_period, :g_q2)
    AND    a.period = b.period
    AND    b.emp_cutoff  > 20            
    AND    b.emp_cutoff < 50
    AND    a.register_emp >= 50;           

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
  
    IF ret_val = 9 
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error in second update 1 in 1s on ' + :h_table5,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    UPDATE :h_table5 a
    FROM   industry_period b
    SET    prodcom_weight = 1
    WHERE  a.contributor_industry = b.industry
    AND    a.period IN (:g_period, :g_q2)
    AND    a.period = b.period
    AND    b.emp_cutoff  > 50            
    AND    b.emp_cutoff < 100
    AND    a.register_emp >= 100;           

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
  
    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error in third update 1 in 1s on ' + :h_table5,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    UPDATE :h_table5 a
    FROM   industry_period b
    SET    prodcom_weight = 1
    WHERE  a.contributor_industry = b.industry
    AND    a.period IN (:g_period, :g_q2)
    AND    a.period = b.period
    AND    b.emp_cutoff > 100
    AND    a.register_emp >= b.emp_cutoff
    AND    a.prodcom_weight < 1;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
  
    IF ret_val = 9 
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error in fourth update 1 in 1s on ' + :h_table5,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    UPDATE :h_table5
    SET    prodcom_weight = float8(prodcom_universe * 1.0 /prodcom_selected)
    WHERE period IN  (:g_period,:g_q2)
    AND   prodcom_weight <> 1;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
  
    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error in fourth update on ' + :h_table5,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;
    
    RETURN 0;
  
  }       
