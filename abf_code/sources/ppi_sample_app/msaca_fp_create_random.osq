/*---------------------------------------------------------------------

Procedure msaca_fp_create_random

This procedure selects each contributor_reference and sixdig and runs
the random number generator program against it. A random number from
0 to 1000000000 is produced and passed back. The table is then updated

This was run for the first year 199600 and contributor_product pairs
will keep the same PRN for all subsequent years for as long as they are
in the PPI population. Contributor-product pairs which are new to the
population in subsequent years will need to be allocated a PRN. As this
involves running the random number generator a number of times it is
possible that two or more contributor-product pairs will receive the
same PRN. 

----------------------------------------------------------------------*/

PROCEDURE msaca_fp_create_random() =

DECLARE h_frpr_name             = VARCHAR(24) NOT NULL,
        h_table                 = VARCHAR(24) NOT NULL,
        h_table1                = VARCHAR(24) NOT NULL,
        h_table2                = VARCHAR(24) NOT NULL,
        prn_check               = INTEGER2 NOT NULL,
        contributor_reference   = CHAR(11) NOT NULL,
        period                  = INTEGER4 NOT NULL,
        sixdig                  = INTEGER4 NOT NULL,
        h_counter               = INTEGER4 NOT NULL,
        h_random_number         = INTEGER4 NOT NULL,
        ret_val                 = INTEGER1 NOT NULL

{
    h_frpr_name = 'msaca_fp_create_random';
    h_table = 'ppi_sixdig_ann_sum';
    h_table1 = 'temp_ppi_prn_dups';
    h_table2 = 'ppi_prn_dups';
    h_counter = 0;

  /*-------------------------------------------------------------------
   Create temporary table of all new contributor_product pairs as these
   need to have a new prn allocated. Use this table later after they 
   have been allocated a prn and check whether any of them are 
   duplicates 
   ------------------------------------------------------------------*/

    ret_val = CALLPROC batch_fp_drop_table (
                       h_table = :h_table1);
  
    IF ret_val <> 0 THEN RETURN ret_val;
    ENDIF;

    MESSAGE 'Creating table ' + :h_table1;

    CREATE TABLE :h_table1
    AS SELECT period,
              contributor_reference,
              sixdig,
              prn
    FROM      :h_table
    WHERE     period/100 = :g_period/100
    AND       alloc_type = :g_alloc_type
    AND       sample_type = :g_sample_type
    AND       prn = 0;


    ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
       INSERT INTO error_log
       VALUES (    'now',
                   'Error creating table of new cont prod pairs '+ :h_table1,
                   :h_frpr_name,
                   :ret_val,
                   :g_user_id);
       COMMIT;
       RETURN ret_val;
    ENDIF;

    SELECT period,
           contributor_reference,
           sixdig
    FROM   :h_table1
    ORDER BY contributor_reference,
             sixdig
    {
        h_counter = h_counter + 1;

        MESSAGE 'Creating random number for ' + VARCHAR(:contributor_reference)
	    + ' ' + VARCHAR(:g_period) + ' ' + VARCHAR(:sixdig) + '_No.' 
	    + VARCHAR(:h_counter) + '. . .';

        h_random_number = CALLPROC msaca_cp_random_number(1000000000);

        UPDATE  :h_table1
        SET     prn = :h_random_number
        WHERE   contributor_reference = :contributor_reference
        AND     sixdig = :sixdig
        AND     period = :period;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);

        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating random number',
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    };
  /*-----------------------------------------------------------------
   Checks need to be carried to ensure that no duplcate PRN 
   numbers have been created

   First check that no duplicates were created in above run of 
   random program
  -----------------------------------------------------------------*/

    prn_check = 0;

    WHILE prn_check = 0
    DO
  
      ret_val = CALLPROC batch_fp_drop_table (
                         h_table = :h_table2);
  
      IF ret_val <> 0 THEN RETURN ret_val;
      ENDIF;

      MESSAGE 'Creating table ' + :h_table2;

      CREATE TABLE :h_table2
      AS SELECT    a.* 
      FROM         :h_table1 a,
                   :h_table1 b
      WHERE        a.prn = b.prn
      AND          a.tid > b.tid;

      ret_val = CALLPROC batch_check_inq_ing (
                h_num_row_ck = 1,
                h_commit     = 'Y',
                h_rollback   = 'N',
                h_frpr_name  = :h_frpr_name);
  
      IF ret_val = 9 
      THEN
          INSERT INTO error_log
          VALUES (    'now',
                      'System error creating ' + :h_table2,
                      :h_frpr_name,
                      :ret_val,
                      :g_user_id);
          COMMIT;
          RETURN ret_val;

      ELSEIF ret_val = 0
      THEN

      MESSAGE 'Updating table ...' + :h_table1;

	  UPDATE :h_table1 a
          FROM   :h_table1 b
          SET    prn = a.prn + 1
          WHERE  a.prn = b.prn
          AND    a.period/100 = :g_period/100
          AND    a.tid > b.tid;

      ELSEIF ret_val = 1
      THEN

          prn_check = 1;
 
      ENDIF;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);

        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error first update of prn number',
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;

    ENDWHILE;

  /*-----------------------------------------------------------------
   Then check that these prns in temp table are not duplicates of
   any that are already in ppi_sixdig_ann_sum
  -----------------------------------------------------------------*/
    
    prn_check = 0;

    WHILE prn_check = 0
    DO
  
      ret_val = CALLPROC batch_fp_drop_table (
                         h_table = :h_table2);
  
      IF ret_val <> 0 THEN RETURN ret_val;
      ENDIF;

      MESSAGE 'Creating table ' + :h_table2;

      CREATE TABLE :h_table2
      AS SELECT    a.* 
      FROM         :h_table1 a
      WHERE        a.prn IN(
                   SELECT prn
                   FROM   :h_table);

      ret_val = CALLPROC batch_check_inq_ing (
                h_num_row_ck = 1,
                h_commit     = 'Y',
                h_rollback   = 'N',
                h_frpr_name  = :h_frpr_name);
  
      IF ret_val = 9 
      THEN
          INSERT INTO error_log
          VALUES (    'now',
                      'System error creating ' + :h_table2,
                      :h_frpr_name,
                      :ret_val,
                      :g_user_id);
          COMMIT;
          RETURN ret_val;

      ELSEIF ret_val = 0
      THEN

      MESSAGE 'Updating table ...' + :h_table1;

	  UPDATE :h_table1 a
          FROM   :h_table2 b
          SET    prn = a.prn + 1
          WHERE  a.prn = b.prn;

      ELSEIF ret_val = 1
      THEN

          prn_check = 1;
 
      ENDIF;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);

        IF ret_val <> 0
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error second update of prn number',
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;

    ENDWHILE;

  /*-----------------------------------------------------------------
   Finally update ppi_sixdig_ann_sum new contributor_product pairs
   with prn number
  -----------------------------------------------------------------*/
    
    UPDATE :h_table a
    FROM   :h_table1 b
    SET    prn = b.prn
    WHERE  a.period/100 = :g_period/100
    AND    a.alloc_type = :g_alloc_type
    AND    a.sample_type = :g_sample_type
    AND    a.sixdig = b.sixdig
    AND    a.contributor_reference = b.contributor_reference;


    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9 
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error updating ppi_sixdig_ann_sum with random number',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;
 
RETURN 0;
  
}
