/*-s--------------------------------------------------------------------

Procedure msaca_fp_undel_entsales

--------------------------------------------------------------------e-*/

PROCEDURE msaca_fp_undel_entsales     () =

DECLARE ret_val               = INTEGER4 NOT NULL,
        h_table1              = VARCHAR(24) NOT NULL,
        h_table2              = VARCHAR(24) NOT NULL,
        h_table3              = VARCHAR(24) NOT NULL,
        h_table4              = VARCHAR(24) NOT NULL,
        h_ent_table1          = VARCHAR(24) NOT NULL,
        h_ent_table2          = VARCHAR(24) NOT NULL,
        h_ent_table3          = VARCHAR(24) NOT NULL,
        h_ent_table4          = VARCHAR(24) NOT NULL,
        h_ent_table5          = VARCHAR(24) NOT NULL,
        h_ent_table6          = VARCHAR(24) NOT NULL,
        h_ent_table7          = VARCHAR(24) NOT NULL,
        h_file1               = VARCHAR(100) NOT NULL,
        h_file2               = VARCHAR(100) NOT NULL,
        h_path_name1          = VARCHAR(100) NOT NULL,
        h_path_name2          = VARCHAR(100) NOT NULL,
        contributor_reference = CHAR(11) NOT NULL,
        acell                 = CHAR(2) NOT NULL,
        question              = INTEGER4 NOT NULL,
        period                = INTEGER4 NOT NULL,
        h_frpr_name           = VARCHAR(24) NOT NULL

{
    h_frpr_name = 'msaca_fp_undel_entsales';
    h_table1 = 'temp_ppi_undeletes';
    h_table2 = 'ppi_undel_data';
    h_table3 = 'ppi_undel_found';
    h_table4 = 'temp_ppi_undel_weight';
    h_ent_table1 = 'ppi_undel_ents1';
    h_ent_table2 = 'ppi_undel_ents2';
    h_ent_table3 = 'ppi_undel_ents3';
    h_ent_table4 = 'ppi_undel_ents4';
    h_ent_table5 = 'ppi_undel_ents5';
    h_ent_table6 = 'ppi_undel_ents6';
    h_ent_table7 = 'ppi_undel_ent';

    SELECT DBMSINFO('database') AS g_database;

    IF g_database = 'prodlivedb'
    THEN
	h_path_name1 = '/prodcom/live5/files/text';
	h_path_name2 = '/admin/scratch';
    ELSE
	h_path_name1 = '/prodcom/source/produser/files/text';
	h_path_name2 = '/c8scratch';
    ENDIF;

    h_file1 = :h_path_name1 + '/ppi_undeletes_' + VARCHAR(:g_period);
    h_file2 = :h_path_name2 + '/prodcom/ppi_undeletes_' + VARCHAR(:g_period) + '.txt';

   /*-s----------------------------------------------------------------
   Load file of contributor product pairs from file provided by PPI
   statisticians of 'undeletes'.
   ----------------------------------------------------------------e-*/

    ret_val = CALLPROC batch_fp_drop_table(h_table = :h_table1);

    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    message 'Creating table ...' + :h_table1;

    CREATE TABLE :h_table1(
                 sixdig                INTEGER4 NOT NULL,
                 contributor_reference CHAR(11) NOT NULL);


    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error creating ' + :h_table1,
                    :h_frpr_name,
                    9,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    COPY TABLE :h_table1
               (sixdig                = c0comma,
                contributor_reference = c0nl)
    FROM :h_file1;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error copying ' + :h_table1,
                    :h_frpr_name,
                    9,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

   /*-s----------------------------------------------------------------
   Delete existing rows from ppi_undeletes and load new period's data
   ----------------------------------------------------------------e-*/

   DELETE FROM ppi_undeletes
   WHERE  period = :g_period;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error deleting existing rows from ppi_undeletes',
                    :h_frpr_name,
                    9,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    INSERT INTO ppi_undeletes
    SELECT      :g_period as period,
                sixdig,
                contributor_reference
    FROM        :h_table1;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error inserting new rows into ppi_undeletes',
                    :h_frpr_name,
                    9,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

   /*-s----------------------------------------------------------------
   Create table of sixdig data for undeletes, selecting from
   population file - ppi_sixdig_ann_sum
   ----------------------------------------------------------------e-*/

    ret_val = CALLPROC batch_fp_drop_table(h_table = :h_table2);

    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    message 'Creating table ...' + :h_table2;

    CREATE TABLE :h_table2
    AS SELECT    a.*
    FROM         ppi_sixdig_ann_sum a
    WHERE        period/100 = :g_period/100
    AND          alloc_type = :g_alloc_type
    AND          sample_type = :g_sample_type
    AND          contributor_reference IN
                 (SELECT contributor_reference
                  FROM   ppi_undeletes b
                  WHERE  a.sixdig = b.sixdig
                  AND    a.period/100 = b.period/100);

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error creating ' + :h_table2,
                    :h_frpr_name,
                    9,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

   /*-s----------------------------------------------------------------
   Modify table
   ----------------------------------------------------------------e-*/

   MODIFY  :h_table2
   TO BTREE UNIQUE ON period,contributor_reference,sixdig,prn;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error modifying ' + :h_table2,
                    :h_frpr_name,
                    9,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

   /*-s----------------------------------------------------------------
   Create table with empty columns to update with enterpise sales and
   weight1
   ----------------------------------------------------------------e-*/

    ret_val = CALLPROC batch_fp_drop_table(h_table = :h_table3);

    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    message 'Creating table ...' + :h_table3;

    CREATE TABLE :h_table3
    AS SELECT    :g_period AS period,
                 contributor_reference,
                 sixdig,
                 avalue as sixdig_sales,
                 prn,
                 stratum,
                 INT4(0) AS tot_ent_sales,
                 FLOAT8(0) AS weight1
    FROM         :h_table2;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error creating ' + :h_table3,
                    :h_frpr_name,
                    9,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

   /*-s----------------------------------------------------------------
    Update table with weight1 calculated in process 6 and held in table
    ppi_prodcom_weight
    Create a distinct table first of all because of ambiguous replace
    with new version of Ingres
    ----------------------------------------------------------------e-*/
    ret_val = CALLPROC batch_fp_drop_table(h_table = :h_table4);

    IF ret_val <> 0
    THEN
	 RETURN ret_val;
    ENDIF;

    CREATE TABLE :h_table4
    AS SELECT DISTINCT
              contributor_reference,
              period,
              prodcom_weight
    FROM      ppi_prodcom_weight;
 
    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error creating distinct table Weight1 ' + :h_table4,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    message 'Updating table with Weight1 ...' + :h_table3;

    UPDATE :h_table3 a
    FROM   :h_table4 b
    SET    weight1 = b.prodcom_weight
    WHERE  a.period/100 = :g_period/100
    AND    a.period/100 = b.period/100
    AND    a.contributor_reference = b.contributor_reference;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error updating with Weight1 ' + :h_table3,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

   /*-s----------------------------------------------------------------
    Calculate the enterprise sales for these 'undeletes':=

    For each of the contributors/sixdigits contained in table 
    ppi_undel_found, find their original eight
    digit question. This is held in table ppi_eightdig_all created
    in process 3.
    This is needed as this is the Prodcom question before it has been
    updated with owner members and the map file for the Computing
    industry 30020. Go back to cqpv and find the sales of the sixdig
    for all contributors that belong to the enterprise of the sampled
    contributor
   ----------------------------------------------------------------e-*/

    ret_val = CALLPROC batch_fp_drop_table(h_table = :h_ent_table1);

    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    message 'Creating table ...' + :h_ent_table1;

    CREATE TABLE :h_ent_table1
    AS SELECT    period,
                 contributor_reference,
                 original_question,
                 question/1000 as sixdig,
                 acell
    FROM         ppi_eightdig_all a
    WHERE        a.period IN (:g_period,:g_q1,:g_q2,:g_q3,:g_q4)
    AND          a.question/1000 IN
                (SELECT sixdig
                 FROM   :h_table3 b
                 WHERE  period = :g_period
                 AND    a.contributor_reference
                        = b.contributor_reference);

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error creating ' + :h_ent_table1,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*-s----------------------------------------------------------------
    Find the enterprise that the contributor is in. Use the annual
    period for annual but the 4th quarter for quarterly as enterprises
    may have changed during the year
    ----------------------------------------------------------------e-*/

    ret_val = CALLPROC batch_fp_drop_table(h_table = :h_ent_table2);

    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    message 'Creating table ...' + :h_ent_table2;

    CREATE TABLE :h_ent_table2
    AS SELECT DISTINCT
              a.contributor_reference,
              b.enterprise
    FROM      :h_ent_table1 a,
              contributor_period b
    WHERE     a.contributor_reference = b.contributor_reference
    AND       b.period IN (:g_period,:g_q4);

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error creating ' + :h_ent_table2,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*-s----------------------------------------------------------------
    Find all contributors that belong to the enterprise of the selected
    contributor
    ----------------------------------------------------------------e-*/
    ret_val = CALLPROC batch_fp_drop_table(h_table = :h_ent_table3);

    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    message 'Creating table ...' + :h_ent_table3;

    CREATE TABLE :h_ent_table3
    AS SELECT    contributor_reference,
		 period,
                 enterprise
    FROM         contributor_period
    WHERE        period IN (:g_period,:g_q4)
    AND          enterprise IN
                 (SELECT enterprise
                  FROM   :h_ent_table2);

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error creating ' + :h_ent_table3,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;


    /*-s----------------------------------------------------------------
    For all the contributors in ppi_ents3 go back to cqpv and select
    their values
    ----------------------------------------------------------------e-*/

    ret_val = CALLPROC batch_fp_drop_table(h_table = :h_ent_table4);

    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    message 'Creating table ...' + :h_ent_table4;

    CREATE TABLE :h_ent_table4
    AS SELECT  b.enterprise,
	       a.period,
               a.contributor_reference,
               a.question,
               a.question_industry,
               a.contributor_industry,
               a.acell,
               a.avalue
    FROM       cqpv a,
               :h_ent_table3 b
    WHERE      a.period IN (:g_period,:g_q1,:g_q2,:g_q3,:g_q4)
    AND        a.contributor_reference = b.contributor_reference
    AND        a.quest_order = 1
    AND        MOD(a.question,10) = 1;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error creating table ' + :h_ent_table4,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;


    /*-s----------------------------------------------------------------
    Update the original question selected from cqpv from
    ppi_owner_member, created in Process 3 as PPI's sixdigits
    correspond to these rather than Prodcom's questions

    Update again from PPI Map file for the computing industry 30020
    ----------------------------------------------------------------e-*/

    UPDATE :h_ent_table4 a
    FROM   ppi_owner_member b
    SET    question = b.owner_question
    WHERE  a.question = b.question
    AND    b.period = :g_period
    AND    a.period/100 * 100 = b.period;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error updating (1)' + :h_ent_table4,
                    :h_frpr_name,
                    9,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    UPDATE :h_ent_table4 a
    FROM   ppi_map b
    SET    question = (b.sixdig * 1000) + MOD (a.question,1000)
    WHERE  a.question = b.question
    AND    b.period = :g_period
    AND    a.period/100 * 100 = b.period;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error updating (2)' + :h_ent_table4,
                    :h_frpr_name,
                    9,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*-s----------------------------------------------------------------
    Create a table to change the questions to sixdigit level
    ----------------------------------------------------------------e-*/

    ret_val = CALLPROC batch_fp_drop_table(h_table = :h_ent_table5);

    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    message 'Creating table ...' + :h_ent_table5;

    CREATE TABLE :h_ent_table5
    AS SELECT  enterprise,
               question/1000 as sixdig,
               avalue
    FROM       :h_ent_table4 ;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error creating table ' + :h_ent_table5,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*-s----------------------------------------------------------------
    Create a table to sum the values by enterprise within sixdigit
    ----------------------------------------------------------------e-*/

    ret_val = CALLPROC batch_fp_drop_table(h_table = :h_ent_table6);

    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    message 'Creating table ...' + :h_ent_table6;

    CREATE TABLE :h_ent_table6
    AS SELECT  enterprise,
               sixdig,
               sum(avalue) as ent_sales
    FROM       :h_ent_table5
    GROUP BY   enterprise,
	       sixdig;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error creating table ' + :h_ent_table6,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*-s----------------------------------------------------------------
    Insert new periods data into ppi_undel_ent
    ----------------------------------------------------------------e-*/

    DELETE FROM :h_ent_table7
    WHERE period IN (:g_period);

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error deleting existing rows from table ' + :h_ent_table7,
                    :h_frpr_name,
                    9,
                    :g_user_id);
        COMMIT;
    ENDIF;

    message 'Inserting new periods data into table ...' + :h_ent_table7;

    INSERT INTO :h_ent_table7
    SELECT  a.period,
            a.contributor_reference,
            a.sixdig,
            a.sixdig_sales,
            a.prn,
            a.stratum,
	    b.enterprise,
	    INT4(0) as ent_sales
    FROM    :h_table3 a,
	    contributor_period b
    WHERE   a.contributor_reference = b.contributor_reference
    AND     b.period IN (:g_period,:g_q4)
    AND     a.period/100 = b.period/100;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error inserting new rows into ' + :h_ent_table7,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
    ENDIF;

    UPDATE :h_ent_table7 a
    FROM   :h_ent_table6 b
    SET    ent_sales = b.ent_sales
    WHERE  a.sixdig = b.sixdig
    AND    a.enterprise = b.enterprise
    AND    a.period IN (:g_period);

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error updating with ent_sales' + :h_ent_table7,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*-s----------------------------------------------------------------
    Update ppi_undel_found, tot_ent_sales column with ent_sales 
    calculated above
    ----------------------------------------------------------------e-*/

    UPDATE :h_table3 a
    FROM   :h_ent_table7 b
    SET    tot_ent_sales = b.ent_sales
    WHERE  a.period/100 = :g_period/100
    AND    a.period/100 = b.period/100
    AND    a.contributor_reference = b.contributor_reference 
    AND    a.sixdig = b.sixdig;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error updating tot_ent_sales on ' + :h_table3,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*-s----------------------------------------------------------------
    Copy ppi_undel_found to flat file and copy to /memtcap/prodcom
    ----------------------------------------------------------------e-*/

    COPY TABLE :h_table3(
	       period = c0comma,
	       contributor_reference = c0comma,
	       sixdig = c0comma,
	       sixdig_sales = c0comma,
	       prn = c0comma,
	       stratum = c0comma,
	       tot_ent_sales = c0comma,
	       weight1 = c0nl)
    INTO :h_file2;

   RETURN 0;
}

