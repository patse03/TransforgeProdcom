
/*-s--------------------------------------------------------------------

Procedure msaca_fp_copytables1     

--------------------------------------------------------------------e-*/

PROCEDURE msaca_fp_copytables1 () =

DECLARE ret_val               = INTEGER4 NOT NULL,
        h_table1              = VARCHAR(24) NOT NULL,
        h_table2              = VARCHAR(24) NOT NULL,
        h_table3              = VARCHAR(24) NOT NULL,
        h_table4              = VARCHAR(24) NOT NULL,
        h_table5              = VARCHAR(24) NOT NULL,
        h_check_table1        = VARCHAR(24) NOT NULL,
        h_check_table2        = VARCHAR(24) NOT NULL,
        h_check_table3        = VARCHAR(24) NOT NULL,
        h_check_table4        = VARCHAR(24) NOT NULL,
        ppi_file1             = VARCHAR(100) NOT NULL,
        ppi_file2             = VARCHAR(100) NOT NULL,
        ppi_file3             = VARCHAR(100) NOT NULL,
        ppi_file4             = VARCHAR(100) NOT NULL,
        ppi_file5             = VARCHAR(100) NOT NULL,
        h_frpr_name           = VARCHAR(24) NOT NULL

{
    h_frpr_name = 'msaca_fp_copytables1';
    h_table1 = 'ppi_all_params_' + VARCHAR(:g_period);
    h_table2 = 'ppi_contribs_fnd_' + VARCHAR(:g_period);
    h_table3 = 'ppi_contribs_ent_' + VARCHAR(:g_period);
    h_table4 = 'ppi_total_pop_' + VARCHAR(:g_period);
    h_table5 = 'ppi_extract_' + VARCHAR(:g_period);
    h_check_table1 = 'ppi_sample_count';
    h_check_table2 = 'ppi_sample_errors';
    h_check_table3 = 'ppi_excl_errors';
    h_check_table4 = 'ppi_ent_errors';

    ppi_file1 = :g_path_name2 + '/prodcom/ppi_all_params_'
              + VARCHAR(:g_perpha) + '.txt';

    ppi_file2 = :g_path_name2 + '/prodcom/ppi_contribs_fnd_'
              + VARCHAR(:g_perpha) + '.txt';

    ppi_file3 = :g_path_name2 + '/prodcom/ppi_contribs_ent_'
              + VARCHAR(:g_perpha) + '.txt';

    ppi_file4 = :g_path_name2 + '/prodcom/ppi_total_pop_'
              + VARCHAR(:g_perpha) + '.txt';

    ppi_file5 = :g_path_name2 + '/prodcom/ppi_extract_'
              + VARCHAR(:g_perpha) + '.txt';

   /*-s----------------------------------------------------------------
   Drop tables 
   ----------------------------------------------------------------e-*/

    ret_val = CALLPROC batch_fp_drop_table(h_table = :h_table1);

    IF ret_val <> 0
    THEN
	 RETURN ret_val;
    ENDIF;

    ret_val = CALLPROC batch_fp_drop_table(h_table = :h_table2);

    IF ret_val <> 0
    THEN
	 RETURN ret_val;
    ENDIF;

    ret_val = CALLPROC batch_fp_drop_table(h_table = :h_table3);

    IF ret_val <> 0
    THEN
	 RETURN ret_val;
    ENDIF;

    ret_val = CALLPROC batch_fp_drop_table(h_table = :h_table4);

    IF ret_val <> 0
    THEN
	 RETURN ret_val;
    ENDIF;

    ret_val = CALLPROC batch_fp_drop_table(h_table = :h_table5);

    IF ret_val <> 0
    THEN
	 RETURN ret_val;
    ENDIF;



   /*-s----------------------------------------------------------------
   Create tables for period, alloc_type and sample type being run
   ----------------------------------------------------------------e-*/

    MESSAGE 'Creating Table . . .' + :h_table1;

    CREATE TABLE :h_table1
    AS SELECT 
    * FROM  ppi_all_params
    WHERE   period = :g_period
    AND     alloc_type = :g_alloc_type
    AND     sample_type = :g_sample_type;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9 
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error creating ' + :h_table1,
                    :h_frpr_name,
                    9,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

   /*-s----------------------------------------------------------------
   Added August 2000                                             

   Delete from ppi_all_params table created above before passing to 
   PPI IS where:

   alloc_found = 0
   prodcom_pop = 0
   no_quotes   = 0
   ----------------------------------------------------------------e-*/

    DELETE FROM :h_table1
    WHERE (alloc_found = 0
    OR     prodcom_pop = 0
    OR     no_quotes   = 0);

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9 
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error deleting ' + :h_table1,
                    :h_frpr_name,
                    9,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

   /*-s----------------------------------------------------------------
   Create current period's sample table
   ----------------------------------------------------------------e-*/

    MESSAGE 'Creating Table . . .' + :h_table2;

    CREATE TABLE :h_table2
    AS SELECT    period,
		 contributor_reference,
		 sixdig,
		 sixdig_sales,
		 prn AS ent_sales,
		 stratum,
		 alloc_type,
		 sample_type
    FROM         ppi_contribs_found
    WHERE        period = :g_period
    AND          alloc_type = :g_alloc_type
    AND          sample_type = :g_sample_type;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9 
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error creating ' + :h_table2,
                    :h_frpr_name,
                    9,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

   /*-s----------------------------------------------------------------
   Added October 2001
   Update ppi_contribs_found prn column from ppi_contribs_found_ent to
   replace the PRN number with the total enterprise sales as requested 
   by PPI IS
   ----------------------------------------------------------------e-*/

   UPDATE :h_table2 a
   FROM   ppi_contribs_found_ent b
   SET    ent_sales = b.ent_sales
   WHERE  a.period = :g_period
   AND    a.period = b.period
   AND    a.contributor_reference = b.contributor_reference
   AND    a.sixdig = b.sixdig
   AND    a.stratum = b.stratum
   AND    a.alloc_type = b.alloc_type;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9 
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error updating ' + :h_table2,
                    :h_frpr_name,
                    9,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*-s----------------------------------------------------------------
    Added August 2000
    Create a table to count the contributors in the sample by sixdig 
    and stratum.
    Check that column alloc_found on table ppi_all_params equals this
    count
    ----------------------------------------------------------------e-*/

    ret_val = CALLPROC batch_fp_drop_table(h_table = :h_check_table1);

    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    message 'Creating table . . .' + :h_check_table1;

    CREATE  table :h_check_table1
    AS SELECT period,
              sixdig,
              stratum,
              COUNT(contributor_reference) as alloc_found
    FROM      :h_table2
    GROUP BY  period,
              sixdig,
              stratum;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error creating ' + :h_check_table1,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    ret_val = CALLPROC batch_fp_drop_table(h_table = :h_check_table2);

    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    message 'Creating table . . .' + :h_check_table2;

    CREATE  table :h_check_table2
    AS SELECT a.*
    FROM      :h_table1 a,
              :h_check_table1 b 
    WHERE     a.period = b.period
    AND       a.sixdig = b.sixdig
    AND       a.stratum = b.stratum
    AND       a.alloc_found <> b.alloc_found;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9 
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error creating ' + :h_check_table2,
                    :h_frpr_name,
                    9,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;

    ELSEIF ret_val = 0 
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Count of Sixdigs in ppi_contribs_found <> count in table ppi_all_params. Check table : ' + :h_check_table2,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
    ENDIF;

   /*-s----------------------------------------------------------------
   Added August 2000                                             

   Check that sample has had all the exclusions removed 
   ----------------------------------------------------------------e-*/

    ret_val = CALLPROC batch_fp_drop_table(h_table = :h_check_table3);

    IF ret_val <> 0
    THEN
	 RETURN ret_val;
    ENDIF;

    MESSAGE 'Creating Table . . .' + :h_check_table3;

    CREATE TABLE :h_check_table3
    AS SELECT 
    * FROM  :h_table2 a
    WHERE   contributor_reference IN
            (SELECT contributor_reference 
             FROM   ppi_exclusions b
             WHERE  a.period = b.period
             AND    a.alloc_type = b.alloc_type
             AND    a.sample_type = b.sample_type);

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9 
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error creating ' + :h_check_table3,
                    :h_frpr_name,
                    9,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;

    ELSEIF ret_val = 0 
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Contributors found in sample that should be excluded. Check table : ' + :h_check_table1,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
    ENDIF;

   /*-s----------------------------------------------------------------
   Create current period's enterprise sales table
   ----------------------------------------------------------------e-*/

    MESSAGE 'Creating Table . . .' + :h_table3;

    CREATE TABLE :h_table3
    AS SELECT 
    * FROM  ppi_contribs_found_ent
    WHERE   period/100 = :g_period/100
    AND     alloc_type = :g_alloc_type
    AND     sample_type = :g_sample_type;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9 
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error creating ' + :h_table3,
                    :h_frpr_name,
                    9,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*-s----------------------------------------------------------------
    Create a table to hold all CPPs that are in the sample but have no
    Enterprise sales. If any found write to error_log 
    ----------------------------------------------------------------e-*/

    ret_val = CALLPROC batch_fp_drop_table(h_table = :h_check_table4);

    IF ret_val <> 0
    THEN
	 RETURN ret_val;
    ENDIF;

    MESSAGE 'Creating Table . . .' + :h_check_table4;

    CREATE TABLE :h_check_table4
    AS SELECT    a.*
    FROM         :h_table2 a
    WHERE        a.contributor_reference NOT IN
                 (SELECT contributor_reference
                  FROM   :h_table3 b
                  WHERE  a.period/100 = b.period/100
                  AND    a.alloc_type = b.alloc_type
                  AND    a.sample_type = b.sample_type);


    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9 
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error creating ' + :h_check_table4,
                    :h_frpr_name,
                    9,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;

    ELSEIF ret_val = 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Missing enterprise sales - Please check table: ' + :h_check_table4,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
    ENDIF;

   /*-s----------------------------------------------------------------
   Added August 2000                                             

   Delete from enterprise sales table where the sixdig on 
   ppi_all_params has no_quotes = 0
   ----------------------------------------------------------------e-*/

    DELETE FROM :h_table3 a
    WHERE sixdig IN
         (SELECT sixdig
          FROM   ppi_all_params b
          WHERE  b.period      = :g_period
          AND    b.alloc_type  = :g_alloc_type
          AND    b.sample_type = :g_sample_type
          AND    a.stratum     = b.stratum
          AND    b.no_quotes   = 0);

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9 
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error deleting where no_quotes = 0 from ' + :h_table3,
                    :h_frpr_name,
                    9,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

   /*-s----------------------------------------------------------------
   Create current period's total population table with extra W1 column
   ----------------------------------------------------------------e-*/

    MESSAGE 'Creating Table . . .' + :h_table4;

    CREATE TABLE :h_table4
    AS SELECT 
    * FROM  ppi_total_pop
    WHERE   period/100 = :g_period/100
    AND     alloc_type = :g_alloc_type
    AND     sample_type = :g_sample_type;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9 
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error creating ' + :h_table4,
                    :h_frpr_name,
                    9,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

   /*-s----------------------------------------------------------------
   Create an extract of current period/phase contributor data
   Added Feb 2003 (used to be extracted in sql)
   ----------------------------------------------------------------e-*/

    MESSAGE 'Creating Table . . .' + :h_table5;

    CREATE TABLE :h_table5
    AS SELECT a.contributor_reference,
              b.add_name1,
              a.sixdig,
              a.stratum,
              INT4(0) as no_quotes,
              a.sixdig_sales
    FROM      ppi_contribs_found a,
              ppi_recruitment b
    WHERE     a.contributor_reference = b.contributor_reference
    AND       a.period = :g_period
    AND       a.period = b.period
    AND       a.alloc_type = :g_alloc_type
    AND       a.alloc_type = b.alloc_type
    AND       a.sample_type = :g_sample_type;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9 
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error creating ' + :h_table5,
                    :h_frpr_name,
                    9,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*-s----------------------------------------------------------------
    Update table to set no_quotes equal to no_quotes held in table 
    ppi_all_params
    ----------------------------------------------------------------e-*/

    MESSAGE 'Updating Table . . .' + :h_table5;

    UPDATE :h_table5 a
    FROM   ppi_all_params b
    SET    no_quotes = b.no_quotes
    WHERE  b.period = :g_period
    AND    b.alloc_type = :g_alloc_type
    AND    a.sixdig = b.sixdig
    AND    a.stratum = b.stratum;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9 
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error updating ' + :h_table5,
                    :h_frpr_name,
                    9,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*-s----------------------------------------------------------------
    Copy tables to flat files
    ----------------------------------------------------------------e-*/

    message 'Copying table ...' + :h_table1;
   
    COPY TABLE :h_table1(
    period         = c0comma,
    fourdig        = c0comma,
    sixdig         = c0comma,
    stratum        = c0comma,
    alloc          = c0comma,
    prodcom_pop    = c0comma,
    alloc_found    = c0comma,
    no_quotes      = c0comma,
    alloc_type     = c0comma,
    sample_type    = c0nl)
    INTO :ppi_file1;
    
    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error copying file ' + :ppi_file1,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    message 'Copying table ...' + :h_table2;
   
    COPY TABLE :h_table2(
    period                = c0comma,
    contributor_reference = c0comma,
    sixdig                = c0comma,
    sixdig_sales          = c0comma,
    ent_sales             = c0comma,
    stratum               = c0comma,
    alloc_type            = c0comma,
    sample_type           = c0nl)
    INTO :ppi_file2;
    
    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error copying file ' + :ppi_file2,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    message 'Copying table ...' + :h_table3;

    COPY TABLE :h_table3(
    period                = c0comma,
    contributor_reference = c0comma,
    sixdig                = c0comma,
    sixdig_sales          = c0comma,
    prn                   = c0comma,
    stratum               = c0comma,
    enterprise            = c0comma,
    ent_sales             = c0comma,
    alloc_type            = c0comma,
    sample_type           = c0nl)
    INTO :ppi_file3;
    
    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error copying file ' + :ppi_file3,
                    :h_frpr_name,
                    :ret_val,
                   :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    message 'Copying table ...' + :h_table4;

    COPY TABLE :h_table4(
    period                = c0comma,
    contributor_reference = c0comma,
    sixdig                = c0comma,
    avalue                = c0comma,
    stratum               = c0comma,
    prn                   = c0comma,
    alloc_type            = c0comma,
    sample_type           = c0comma,
    prodcom_weight        = c0nl)
    INTO :ppi_file4;
    
    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error copying file ' + :ppi_file4,
                    :h_frpr_name,
                    :ret_val,
                   :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;


    message 'Copying table ...' + :h_table5;
   
    COPY TABLE :h_table5(
    contributor_reference = c0comma,
    add_name1             = c0comma,
    sixdig                = c0comma,
    stratum               = c0comma,
    no_quotes             = c0comma,
    sixdig_sales          = c0nl)
    INTO :ppi_file5;
    
    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error copying file ' + :ppi_file5,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;


   RETURN 0;
}
    
