
PROCEDURE msay_fp_one_off_reclassify (

        contributor_reference = CHAR(11) NOT NULL,
        period                = INTEGER4 NOT NULL,
        contributor_industry  = INTEGER4 NOT NULL,
        contributor_inquiry   = INTEGER1 NOT NULL,
        alt_industry          = INTEGER4 NOT NULL,

        total_sales            = INTEGER4 NOT NULL,
        prin_prod            = INTEGER4 NOT NULL,

        h_subclass            = INTEGER4 NOT NULL,
        reclassified          = CHAR(1) NOT NULL,
        out_of_scope          = CHAR(1) NOT NULL) =

DECLARE h_frpr_name           = VARCHAR(24) NOT NULL,
        ret_val               = INTEGER1 NOT NULL,
        h_max_period          = INTEGER4 NOT NULL,
        q1                    = INTEGER4 NOT NULL,
        q2                    = INTEGER4 NOT NULL,
        q3                    = INTEGER4 NOT NULL,
        q4                    = INTEGER4 NOT NULL,

        h_table1              = VARCHAR(24) NOT NULL,
        h_table2              = VARCHAR(24) NOT NULL,
        h_table3              = VARCHAR(24) NOT NULL,
        h_table4              = VARCHAR(24) NOT NULL,
        h_changed             = CHAR(1) NOT NULL,
        h_section             = CHAR(1) NOT NULL,
        h_count               = INTEGER1 NOT NULL,
        h_division            = INTEGER1 NOT NULL,
        h_grp                 = INTEGER4 NOT NULL,
        h_class               = INTEGER4 NOT NULL,
        h_merchanted          = INTEGER4 NOT NULL,
        h_avalue              = INTEGER4 NOT NULL,
        h_services            = INTEGER4 NOT NULL,
        h_work_done           = INTEGER4 NOT NULL,
        h_waste               = INTEGER4 NOT NULL,
        h_total_sales         = INTEGER4 NOT NULL,
        h_question            = INTEGER4 NOT NULL,
        h_proposed_class      = INTEGER4 NOT NULL,

        h_prin_class          = INTEGER4 NOT NULL,
        h_prin_group          = INTEGER4 NOT NULL,
        h_prin_division       = INTEGER1 NOT NULL,
        h_prin_section        = CHAR(1)  NOT NULL,
        h_prin_subclass_value = INTEGER4 NOT NULL,
        h_prin_class_value    = INTEGER4 NOT NULL,
        h_prin_group_value    = INTEGER4 NOT NULL,
        h_prin_division_value = INTEGER4 NOT NULL,
        h_prin_section_value  = INTEGER4 NOT NULL,

        h_merchanted_perc     = FLOAT8 NOT NULL,
        h_work_done_perc      = FLOAT8 NOT NULL,
        h_waste_perc          = FLOAT8 NOT NULL,
        h_services_perc       = FLOAT8 NOT NULL,
        h_stand_head_perc     = FLOAT8 NOT NULL,

{
    h_frpr_name = 'msay_fp_one_off_reclassify';

    h_table1 = 'reclass_cqpv1';
    h_table2 = 'reclass_cqpv2';
    h_table3 = 'reclass_cqpv3';
    h_table4 = 'reclass_cqpv4';
    out_of_scope = 'n';
    reclassified = 'n';
    h_changed = 'n';
    
    total_sales = 0;
    prin_prod = 0;

    /*--------------------------------------------------------------
    Remove entry if already on reclass_contrib
    --------------------------------------------------------------*/

    DELETE FROM reclass_contrib
    WHERE       contributor_reference = :contributor_reference
    AND         period = :period;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO bto_error_log
        VALUES (    'now',
                    'Error deleting from reclass_contrib',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*------------------------------------------------------------------
     Only reclassify if the period is the latest one that has been
     receipted. (For 15, period must be nn03)

    IF :contributor_inquiry = 15 AND MOD(:period,10) <> 3
    THEN
        RETURN 0;
    ENDIF;

    IF :contributor_inquiry = 14
    THEN
        SELECT IFNULL(MAX(period),0) AS h_max_period
        FROM   contributor_period
        WHERE  contributor_reference = :contributor_reference
        AND    receipt_date <> '';
    ELSE
        SELECT IFNULL(MAX(period),0) AS h_max_period
        FROM   contributor_period
        WHERE  contributor_reference = :contributor_reference
        AND    MOD(period,100) = 3
        AND    receipt_date <> '';
    ENDIF;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO bto_error_log
        VALUES (    'now',
                    'Error selecting from contributor_period',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    IF :h_max_period <> :period
    THEN
        RETURN 0;
    ENDIF;
    --------------------------------------------------------------*/

    IF :contributor_inquiry = 15
    THEN
        /*--------------------------------------------------------------
         If period is 199603, q1=199506, q2=199509, q3=199512, q4=199603
        ----------------------------------------------------------*/

        q4 = :period;

        ret_val = CALLPROC msa_fp_prev_periods (
                  inquiry      = 15,
                  period       = :q4,
                  prev_period1 = BYREF(:q3),
                  prev_period2 = BYREF(:q2),
                  prev_period3 = BYREF(:q1));
endif;
        /*--------------------------------------------------------------
         Only test for reclassification when contributor was selected
         for at least 3 of the periods above

        h_count = 0;

        SELECT COUNT(*) AS h_count
        FROM   contributor_period
        WHERE  contributor_reference = :contributor_reference
        AND    period IN (:q1,:q2,:q3,:q4);

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);

        IF ret_val <> 0
        THEN
            INSERT INTO bto_error_log
            VALUES (    'now',
                        'Error selecting from contributor_period',
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;

        IF :h_count < 3
        THEN
            RETURN 0;
        ENDIF;

    ENDIF;
        --------------------------------------------------------------*/

    ret_val = CALLPROC batch_fp_drop_table ( h_table = :h_table1);
    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    ret_val = CALLPROC batch_fp_drop_table ( h_table = :h_table3);
    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    ret_val = CALLPROC batch_fp_drop_table ( h_table = :h_table4);
    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    /*--------------------------------------------------------------
     Create table for this Contributor from cqpv
    --------------------------------------------------------------*/

    IF :contributor_inquiry = 15
    THEN
        CREATE TABLE :h_table3
        AS SELECT    question,
                     contributor_industry,
                     question_industry,
                     quest_order,
                     avalue
        FROM         jw_cqpv2
        WHERE        contributor_reference = :contributor_reference
        AND          period IN (:q1,:q2,:q3);

        CREATE TABLE :h_table4
        AS SELECT    question,
                     contributor_industry,
                     question_industry,
                     quest_order,
                     avalue
        FROM         bto_question
        WHERE        contributor_reference = :contributor_reference
        AND          period IN (:q4);
       
	INSERT INTO :h_table3 
	SELECT * FROM :h_table4;

        CREATE TABLE :h_table1
        AS SELECT    question,
                     contributor_industry,
                     question_industry,
                     quest_order,
                     SUM(avalue) AS avalue
        FROM         :h_table3
        GROUP BY     question,
                     contributor_industry,
                     question_industry,
                     quest_order;

    ELSE
	/* changed from bto_question*/

        CREATE TABLE :h_table1
        AS SELECT    question,
                     contributor_industry,
                     question_industry,
                     quest_order,
                     avalue
        FROM         cqpv
        WHERE        contributor_reference = :contributor_reference
        AND          period = :period;
    ENDIF;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9 
    THEN
        INSERT INTO bto_error_log
        VALUES (    'now',
                    'Error selecting from cqpv',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*------------------------------------------------------------------
     Load standard headings
    ------------------------------------------------------------------*/

    h_merchanted = 0;
    h_work_done = 0;
    h_waste = 0;
    h_services = 0;
    h_total_sales = 0;
    SELECT question AS h_question,
           avalue AS h_avalue
    FROM   :h_table1
    WHERE  quest_order <> 1
    {
        IF MOD(:h_question,10000) = 9301
        THEN
            h_merchanted = :h_avalue;

        ELSEIF MOD(:h_question,10000) = 9401
        THEN
            h_work_done = :h_avalue;

        ELSEIF MOD(:h_question,10000) = 9501
        THEN
            h_waste = :h_avalue;

        ELSEIF MOD(:h_question,10000) = 9601
        THEN
            h_services = :h_avalue;

        ELSEIF MOD(:h_question,10000) = 9200
        THEN
            h_total_sales = :h_avalue;

            total_sales = :h_avalue;

        ENDIF;
    };

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9 
    THEN
        INSERT INTO bto_error_log
        VALUES (    'now',
                    'Error loading standard headings',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*------------------------------------------------------------------
     Test for out-of-scope
    ------------------------------------------------------------------*/

    IF :h_total_sales = 0
    THEN
        h_merchanted_perc = 0;
        h_work_done_perc = 0;
        h_waste_perc = 0;
        h_services_perc = 0;
        h_stand_head_perc = 0;
    ELSE
        h_merchanted_perc = :h_merchanted * 100 / :h_total_sales;
        h_work_done_perc = :h_work_done * 100 / :h_total_sales;
        h_waste_perc = :h_waste * 100 / :h_total_sales;
        h_services_perc = :h_services * 100 / :h_total_sales;
        h_stand_head_perc = (:h_merchanted + :h_waste + :h_services) *
                          100 / :h_total_sales;
    ENDIF;

    IF :h_merchanted_perc > 85
    THEN
        out_of_scope = 'y';
    ENDIF;

    IF :h_waste_perc > 60
    THEN
        out_of_scope = 'y';
    ENDIF;

    IF :h_services_perc > 60
    THEN
        out_of_scope = 'y';
    ENDIF;

    /*------------------------------------------------------------------
     Test if standard headings collectively exceed cutoff
    ------------------------------------------------------------------*/

    IF :out_of_scope = 'n'
    THEN
        IF :h_stand_head_perc > 85
        THEN
            out_of_scope = 'y';
        ENDIF;
    ENDIF;

    IF :out_of_scope = 'y'
    THEN
        INSERT INTO reclass_contrib (
                    contributor_reference,
                    period,
                    inquiry,
                    current_ind,
                    current_ind_perc,
                    proposed_ind,
                    proposed_ind_perc,
                    action_date,
                    action,
                    user_id)
        VALUES (    :contributor_reference,
                    :period,
                    :contributor_inquiry,
                    :alt_industry,
                    0,
                    111111111,
                    0,
                    'now',
                    'NON PROD',
                    :g_user_id);

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);

        IF ret_val = 9 
        THEN
            INSERT INTO bto_error_log
            VALUES (    'now',
                        'Error inserting out-of-scope into reclass_contrib',
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;

        ENDIF;

        RETURN 0;

    ENDIF;

    /*------------------------------------------------------------------
     Create temporary table to hold all grps/divisions/etc
    ------------------------------------------------------------------*/

    ret_val = CALLPROC batch_fp_drop_table ( h_table = :h_table2);
    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    CREATE TABLE :h_table2
    AS SELECT    a.question,
                 a.contributor_industry,
                 a.question_industry,
                 a.avalue,
                 b.section,
                 (a.question_industry/1000) AS division,
                 (a.question_industry/100) AS grp,
                 (a.question_industry/10) AS class
    FROM         :h_table1 a,
                 top_down_lookup b
    WHERE        a.question_industry/1000 = b.division
    AND          a.quest_order = 1
    AND          MOD(a.question,10) = 1;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO bto_error_log
        VALUES (    'now',
                    'Error creating ' + :h_table2,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;

    ELSEIF ret_val = 1
    THEN
        RETURN 0;
    ENDIF;

    /*------------------------------------------------------------------
     Update question_industry to its IDBR one (e.g. 15110 --> 15111)
    ------------------------------------------------------------------*/

    UPDATE :h_table2 a
    FROM   question_levels b
    SET    question_industry = b.question_subclass
    WHERE  a.question = b.question;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO bto_error_log
        VALUES (    'now',
                    'Error updating from question_subclass',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*------------------------------------------------------------------
     Find what categories principal products are in
    ------------------------------------------------------------------*/

    h_prin_class = :contributor_industry / 10;
    h_prin_group = :contributor_industry / 100;
    h_prin_division = :contributor_industry / 1000;

    SELECT section AS h_prin_section
    FROM   top_down_lookup
    WHERE  division = :contributor_industry / 1000;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9 
    THEN
        INSERT INTO bto_error_log
        VALUES (    'now',
                    'Error calculating principal section',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*------------------------------------------------------------------
     Find value of principal products - ALT INDUSTRY (i.e. industry
     selected by IDBR)
    ------------------------------------------------------------------*/

    SELECT IFNULL(SUM(avalue),0) AS h_prin_subclass_value
    FROM   :h_table2
    WHERE  question_industry = :alt_industry;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO bto_error_log
        VALUES (    'now',
                    'Error adding up Prin Ind Values',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*------------------------------------------------------------------
     Find value of principal products - CLASS
    ------------------------------------------------------------------*/

    SELECT IFNULL(SUM(avalue),0) AS h_prin_class_value
    FROM   :h_table2
    WHERE  class = :h_prin_class;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO bto_error_log
        VALUES (    'now',
                    'Error adding Prin Class Values',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*------------------------------------------------------------------
     Find value of principal products - GROUP
    ------------------------------------------------------------------*/

    SELECT IFNULL(SUM(avalue),0) AS h_prin_group_value
    FROM   :h_table2
    WHERE  grp = :h_prin_group;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO bto_error_log
        VALUES (    'now',
                    'Error adding Prin Group Values',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*------------------------------------------------------------------
     Find value of principal products - DIVISION
    ------------------------------------------------------------------*/

    SELECT IFNULL(SUM(avalue),0) AS h_prin_division_value
    FROM   :h_table2
    WHERE  division = :h_prin_division;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO bto_error_log
        VALUES (    'now',
                    'Error adding Prin Div Values',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*------------------------------------------------------------------
     Find value of principal products - SECTION
    ------------------------------------------------------------------*/

    SELECT IFNULL(SUM(avalue),0) AS h_prin_section_value
    FROM   :h_table2
    WHERE  section = :h_prin_section;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO bto_error_log
        VALUES (    'now',
                    'Error adding Prin Section Values',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*------------------------------------------------------------------
     Find section that most Sales are in:
     If not > 105% of current section, current section stays the max.
    ------------------------------------------------------------------*/

    SELECT   SUM(avalue) as h_avalue,
             section AS h_section
    FROM     :h_table2
    GROUP BY section
    ORDER BY h_avalue DESC;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO bto_error_log
        VALUES (    'now',
                    'Error selecting section',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    IF :h_section <> :h_prin_section
    THEN
        IF :h_avalue > :h_prin_section_value * 105.0 / 100
        THEN
            h_changed = 'y';
        ENDIF;
    ENDIF;

    /*------------------------------------------------------------------
     Find division that most Sales for that section are in.
     If you haven't changed, then if > 105% of current division,
     change sections
    ------------------------------------------------------------------*/

    SELECT   SUM(avalue) as h_avalue,
             division AS h_division
    FROM     :h_table2
    WHERE    section = :h_section
    GROUP BY division
    ORDER BY h_avalue DESC;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO bto_error_log
        VALUES (    'now',
                    'Error selecting division',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    IF :h_changed = 'n'
    THEN
        IF :h_division <> :h_prin_division
        THEN
            IF :h_avalue > :h_prin_division_value * 105.0 / 100
            THEN
                h_changed = 'y';
            ENDIF;
        ENDIF;
    ENDIF;

    /*------------------------------------------------------------------
     Find grp that most Sales for that division are in.
     If you haven't changed, then if > 105% of current group,
     change groups
    ------------------------------------------------------------------*/

    SELECT   SUM(avalue) as h_avalue,
             grp AS h_grp
    FROM     :h_table2
    WHERE    division = :h_division
    GROUP BY grp
    ORDER BY h_avalue DESC;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO bto_error_log
        VALUES (    'now',
                    'Error selecting group',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    IF :h_changed = 'n'
    THEN
        IF :h_grp <> :h_prin_group
        THEN
            IF :h_avalue > :h_prin_group_value * 105.0 / 100
            THEN
                h_changed = 'y';
            ENDIF;
        ENDIF;
    ENDIF;

    /*------------------------------------------------------------------
     Find Class that most Sales for that group are in.
     If you haven't changed, then if > 105% of current class,
     change classes
    ------------------------------------------------------------------*/

    SELECT   SUM(avalue) as h_avalue,
             class AS h_class
    FROM     :h_table2
    WHERE    grp = :h_grp
    GROUP BY class
    ORDER BY h_avalue DESC;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO bto_error_log
        VALUES (    'now',
                    'Error selecting class',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    IF :h_changed = 'n'
    THEN
        IF :h_class <> :h_prin_class
        THEN
            IF :h_avalue > :h_prin_class_value * 105.0 / 100
            THEN
                h_changed = 'y';
            ENDIF;
        ENDIF;
    ENDIF;

    /*------------------------------------------------------------------
     Find Subclass that most Sales for that class are in:
     1.  If you haven't changed, then if > 105% of current class,
         change classes.
     2.  If you have changed, change classes regardless.
    ------------------------------------------------------------------*/

    SELECT   SUM(avalue) as h_avalue,
             question_industry AS h_subclass
    FROM     :h_table2
    WHERE    class = :h_class
    GROUP BY question_industry
    ORDER BY h_avalue DESC;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO bto_error_log
        VALUES (    'now',
                    'Error selecting subclass',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    IF :h_changed = 'n'
    THEN
        IF :h_subclass <> :alt_industry
        THEN
            IF :h_avalue > :h_prin_subclass_value * 105.0 / 100
            THEN
                h_changed = 'y';
                prin_prod = :h_avalue;
            ENDIF;
        ENDIF;
    ENDIF;

    IF :h_changed = 'n'
    THEN
        ret_val = CALLPROC batch_fp_drop_table ( h_table = :h_table1);
        ret_val = CALLPROC batch_fp_drop_table ( h_table = :h_table2);
        RETURN 0;
    ENDIF;

    reclassified = 'y';

    ret_val = CALLPROC batch_fp_drop_table ( h_table = :h_table1);
    ret_val = CALLPROC batch_fp_drop_table ( h_table = :h_table2);

    RETURN 0;
}
