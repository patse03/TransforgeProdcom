
PROCEDURE msay_fp_score_forms (

        h_testing                 = INTEGER1 NOT NULL,
) =
 
DECLARE h_frpr_name               = VARCHAR(24) NOT NULL,
        ret_val                   = INTEGER1 NOT NULL,
        ret_val_2                 = INTEGER1 NOT NULL,
        h_reset                   = INTEGER1 NOT NULL,
        h_contributor_reference   = CHAR(11) NOT NULL,
        h_hold_reference          = CHAR(11) NOT NULL,
        h_period                  = INTEGER4 NOT NULL,
        h_avalue                  = INTEGER4 NOT NULL,
        h_question                = INTEGER4 NOT NULL,
        h_industry                = INTEGER4 NOT NULL,
        h_question_industry       = INTEGER4 NOT NULL,
        h_alt_industry            = INTEGER4 NOT NULL,
        h_new_question            = INTEGER4 NOT NULL,
        h_inquiry                 = INTEGER1 NOT NULL,
        h_quest_order             = INTEGER1 NOT NULL,
	h_strata                  = INTEGER1 NOT NULL,
        h_forms_reclassed         = INTEGER4 NOT NULL,
        h_forms_confirmed         = INTEGER4 NOT NULL,
        h_fails_confirmed         = INTEGER4 NOT NULL,
        h_register_emp            = INTEGER4 NOT NULL,
        h_sum_of_01s              = INTEGER4 NOT NULL,
        h_value_of_01             = INTEGER4 NOT NULL,
        h_total_sales             = INTEGER4 NOT NULL,
        h_counter                 = INTEGER4 NOT NULL,
        h_count                   = INTEGER4 NOT NULL,
        h_check                   = INTEGER4 NOT NULL,
        h_reclassified            = CHAR(2) NOT NULL,
        h_out_of_scope            = CHAR(2) NOT NULL,
        h_original_acell          = CHAR(2) NOT NULL,
        h_acell_type              = CHAR(2) NOT NULL,
        h_acell                   = CHAR(2) NOT NULL,
        h_total_rows              = INTEGER4 NOT NULL,
        h_new_total_sales         = INTEGER4 NOT NULL,
        h_atypical                = CHAR(1) NOT NULL,
        h_mpi_cong_flag           = CHAR(1) NOT NULL,
        h_mpi_forms               = INTEGER4 NOT NULL,
        prev_period               = INTEGER4 NOT NULL,
        prev_period1              = INTEGER4 NOT NULL,
        mpi_diff                  = INTEGER4 NOT NULL,
	mpi_perc                  = INTEGER4 NOT NULL,
	h_mpi_total_turnover      = INTEGER4 NOT NULL,
	h_pesticide_count         = INTEGER1 NOT NULL,
        h_debug                   = VARCHAR(160) NOT NULL,
        h_score                   = FLOAT8 NOT NULL,
        h_threshold               = FLOAT8 NOT NULL,
        h_band                    = CHAR(1) NOT NULL,
        h_zone                    = CHAR(1) NOT NULL,
	h_code                    = INTEGER1 NOT NULL,
	h_error_status            = INTEGER1 NOT NULL,
        contributor_reference     = CHAR(11) NOT NULL,
 
        lp_testing_cleardown      = PROCEDURE,
        lp_error_check            = PROCEDURE RETURNING INTEGER,
        lp_confirm_form           = PROCEDURE RETURNING INTEGER,
        lp_confirm_fails          = PROCEDURE RETURNING INTEGER,
        lp_total_sales_rezone     = PROCEDURE RETURNING INTEGER,
        lp_data_continuity_rezone = PROCEDURE RETURNING INTEGER,
        lp_score_question         = PROCEDURE RETURNING INTEGER,
        lp_score_form             = PROCEDURE RETURNING INTEGER,
        lp_estimate_prev_vol      = PROCEDURE RETURNING INTEGER,
        lp_estimate_prev_val      = PROCEDURE RETURNING INTEGER,
        lp_set_weight             = PROCEDURE RETURNING INTEGER,
        lp_insert_score           = PROCEDURE RETURNING INTEGER

  /*------------------------------------------------------------------
        Selects Threshold to use in question scoring and zoning.
  ------------------------------------------------------------------*/

  SELECT a.threshold AS h_threshold
  FROM   bto_scoring_threshold a
  WHERE  a.date_effective = (SELECT MAX(z.date_effective)
                             FROM   bto_scoring_threshold z); 
    
  ret_val = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF ret_val != 0 
  THEN 
    h_debug = 'ERROR: Failed to select scoring threshold.';
    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:ret_val);
    RETURN :ret_val;
  ENDIF;

  /*------------------------------------------------------------------
       Question scoring loop.
  ------------------------------------------------------------------*/

  h_debug = 'PRO: Starting loop to score questions for selective ' 
          + 'editing.';
  CALLPROC batch_fp_error_log
           (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=0);

  h_check = 0;

  SELECT period as h_period,
         contributor_reference as h_contributor_reference,
	 contributor_industry  as h_industry,
	 question as h_question,
	 avalue as h_avalue,
	 acell as h_acell
  FROM   bto_question 
  ORDER BY period, contributor_reference ,question
  BEGIN
      
    h_check = h_check + 1;

    IF h_contributor_reference <> h_hold_reference
    THEN
      h_hold_reference = h_contributor_reference;
      h_counter = h_counter + 1;
      h_check   = 1;
    ENDIF;

    MESSAGE 'Scoring loop [Form ' +VARCHAR(:h_counter) +'/'
          +  VARCHAR(:h_count) +'] Question: '
          +  VARCHAR(:h_check);

    ret_val = 0;
    h_score = 0;
    h_code = 0;
    h_zone = ' ';


    h_debug = 'TMP:    Scoring ' + VARCHAR(:h_period) 
            + ':' + VARCHAR(:h_contributor_reference)
	    + ':' + VARCHAR(:h_question)
	    + ':' + VARCHAR(:h_avalue);
    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=0);

    ret_val = CALLPROC lp_score_question (p_score = BYREF(:h_score),
                                          p_code  = BYREF(:h_code));

    IF h_testing = 1     /* For testing and debugging */
    THEN  
      h_debug = 'DBG:   Finished scoring [' 
              + VARCHAR(:h_counter) + '] ' 
              + VARCHAR(:h_period) + ' ' 
              + VARCHAR(:h_contributor_reference) + ' ' 
              + VARCHAR(:h_question) +'. Score: '
              + VARCHAR(:h_score) +'. ';
      CALLPROC batch_fp_error_log
               (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=0);
    ENDIF;

    h_debug = 'TMP:    Score calculated successfully. '; /* Default */

    IF ret_val > 1
    THEN

      RETURN :ret_val; /* Doesnt write default */

     ELSEIF ret_val = 1 THEN

      h_score = 9999999;
      h_debug = 'TMP:    Default score used. ';

      IF h_code = 1 THEN
        h_debug = :h_debug + 'Written-in detected.';
       ELSEIF h_code = 2 THEN
        h_debug = :h_debug + 'Contributor is in enforcement.';
       ELSEIF h_code = 3 THEN
        h_debug = :h_debug + 'Key responder detected.';
       ELSEIF h_code = 4 THEN
        h_debug = :h_debug + 'Special marker detected.';
       ELSEIF h_code = 5 THEN
        h_debug = :h_debug + 'No previous returns for question.';
       ELSEIF h_code = 6 THEN
        h_debug = :h_debug + 'Unable to get a total question value.';
       ELSEIF h_code = 7 THEN
        h_debug = :h_debug + 'Gross question total is zero.';
       ELSEIF h_code = 8 THEN
        h_score = 0;
        h_debug = 'TMP:    Zero score forced by zero return on new question.';
       ELSEIF h_code = 9 THEN
        h_score = 0;
        h_debug = 'TMP:    Zero score forced by ' +VARCHAR(:h_acell)
                + ' cell marker.';
       ELSEIF h_code = 10 THEN
        h_score = 0;
        h_debug = 'TMP:    Zero score forced by off spec return while testing.';
       ELSE
        h_code = 99;
        h_debug = :h_debug + 'Unable to specify reason. Code '
                + VARCHAR(:h_code) +'.';
      ENDIF;

    ENDIF; /* End of ret_val > 1 or = 1 */

    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=0);

    /*------------------------------------------------------------------
           Inserts score, code and zone into question_reference.
    ------------------------------------------------------------------*/


    ret_val = CALLPROC lp_insert_score (p_score = :h_score,
                                        p_code  = :h_code,
                                        p_acell = :h_acell);

    IF ret_val != 0 THEN RETURN 9; ENDIF;

  END;

  h_debug = 'PRO: Ending loop to score questions for selective editing.';
  CALLPROC batch_fp_error_log
           (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=0);

  /*-----------------------------------------------------------------------
         Modifies bto_question_score to btree, not unique as although
         duplicate forms will never be scored in reality, testing is 
         another matter.
  -----------------------------------------------------------------------*/

  h_debug =  'TMP: Modifying bto_question_score to btree.';
  CALLPROC batch_fp_error_log
           (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=0);

  MODIFY bto_question_score TO BTREE
      ON period, contributor_reference, question;

  ret_val = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF ret_val = 9
  THEN
    h_debug = 'ERROR: Failed to modify bto_question_score.'; 
    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:ret_val);
    RETURN ret_val;
  ENDIF;

  /*----------------------------------------------------------------
        Score forms based on their max question score.
  ----------------------------------------------------------------*/

  h_debug = 'PRO: Starting loop to score forms for selective editing.';
  CALLPROC batch_fp_error_log
           (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=0);

  h_counter = 0;
  h_hold_reference = '';

  SELECT DISTINCT a.contributor_reference as h_contributor_reference,
                  a.period as h_period
  FROM   bto_question_score a
  BEGIN

    IF h_contributor_reference <> h_hold_reference
    THEN
      h_hold_reference = h_contributor_reference;
      h_counter = h_counter + 1;
      MESSAGE 'Scoring form [' +VARCHAR(:h_counter) 
            + '/' +VARCHAR(:h_count) + '] . . .';
    ENDIF;

    SELECT MIN(zone) AS h_zone
      FROM bto_question_score
     WHERE contributor_reference = :h_contributor_reference
       AND period = :h_period;

    ret_val = CALLPROC lp_error_check (p_num_row_ck = 1);

    IF ret_val != 0
    THEN
      h_debug = 'ERROR: Failed to select min zone from bto_question_score.';
      CALLPROC batch_fp_error_log
               (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:ret_val);
      RETURN ret_val;
    ENDIF;

    SELECT score AS h_score
    FROM   bto_question_score a
    WHERE  a.contributor_reference = :h_contributor_reference
      AND  a.period = :h_period
      AND  a.zone = :h_zone
      AND  a.score = (SELECT MAX(z.score) 
  		      FROM   bto_question_score z
		      WHERE  z.contributor_reference = a.contributor_reference
		        AND  z.period = a.period
                        AND  z.zone = :h_zone);

    ret_val = CALLPROC lp_score_form (p_score = :h_score);

    IF ret_val != 0 THEN RETURN 9; ENDIF;

  END;

  h_debug = 'PRO: Ending loop to score/zone forms for selective editing.';
  CALLPROC batch_fp_error_log
           (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=0);

  /*-----------------------------------------------------------------------
    Loop through forms in zone B and D to automatically confirm errors
  -----------------------------------------------------------------------*/
   
  h_forms_confirmed = 0;
  h_fails_confirmed = 0;

  SELECT COUNT (DISTINCT a.contributor_reference) AS h_count
  FROM  tt_bto_question_backup a,
        bto_reference_score b
  WHERE a.contributor_reference = b.contributor_reference
    AND a.period = b.period
    AND b.zone <> 'A';

  ret_val = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF ret_val > 1
  THEN
    h_debug = 'ERROR: Failed on count to set h_forms_confirmed.'; 
    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:ret_val);
    RETURN ret_val;
  ENDIF;

  h_debug = 'PRO: Automatically confirming any credibility fails found on the '
          + VARCHAR(:h_count) + ' forms in zones B, C and D.';
  CALLPROC batch_fp_error_log
           (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=0);

  SELECT DISTINCT a.contributor_reference AS h_contributor_reference,
                  a.period AS h_period,
                  b.zone AS h_zone,
                  b.score AS h_score
  FROM  tt_bto_question_backup a,
        bto_reference_score b
  WHERE a.contributor_reference = b.contributor_reference
    AND a.period = b.period
    AND b.zone <> 'A'
  BEGIN

    h_forms_confirmed = h_forms_confirmed + 1;

    MESSAGE 'Confirming credibility fails below threshold ['
          + VARCHAR(:h_forms_confirmed) +'/'
          + VARCHAR(:h_count) +'].';

    ret_val = CALLPROC lp_confirm_form ();

    IF ret_val != 0
    THEN
      h_debug = 'ERROR: Failed to confirm errors on form '
              + VARCHAR(:h_contributor_reference) + ' '
              + VARCHAR(:h_period) +'.'; 
      CALLPROC batch_fp_error_log
               (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:ret_val);
      RETURN ret_val;
    ENDIF;

  END;

  ret_val = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF ret_val > 1
  THEN
    h_debug = 'ERROR: Failed on threshold clearining loop.'; 
    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:ret_val);
    RETURN ret_val;
  ENDIF;

  h_debug = 'PRO: Completed confirming '
          + VARCHAR(:h_fails_confirmed) + ' credibility fails on '
          + VARCHAR(:h_forms_confirmed) + ' forms.';
  CALLPROC batch_fp_error_log
           (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=0);

  ENDIF; /***********************************************************/




/*************************** LOCAL PROCEDURES ***************************/

/*=======================================================================
    Local procedure to check sql for errors. Committed, no rollback.
=======================================================================*/

PROCEDURE lp_error_check (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC batch_check_inq_ing (
              h_num_row_ck = :p_num_row_ck,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

  RETURN :lp_return;

}

/*=======================================================================
    Local procedure to score a question ready for smart targeting.

    score = (100 x weight x ( | avalue - evalue | )) / tvalue

    Where no previous value for value question, estimate this way: 

    evalue =  (tot_val / tot_emp) x emp

    first at contributor industry level, then if not successful at question
    industry level.

    Where no previous value for volume question, estimate this way: 

    evalue = mvalue / agg_unit_val

    where agg_unit_val is taken from SAS output.

    Variable listing:

     p_score          = question score  (the required output)

     h_code           = type of default score returned. 
     h_question       = question number
     h_industry       = contributor industry (needed for cut-off)
     h_strata         = the cell the contributor is in within the industry
     h_avalue         = returned value

     lp_estimate      = Flag that estimate used for diagnostic output.
     lp_emp           = Employment for contributor.
     lp_special       = count of special markers for contributor in period.
     lp_prev_period   = period previous to period of returned data.
     lp_prev_total    = previous period total avalue for question.
     lp_weight        = the calculated sample weight
     lp_evalue        = expected value or volume. 
     lp_tvalue        = total estimated value for product in prev year
     lp_tot_val       = total mvalue for product in prev year
     lp_tot_vol       = total estimated volume for product in prev year
     lp_tot_emp       = total employment of those making product in prev year

========================================================================*/

PROCEDURE lp_score_question 
          (p_score        = FLOAT8    NOT NULL WITH DEFAULT,
           p_code         = INTEGER1  NOT NULL WITH DEFAULT) =

DECLARE   lp_return       = INTEGER4  NOT NULL WITH DEFAULT,
          lp_return2      = INTEGER4  NOT NULL WITH DEFAULT,
  	  lp_dummy        = INTEGER4  NOT NULL WITH DEFAULT,
          lp_dummy2       = CHAR(11)  NOT NULL WITH DEFAULT,
	  lp_estimate     = CHAR(1)   NOT NULL WITH DEFAULT,
  	  lp_prev_period  = INTEGER4  NOT NULL WITH DEFAULT,
	  lp_emp          = INTEGER4  NOT NULL WITH DEFAULT,
	  lp_special      = INTEGER1  NOT NULL WITH DEFAULT,
          lp_prev_total   = FLOAT8    NOT NULL WITH DEFAULT,
          lp_weight       = FLOAT8    NOT NULL WITH DEFAULT,
          lp_evalue       = FLOAT8    NOT NULL WITH DEFAULT,
          lp_tvalue       = FLOAT8    NOT NULL WITH DEFAULT

{

  p_code           = 0;
  lp_prev_period   = 0;
  lp_emp           = 0;
  lp_weight        = 0;
  lp_evalue        = 0;
  lp_tvalue        = 0;
  lp_estimate      = ' ';

  IF h_testing = 1 THEN  /* For testing and debugging */
     h_debug = 'DBG:   Started scoring [' 
             + VARCHAR(:h_counter) + '] ' 
             + VARCHAR(:h_period) + ' ' 
             + VARCHAR(:h_contributor_reference) + ' ' 
             + VARCHAR(:h_question) +'. Returned: '
             + VARCHAR(:h_avalue) +'.';
     CALLPROC batch_fp_error_log
              (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=0);
  ENDIF;

/*--------------------------------------------------------------------------
   1T: Return minimum score for 2009 returns in testing only.  
--------------------------------------------------------------------------*/

  IF g_database <> 'prodlivedb'
  THEN                                        
    IF h_period < 201000
    THEN
      p_code = 10;
      RETURN 1;     /* Assigns min score */
    ENDIF;
  ENDIF;


/*--------------------------------------------------------------------------
   1A: Return maximum score for Written ins. 
--------------------------------------------------------------------------*/

  IF h_acell = 'W'
  THEN
    p_code = 1;
    RETURN 1;     /* Assigns max score */
  ENDIF;

/*--------------------------------------------------------------------------
   1B: Return maximum score for any question whose contributor is marked 
       for enforcement.
--------------------------------------------------------------------------*/

  SELECT contributor_reference AS lp_dummy2
    FROM contributor_period
   WHERE contributor_reference = :h_contributor_reference
     AND period = :h_period
     AND output_category = 'Y';

  lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF lp_return  > 1 
  THEN 
    h_debug = 'ERROR: Failed to select enforced from contributor_period. '
	    + 'Error code ' + VARCHAR(:lp_return) + '.';
    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return);
    RETURN :lp_return;
  ENDIF;

  IF lp_return = 0
  THEN
    p_code = 2;
    RETURN 1;     /* Assigns max score */
  ENDIF;

/*--------------------------------------------------------------------------
   1C: Return maximum score for questions contributor is key for. 
--------------------------------------------------------------------------*/

  SELECT question AS lp_dummy
    FROM key_responder_data 
   WHERE contributor_reference = :h_contributor_reference
     AND for_period = :h_period
     AND question = :h_question;

  lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF lp_return  > 1 
  THEN 
    h_debug = 'ERROR: Failed to select from key_responder_data . '
	    + 'Error code ' + VARCHAR(:lp_return) + '.';
    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return);
    RETURN :lp_return;
  ENDIF;

  IF lp_return = 0
  THEN
    p_code = 3;
    RETURN 1;     /* Assigns max score */
  ENDIF;

/*--------------------------------------------------------------------------
   1C: Return maximum score for special markers. 
--------------------------------------------------------------------------*/

  SELECT COUNT(marker) AS lp_special
    FROM special_markers
   WHERE contributor_reference = :h_contributor_reference
     AND period = :h_period;

  lp_return = CALLPROC lp_error_check (p_num_row_ck = 0);

  IF lp_return  > 1 
  THEN 
    h_debug = 'ERROR: Failed to select from contributor_period. '
	    + 'Error code ' + VARCHAR(:lp_return) + '.';
    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return);
  ENDIF;

  IF lp_special > 0
  THEN
    p_code = 4;
    RETURN 1;     /* Assigns max score as marker present */
  ENDIF;

/*--------------------------------------------------------------------------
   1D: Return maximum score for non zero return in a question
       that had a zero total return in previous period. 
    
       Return zero score for zero return in a question
       that had a zero total return in previous period.
--------------------------------------------------------------------------*/

  lp_prev_period = h_period - 100;

  SELECT IFNULL(SUM(a.avalue),0) AS lp_prev_total
    FROM cqpv a
   WHERE a.period   = :lp_prev_period 
     AND a.question = :h_question
     AND a.acell   != 'N';

  lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF lp_return > 1 
  THEN 
    h_debug = 'ERROR: Failed to select sum of avalue '
	    + 'from cqpv for question ' 
	    + VARCHAR(:h_question) + ' in period '
	    + VARCHAR(:lp_prev_period) + '.';
    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return);
    RETURN :lp_return;
  ENDIF;
  
  IF h_avalue > 0 AND lp_prev_total = 0     /* New question with response */
  THEN
    p_code = 5;
    RETURN 1;
  ENDIF;

  IF h_avalue = 0 AND lp_prev_total = 0     /* New question zero response */
  THEN
    p_code = 8;
    RETURN 1;
  ENDIF;

/*--------------------------------------------------------------------------
   1E: Return a score of zero for questions marked for batch aggregation (B)
       or substituted total volumes (P).
--------------------------------------------------------------------------*/

  IF h_acell = 'B'
  OR h_acell = 'P'
  THEN
    p_code = 9;
    RETURN 1;     /* Assigns default score of zero */
  ENDIF;

/*--------------------------------------------------------------------------
   2: Check to see if it is a default weight from a standard heading. 
      If not, then calculate it.
--------------------------------------------------------------------------*/

  IF   RIGHT(VARCHAR(:h_question),5) = '09301'
    OR RIGHT(VARCHAR(:h_question),5) = '09401'
    OR RIGHT(VARCHAR(:h_question),5) = '09501'
    OR RIGHT(VARCHAR(:h_question),5) = '09601'
    OR RIGHT(VARCHAR(:h_question),5) = '09801'
    OR RIGHT(VARCHAR(:h_question),2) = '05'
  THEN
    lp_weight = 0.1;
  ENDIF;

  lp_return = 0;

  IF lp_weight = 0
  THEN
    lp_return = CALLPROC lp_set_weight (p_weight = BYREF(:lp_weight)); 
  ENDIF;

  IF lp_return != 0
  THEN
    RETURN :lp_return; /* Error message handled locally */
  ENDIF;

/*--------------------------------------------------------------------------
   3a: Retrieve or impute the edited value for last year for use as
       a predicted value for this year.
--------------------------------------------------------------------------*/

  SELECT IFNULL(avalue,0) AS lp_evalue
  FROM   cqpv
  WHERE  contributor_reference = :h_contributor_reference
    AND  question = :h_question
    AND  period = :lp_prev_period;

  lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF lp_return > 1
  THEN
    h_debug = 'ERROR: Failed to select previous avalue from cqpv.';
    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return);
    RETURN :lp_return;
  ENDIF;

/*--------------------------------------------------------------------------
   3b: If we cant get a previous figure to use for expected, we need to
       get an employment figure then estimate based on last years data. 
       Diferent methods used for Val and Vol.
--------------------------------------------------------------------------*/

  IF lp_return = 1
  THEN

    lp_estimate = 'Y'; 

    /*......................................................
         Need to get employment for calculations. 
    ......................................................*/

    SELECT register_emp AS lp_emp 
    FROM   contributor_period
    WHERE  contributor_reference = :h_contributor_reference
      AND  period = :h_period;

    lp_return2 = CALLPROC lp_error_check (p_num_row_ck = 1);

    IF lp_return2  > 1 
    THEN 
      h_debug = 'ERROR: Failed to select employment from contributor_period. '
  	      + 'Error code ' + VARCHAR(:lp_return) + '.';
      CALLPROC batch_fp_error_log
               (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return2);
      RETURN :lp_return2;
    ENDIF;

    /*......................................................
         Now get the estimates. 
    ......................................................*/

    lp_return2 = 0; 
    
    IF RIGHT(VARCHAR(:h_question),1) = '2'
    THEN
      lp_return2 = CALLPROC lp_estimate_prev_vol 
			    (p_evalue      = BYREF(:lp_evalue),
			     p_emp         = :lp_emp,
			     p_prev_period = :lp_prev_period);
     ELSE
      lp_return2 = CALLPROC lp_estimate_prev_val
			    (p_evalue      = BYREF(:lp_evalue),
			     p_emp         = :lp_emp,
			     p_prev_period = :lp_prev_period,
			     p_question    = :h_question);
    ENDIF; 

    IF lp_return2 > 1 
    THEN 
      RETURN :lp_return2;  /* Error message handled locally */
    ENDIF;

  ENDIF;

/* NB: Zero values for prev period allowed, they boost score aproipriately. */

/*--------------------------------------------------------------------------
   4: Get the gross question tota from the previous period.
--------------------------------------------------------------------------*/

  SELECT gross_total AS lp_tvalue
  FROM   gross_question_totals
  WHERE  question = :h_question
    AND  period   = :lp_prev_period;

  lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF lp_return > 1
  THEN
    h_debug = 'ERROR: Failed to select gross_question total.';
    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return);
    RETURN :lp_return;
  ENDIF;
   
  IF lp_return = 1 
  THEN
    p_code = 6;
    RETURN 1;   /* Assigns max score */
  ENDIF;

  IF lp_tvalue = 0
  THEN
    p_code = 7;
    RETURN 1;   /* Assigns max score */
  ENDIF;

/*--------------------------------------------------------------------------
   5: Calculate the score a using the weight, the absolute difference between
      the actual and estimated values, and the gross question total from
      the previous period.
--------------------------------------------------------------------------*/

  p_score = ((ABS(:h_avalue - :lp_evalue) / :lp_tvalue) * :lp_weight) * 100;

  IF h_testing = 1
  THEN
    INSERT INTO bto_scoring_debug
    VALUES    ( :h_contributor_reference,
                :h_question,
                :h_period,
                :h_avalue,
                :lp_evalue,
                :lp_estimate,
                :lp_tvalue,
                :lp_weight,
                :p_score);

    lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

    IF lp_return != 0
    THEN
      h_debug = 'ERROR: Failed to insert into bto_scoring_debug.';
      CALLPROC batch_fp_error_log
               (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return);
      RETURN 9;
    ENDIF;

  ENDIF;

  RETURN 0;

}

/*=======================================================================
    Local procedure to insert a score into the question_score table.
========================================================================*/

PROCEDURE lp_insert_score (p_score = FLOAT8   NOT NULL WITH DEFAULT,
                           p_code  = INTEGER1 NOT NULL WITH DEFAULT,
			   p_acell = CHAR(2)  NOT NULL WITH DEFAULT) =

DECLARE lp_return       = INTEGER1  NOT NULL WITH DEFAULT,
	lp_error_status = INTEGER1  NOT NULL WITH DEFAULT,
	lp_zone         = CHAR(1)   NOT NULL WITH DEFAULT

{

  IF   p_acell = 'U'
    OR p_acell = '1V'
    OR p_acell = 'W'
    OR p_acell = '1U'
    OR p_acell = 'M'
    OR p_acell = 'L' 
  THEN
    lp_error_status = 1;
  ELSE
    lp_error_status = 0;
  ENDIF;

  lp_zone = ' ';

  IF 
    p_score >= h_threshold AND lp_error_status = 1 THEN lp_zone = 'A'
  ELSEIF 
    p_score >= h_threshold AND lp_error_status = 0 THEN lp_zone = 'B'
  ELSEIF 
    p_score <  h_threshold AND lp_error_status = 1 THEN lp_zone = 'C'
  ELSE 
    lp_zone = 'D' 
  ENDIF; 

  INSERT INTO bto_question_score
  VALUES (    :h_period,
	      :h_contributor_reference,
	      :h_question,
	      :p_score,
	      :p_code,
	      :lp_zone);
  
  lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF lp_return != 0 
  THEN 
    h_debug = 'ERROR: Failed to indsert to bto_question_score. '
	    + 'Error code ' + VARCHAR(:lp_return) + '.';
    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return);
  ENDIF;

  RETURN :lp_return;

}


/*=======================================================================
    Local procedure to insert into the reference_score table.
========================================================================*/

PROCEDURE lp_score_form (p_score = FLOAT8 NOT NULL WITH DEFAULT) =

DECLARE lp_return  = INTEGER4 NOT NULL WITH DEFAULT

{

  INSERT INTO bto_reference_score
  vALUES (    :h_contributor_reference,
              :h_period,
	      :p_score,
	      :h_zone,
              ' ');
  
  lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF lp_return != 0 
  THEN 
    h_debug = 'ERROR: Failed to insert to bto_reference_score.';
    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return);
  ENDIF;

  RETURN :lp_return;

}

/*=======================================================================
    Local procedure to estimate a previous value for a question.

    evalue =  lp_sph x p_emp

     h_industry      = contributor industry (needed for cut-off)
     p_question      = question number (need to pass as uses mquest as well)
     p_emp           = Employment for contributor.
     p_evalue        = expected value or volume. 
     p_prev_period   = period of previous return, null = 0
     lp_sph          = sph or average sph from sas_sph_data table.

  NB: USES RETURN OF 1 TO INDICATE NO ESTIMATE POSSIBLE THUS USE DEFAULT SCORE

============================================================================*/

PROCEDURE lp_estimate_prev_val 
	  (p_evalue       = FLOAT8   NOT NULL WITH DEFAULT,
	   p_emp          = INTEGER4 NOT NULL WITH DEFAULT,
	   p_prev_period  = INTEGER4 NOT NULL WITH DEFAULT,
	   p_question     = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE lp_return       = INTEGER4  NOT NULL WITH DEFAULT,
        lp_return2      = INTEGER4  NOT NULL WITH DEFAULT,
        lp_sph          = FLOAT8    NOT NULL WITH DEFAULT

{

  lp_sph      = 0;

  /*-----------------------------------------------------------------------
    A: Get variable: lp_sph                         
       If contributor industry listed against question on sas_sph_data
       then use that figure.
       If contributor industry not listed against question on sas_sph_data
       then use average figure for that question.
  -----------------------------------------------------------------------*/

  SELECT sph AS lp_sph
    FROM question_contrind_sph a
   WHERE a.question  = :p_question
     AND a.period    = :p_prev_period 
     AND a.contr_ind = :h_industry;

  lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF lp_return > 1 
  THEN 
    h_debug = 'ERROR: Failed to select sph from question_contrind_sph '
	    + 'for Question '
	    + VARCHAR(:p_question) + ' : Industry '
	    + VARCHAR(:h_industry) + ' : Period '
	    + VARCHAR(:p_prev_period) + '.';
    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return);
    RETURN :lp_return;
  ENDIF;

  IF lp_sph = 0
  THEN

    SELECT IFNULL(AVG(sph),0) AS lp_sph
      FROM question_contrind_sph a
     WHERE a.period   = :p_prev_period 
       AND a.question = :p_question;

    lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

    IF lp_return > 1 
    THEN 
      h_debug = 'ERROR: Failed to select an average sph '
  	      + 'from question_contrind_sph question ' 
	      + VARCHAR(:p_question) + ' in period '
	      + VARCHAR(:p_prev_period) + '.';
      CALLPROC batch_fp_error_log
               (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return);
      RETURN :lp_return;
    ENDIF;

  ENDIF;

  IF lp_sph = 0
  THEN
    h_debug = 'TMP:     Unable to get exact or average sph so zero sph used.'
  ENDIF;

  
  /*-----------------------------------------------------------------------
    B: Set estimated avalue to be passed back (p_evalue).
  -----------------------------------------------------------------------*/

  p_evalue =  lp_sph * p_emp;

  RETURN 0;

}

/*=======================================================================
    Local procedure to estimate a previous volume for a question.

    Where no previous value for volume question, estimate this way: 

    evalue = (mvalue x 1000) / agg_unit_val

    where agg_unit_val is taken from SAS output.

    Variable listing:
     h_question       = question number
     p_emp            = Employment for contributor.
     p_evalue         = expected value or volume. 
     p_prev_period    = period of previous return, null = 0
     lp_mquest        = matching value question for a volume question 
     lp_mvalue        = matching value evalue for a volume question 
     lp_tot_val       = total estimated value for product in prev year
     lp_tot_vol       = total estimated volume for product in prev year

========================================================================*/

PROCEDURE lp_estimate_prev_vol 
	  (p_evalue       = FLOAT8   NOT NULL WITH DEFAULT,
	   p_emp          = INTEGER4 NOT NULL WITH DEFAULT,
	   p_prev_period  = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE lp_return         = INTEGER4  NOT NULL WITH DEFAULT,
        lp_return2        = INTEGER4  NOT NULL WITH DEFAULT,
        lp_mquest         = INTEGER4  NOT NULL WITH DEFAULT,
        lp_mvalue         = FLOAT8    NOT NULL WITH DEFAULT,
        lp_tot_val        = FLOAT8    NOT NULL WITH DEFAULT,
        lp_tot_vol        = FLOAT8    NOT NULL WITH DEFAULT,
        lp_agg_unit_val   = FLOAT8    NOT NULL WITH DEFAULT,

{

  lp_tot_val = 0;
  lp_tot_vol = 0;
  lp_mvalue  = 0;
  lp_mquest  = 0;

  /*-----------------------------------------------------------------------
    A: Get matching value from value question.
  -----------------------------------------------------------------------*/

  lp_mquest = :h_question - 1;

  SELECT IFNULL(a.avalue,0) AS lp_mvalue
    FROM cqpv a
   WHERE a.contributor_reference = :h_contributor_reference
     AND a.question              = :lp_mquest
     AND a.period                = :p_prev_period 
     AND a.acell                != 'N';

  lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF lp_return > 1  
  THEN 
    h_debug = 'ERROR: Failed to select matching avalue '
	    + 'from cqpv for question ' 
	    + VARCHAR(:h_question) + ' in period '
	    + VARCHAR(:p_prev_period) + '.';
    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return);
    RETURN :lp_return;
  ENDIF;

  /*..........................................................................
    If there is no matching data for a value question in the previous period, 
    we need to impute it using the same mechanism as we did earlier.
  ..........................................................................*/

  IF lp_mvalue = 0
  THEN
    lp_return2 = CALLPROC lp_estimate_prev_val
                          (p_evalue      = BYREF(:lp_mvalue),
                           p_emp         = :p_emp,
                           p_prev_period = :p_prev_period,
			   p_question    = :lp_mquest);

    lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

    IF lp_return > 1  
    THEN 
      h_debug = 'ERROR: Failed to select matching avalue '
  	      + 'for question ' 
  	      + VARCHAR(:h_question) + ' in period '
  	      + VARCHAR(:p_prev_period) + '.';
      CALLPROC batch_fp_error_log
               (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return);
      RETURN :lp_return;
    ENDIF;

    IF lp_return = 1
    OR lp_mvalue = 0
    THEN 
      h_debug = 'TMP:     No matching value so estimated volume of zero used.';
      CALLPROC batch_fp_error_log
               (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return);
      p_evalue = 0; 
      RETURN 0; 
    ENDIF;

  ENDIF;

  /*-----------------------------------------------------------------------
    B: Get agg_unit_val for the question in the prev period.
  -----------------------------------------------------------------------*/

  SELECT agg_uv AS lp_agg_unit_val
  FROM   agg_unit_values
  WHERE  question = :h_question
    AND  period   = :p_prev_period;

  lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF lp_return > 1  
  THEN 
    h_debug = 'ERROR: Failed to select agg_unit_val '
            + 'from agg_unit_values for question ' 
  	    + VARCHAR(:h_question) + ' in period '
  	    + VARCHAR(:p_prev_period) + '.';
    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return);
    RETURN :lp_return;
  ENDIF;

  IF lp_return = 1  
  OR lp_agg_unit_val <= 0
  THEN 
    h_debug = 'TMP:     No matching value so estimated volume of zero used.';
    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return);
    p_evalue = 0; 
    RETURN 0; 
  ENDIF;

  /*-----------------------------------------------------------------------
    C: Set estimated avalue to be passed back (p_evalue).
  -----------------------------------------------------------------------*/

  p_evalue = ((lp_mvalue * 1000) / lp_agg_unit_val);

  RETURN 0;

}

/*=======================================================================
    Local procedure to obtain a sample weight for a question.

    Gets contributors strata, then matches period, contrib industry and 
    strata on sample_weights to get weight.

    There is no possible way that a zero weight could be obtained given all
    the checks in pre-val etc, so if no match found then its a system error
    and the batch will be terminated.  
============================================================================*/

PROCEDURE lp_set_weight
	  (p_weight       = FLOAT8   NOT NULL WITH DEFAULT)=

DECLARE lp_return       = INTEGER4  NOT NULL WITH DEFAULT,
        lp_return2      = INTEGER4  NOT NULL WITH DEFAULT,
        lp_strata       = INTEGER1  NOT NULL WITH DEFAULT,
        lp_weight       = FLOAT8    NOT NULL WITH DEFAULT,
        lp_got_weight   = INTEGER1  NOT NULL WITH DEFAULT

{

  lp_weight = 0;
  lp_strata = 0;

  /*-----------------------------------------------------------------------
     Gets the strata for the contributor.
  -----------------------------------------------------------------------*/

  SELECT strata AS lp_strata
    FROM contributor_industry_strata
   WHERE contributor_reference = :h_contributor_reference
     AND period = :h_period
     AND contributor_industry = :h_industry;

  lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF lp_return != 0 
  THEN 
    h_debug = 'ERROR: Failed to select strata '
            + 'from contributor_industry_strata for question ' 
  	    + VARCHAR(:h_question) + ' and industry '
  	    + VARCHAR(:h_industry) + ' in period '
  	    + VARCHAR(:h_period) + '.';
    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return);
    RETURN 9;
  ENDIF;

  /*-----------------------------------------------------------------------
    Use strata, contrib ind, period to get weight from sample_weights.
  -----------------------------------------------------------------------*/

  SELECT weight AS lp_weight
    FROM sample_weights
   WHERE contr_ind = :h_industry
     AND period = :h_period
     AND strata = :lp_strata; 

  lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF lp_return != 0 
  THEN 
    h_debug = 'ERROR: Failed to select weight '
            + 'from sample_weights for industry ' 
    	    + VARCHAR(:h_industry) + ' in period '
    	    + VARCHAR(:h_period) + ' with strata'
    	    + VARCHAR(:lp_strata) + '.';
    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return);
    RETURN 9;
  ENDIF;

  IF lp_weight = 0  
  THEN
    h_debug = 'ERROR: Zero weight selected '
            + 'from sample_weights for industry ' 
    	    + VARCHAR(:h_industry) + ' in period '
    	    + VARCHAR(:h_period) + ' with strata'
    	    + VARCHAR(:lp_strata) + '. This should not be possible.';
    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return);
    RETURN 9;
  ENDIF;

  /* Weight found, so return it */

  p_weight = :lp_weight;

  RETURN 0;

}


/*===========================================================================
    Local procedure to confirm any errors on a form that is in zone B, C or D.

    1: We need to check if form is on rereferencing table. If it is,
    then we move the form to zone A and not confirm anything.
    
    2: We need to check if total sales is only returned value. If it is,
    then we move the form to zone A and not confirm anything.
    
    3: If form not rezoned due to total sales only or data continuity 
    checks, then continue by sorting out the cell codes for question 
    errors on B and C zone forms.

    4: Zone D forms have no fails, so only need the "correct date" set.
============================================================================*/

PROCEDURE lp_confirm_form ()=

DECLARE lp_return        = INTEGER4  NOT NULL WITH DEFAULT,
        lp_return2       = INTEGER4  NOT NULL WITH DEFAULT,
        lp_sum_of_01s    = INTEGER4  NOT NULL WITH DEFAULT,
        lp_total_sales   = FLOAT8    NOT NULL WITH DEFAULT,
        lp_question_zone = CHAR(1)   NOT NULL WITH DEFAULT

{

  /*-----------------------------------------------------------------------
    1: We need to check if form is on rereferencing table. If it is,
    then we move the form to zone A and not confirm anything.
  -----------------------------------------------------------------------*/

  SELECT contributor_reference
  FROM   reref_contributors
  WHERE  contributor_reference = :h_contributor_reference
    AND  period = :h_period;

  lp_return = CALLPROC lp_error_check (p_num_row_ck = 0);

  IF lp_return = 1 
  THEN 
    lp_return = CALLPROC lp_data_continuity_rezone();
    /* Messages handle locally */ 
     RETURN :lp_return;
  ENDIF;

  IF lp_return > 1 
  THEN 
    h_debug = 'ERROR: Failed to select total sales '
            + 'from bto_question for contributor ' 
    	    + VARCHAR(:h_contributor_reference) + ' in period '
    	    + VARCHAR(:h_period) + '.';
    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return);
    RETURN 9;
  ENDIF;

  /*-----------------------------------------------------------------------
    2: We need to check if total sales is only returned value. If it is,
    then we move the form to zone A and not confirm anything.
  -----------------------------------------------------------------------*/

  SELECT INT4(SUM(avalue)) AS lp_sum_of_01s
  FROM   bto_question
  WHERE  contributor_reference = :h_contributor_reference
    AND  period = :h_period
    AND  MOD(question,10) = 1;
    
  lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF lp_return != 0 
  THEN 
    h_debug = 'ERROR: Failed to select sum of sales '
            + 'from bto_question for contributor ' 
    	    + VARCHAR(:h_contributor_reference) + ' in period '
    	    + VARCHAR(:h_period) + '.';
    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return);
    RETURN 9;
  ENDIF;

  SELECT avalue AS lp_total_sales
  FROM   bto_question
  WHERE  contributor_reference = :h_contributor_reference
    AND  period = :h_period
    AND  quest_order = 10;

  lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF lp_return != 0 
  THEN 
    h_debug = 'ERROR: Failed to select total sales '
            + 'from bto_question for contributor ' 
    	    + VARCHAR(:h_contributor_reference) + ' in period '
    	    + VARCHAR(:h_period) + '.';
    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return);
    RETURN 9;
  ENDIF;

  IF lp_sum_of_01s = 0 AND lp_total_sales > 0
  THEN
    lp_return = CALLPROC lp_total_sales_rezone();
    /* Messages handle locally */ 
     RETURN :lp_return;
  ENDIF;

  /*-----------------------------------------------------------------------
     3: If form not rezoned due to total sales only or data continuity 
     checks, then continue by sorting out the cell codes for question 
     errors on B and C zone forms.
  -----------------------------------------------------------------------*/

  IF h_zone = 'B' OR h_zone = 'C'
  THEN
    
    SELECT a.question    AS h_question,
           a.acell       AS h_acell,
           a.avalue      AS h_avalue,
           a.quest_order AS h_quest_order
      FROM bto_question a,
           bto_question_score b
     WHERE a.contributor_reference = :h_contributor_reference
       AND a.contributor_reference = b.contributor_reference
       AND a.period = :h_period    
       AND a.period = b.period    
       AND a.question = b.question    
       AND b.zone = 'C'
    BEGIN

      h_fails_confirmed = h_fails_confirmed +1; 

      lp_return = CALLPROC lp_confirm_fails ();

      IF lp_return != 0 
      THEN 
        h_debug = 'ERROR: Failed to confirm credibility fail for contributor ' 
    	        + VARCHAR(:h_contributor_reference) + ' on question '
    	        + VARCHAR(:h_question) + ' in period '
    	        + VARCHAR(:h_period) + '.';
        CALLPROC batch_fp_error_log
                (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return);
        RETURN :lp_return;
      ENDIF;

    END;

  ENDIF;   /*  End of form zone in B or C */

  /*-----------------------------------------------------------------------
     4: Having dealt with changing the cell codes on forms from zones B and C,
        we now set the "correct date" to today and complete other
        fields apropriate to confirming. 
  -----------------------------------------------------------------------*/

  UPDATE contributor_period a
  FROM   bto_reference b,
         inquiry_period c
  SET    correct_date = 'today',
         corr_week_no = c.week_no,
         user_id = :g_user_id,
         f9_count = 1,
         form_taken_on = 'S'
  WHERE  a.contributor_reference = :h_contributor_reference
    AND  a.period = :h_period
    AND  a.contributor_reference = b.contributor_reference
    AND  a.period = b.period
    AND  a.period = c.period
    AND  a.inquiry = c.inquiry;

  lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF lp_return != 0 
  THEN 
    h_debug = 'ERROR: Failed to update confirming data '
            + 'on contributor_period for contributor ' 
    	    + VARCHAR(:h_contributor_reference) + ' in period '
    	    + VARCHAR(:h_period) + '.';
    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return);
    RETURN 9;
  ENDIF;

  RETURN 0;

}

/*===========================================================================
    Local procedure to confirm individual credibility fails at question
    level.   
    
    Incorrect total sales questions get set to the value of their 01's
    and acell gets set to "P" or "Z" accordingly. (Rezones due to total
    sales only being returned have already been dealt with)

    Questions with zero value have their acell set to "Z" and their 
    acell_type blanked.

    Other questions have their acell set to "V" and their 
    acell_type blanked.

============================================================================*/

PROCEDURE lp_confirm_fails ()=

DECLARE lp_return        = INTEGER4  NOT NULL WITH DEFAULT,
        lp_return2       = INTEGER4  NOT NULL WITH DEFAULT,

{

  /*-------------------------------------------------------------------------
        First up, the total sales questions. 
  -------------------------------------------------------------------------*/

  IF h_quest_order = 10
  THEN

    SELECT INT4(SUM(avalue)) AS h_sum_of_01s
    FROM   bto_question
    WHERE  contributor_reference = :h_contributor_reference
      AND  period = :h_period
      AND  MOD(question,10) = 1;

    lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

    IF lp_return != 0
    THEN
      h_debug = 'ERROR: Failed to recalculate sum_of_01s '
            + 'from bto_question for contributor ' 
    	    + VARCHAR(:h_contributor_reference) + ' in period '
    	    + VARCHAR(:h_period) + '.';
      cALLPROC batch_fp_error_log
               (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return);
      RETURN :lp_return;
    ENDIF;

    IF h_sum_of_01s = 0
    THEN    

       /* avalue must be zero or the form would have been rezoned. */ 

      UPDATE bto_question
         SET avalue = 0,
             acell  = 'Z',
             acell_type = '', 
             confirmation_code = 'T'
       WHERE contributor_reference = :h_contributor_reference
         AND question = :h_question
         AND period = :h_period;

    ELSE 

      INSERT INTO avalue_autoedit
      VALUES ( date('now'),
               :h_contributor_reference,
               :h_question,
               :h_period,
               'Total of 01s used to confirm total sales question.');

      lp_return2 = CALLPROC lp_error_check (p_num_row_ck = 1);

      IF lp_return != 0
      THEN
        h_debug = 'ERROR: Failed to insert into avalue_autoedit '
              + 'with change  for contributor ' 
      	      + VARCHAR(:h_contributor_reference) + ' and question '
      	      + VARCHAR(:h_question) + ' in period '
      	      + VARCHAR(:h_period) + '.';
        CALLPROC batch_fp_error_log
                 (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return2);
        RETURN :lp_return2;
      ENDIF;

      UPDATE bto_question
         SET avalue = :h_sum_of_01s,
             acell  = 'P',
             acell_type = '', 
             confirmation_code = 'T'
       WHERE contributor_reference = :h_contributor_reference
         AND question = :h_question
         AND period = :h_period;

    ENDIF;
      
    lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

    IF lp_return != 0 
    THEN 
      h_debug = 'ERROR: Failed to confirm total sales '
              + 'on bto_question for contributor ' 
      	      + VARCHAR(:h_contributor_reference) + ' for question '
      	      + VARCHAR(:h_question) + ' in period '
    	      + VARCHAR(:h_period) + '.';
      CALLPROC batch_fp_error_log
               (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return);
      RETURN 9;
     ELSE
      h_debug = 'TMP:    Auto-totalled total sales (9200) for contributor ' 
      	      + VARCHAR(:h_contributor_reference) + ' in period '
    	      + VARCHAR(:h_period) + ' as form score below threshold.';
      CALLPROC batch_fp_error_log
               (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=0);
      RETURN 0;
    ENDIF;

  ENDIF;

  /*-------------------------------------------------------------------------
        Next up, the value/volume questions. 
  -------------------------------------------------------------------------*/

  IF h_avalue = 0
  THEN
      
    UPDATE bto_question
       SET acell  = 'Z',
           acell_type = '', 
           confirmation_code = 'T'
     WHERE contributor_reference = :h_contributor_reference
       AND question = :h_question
       AND period = :h_period;

   ELSE

    UPDATE bto_question
       SET acell  = 'V',
           acell_type = '', 
           confirmation_code = 'T'
     WHERE contributor_reference = :h_contributor_reference
       AND question = :h_question
       AND period = :h_period;

  ENDIF;

  lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF lp_return != 0 
  THEN 
    h_debug = 'ERROR: Failed to update with confirmation data '
            + 'on bto_question for contributor ' 
    	    + VARCHAR(:h_contributor_reference) + ' for question '
      	    + VARCHAR(:h_question) + ' in period '
    	    + VARCHAR(:h_period) + '.';
    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return);
    RETURN 9;

   ELSE

    IF h_avalue = 0
    THEN
      h_debug = 'TMP:    Auto-confirmed as acell Z for contributor ' 
    	      + VARCHAR(:h_contributor_reference) + ' question '
    	      + VARCHAR(:h_question) + ' in period '
              + VARCHAR(:h_period) + ' as form score below threshold.';
     ELSE
      h_debug = 'TMP:    Auto-confirmed as acell V for contributor ' 
    	      + VARCHAR(:h_contributor_reference) + ' question '
    	      + VARCHAR(:h_question) + ' in period '
              + VARCHAR(:h_period) + ' as form score below threshold.';
    ENDIF;   

    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=0);
  ENDIF;

  RETURN 0;

}

/*===========================================================================
    Local procedure to move a form with total sales only that has fallen into 
    zone C up into zone A with the minimum possible score to get it there.
============================================================================*/

PROCEDURE lp_total_sales_rezone ()=

DECLARE lp_return        = INTEGER4  NOT NULL WITH DEFAULT

{
  UPDATE contributor_period
     SET correct_date = '',
         corr_week_no = 0
   WHERE contributor_reference = :h_contributor_reference
     AND period = :h_period;

  lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF lp_return != 0 
  THEN 
    h_debug = 'ERROR: Failed to update with correct date and week '
            + 'on contributor_period for contributor ' 
    	    + VARCHAR(:h_contributor_reference) + ' for question '
      	    + VARCHAR(:h_question) + ' in period '
    	    + VARCHAR(:h_period) + '.';
    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return);
    RETURN 9;
  ENDIF;

  IF h_zone <> 'A'
  THEN
    UPDATE bto_reference_score
       SET score = (:h_threshold + 0.001),
           zone  = 'A'
     WHERE contributor_reference = :h_contributor_reference
       AND period = :h_period;

    lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

    IF lp_return != 0 
    THEN 
      h_debug = 'ERROR: Failed to update with new score and zone '
              + 'on bto_reference_score for contributor ' 
    	      + VARCHAR(:h_contributor_reference) + ' in period '
    	      + VARCHAR(:h_period) + '.';
      CALLPROC batch_fp_error_log
               (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return);
      RETURN 9;
    ENDIF;

    h_debug = 'TMP:    Moved form to Zone A as total sales is only value '
            + 'returned by contributor ' + VARCHAR(:h_contributor_reference) 
            + ' in period ' + VARCHAR(:h_period) 
            + ' and form score below threshold.';
    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=0);
  ENDIF;

  RETURN 0;
}

/*===========================================================================
    Local procedure to move a form that needs data continuity checking that 
    has fallen into zone C up into zone A with the minimum possible score.
============================================================================*/

PROCEDURE lp_data_continuity_rezone ()=

DECLARE lp_return        = INTEGER4  NOT NULL WITH DEFAULT

{
  IF h_zone = 'A'
  THEN
     
    UPDATE bto_reference_score
    SET    marker = 'D'
    WHERE contributor_reference = :h_contributor_reference
      AND period = :h_period;

  ELSE /* can only be zone C if not in A */

    UPDATE bto_reference_score
    SET    marker = 'D',
           zone = 'A',
           score = (:h_threshold + 0.001)
    WHERE contributor_reference = :h_contributor_reference
      AND period = :h_period;
    
    lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

    IF lp_return != 0 
    THEN 
      h_debug = 'ERROR: Failed to update with new score, marker and zone '
              + 'on bto_reference_score for contributor ' 
    	      + VARCHAR(:h_contributor_reference) + ' in period '
    	      + VARCHAR(:h_period) + '.';
      CALLPROC batch_fp_error_log
               (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=:lp_return);
      RETURN 9;
    ENDIF;

    h_debug = 'TMP:    Moved form to Zone A as data continuity checking '
            + 'required for contributor ' + VARCHAR(:h_contributor_reference) 
            + ' in period ' + VARCHAR(:h_period) 
            + ' and form score below threshold.';
    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_ret_val=0);
  ENDIF;

  RETURN 0;
}

