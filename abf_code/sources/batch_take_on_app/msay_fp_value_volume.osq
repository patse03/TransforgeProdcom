/*----------------------------------------------------------------------
Deals with missing values / volumes
----------------------------------------------------------------------*/

PROCEDURE msay_fp_value_volume () =

DECLARE 
  h_frpr_name       = VARCHAR(24)  NOT NULL WITH DEFAULT,
  h_debug           = VARCHAR(160) NOT NULL WITH DEFAULT,
  h_return          = INTEGER2     NOT NULL WITH DEFAULT,

  lp_error_check          = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,

{
  h_frpr_name = 'msay_fp_value_volumes';

  /*------------------------------------------------------------------
     Value is Zero, Volume isn't (Update to L for volume)
  ------------------------------------------------------------------*/

  UPDATE bto_question a
  FROM   bto_question b
  SET    acell = 'L',
         acell_type = '0'
  WHERE  a.contributor_reference = b.contributor_reference
    AND  a.period = b.period
    AND  MOD(b.question,10) = 1
    AND  (   a.question = b.question + 1 
	  OR a.question = b.question + 3
	  OR a.question = b.question + 4  
	  OR a.question = b.question + 5 
	  OR a.question = b.question + 7)
    AND  b.avalue = 0
    AND  a.avalue > 0;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    h_debug =  'ERROR: Failed to update with 1st Val/Vol Mismatch.';
    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_return=:h_return);
    RETURN h_return;
  ENDIF;

  /*------------------------------------------------------------------
     Volume is Zero, Value isn't (Update to M for volume)
     Ammended Sept 2010 - DF - Assyst call 713927 asks for forms
     received with missing volumes to be marked 'B'  for batch
     aggregation rather than the current 'M'.
  ------------------------------------------------------------------*/

  UPDATE bto_question a
  FROM   bto_question b
  SET    acell = 'B',
         acell_type = '0'
  WHERE  a.contributor_reference = b.contributor_reference
    AND  a.period = b.period
    AND  MOD(b.question,10) = 1
    AND  (   a.question = b.question + 1 
          OR a.question = b.question + 3
          OR a.question = b.question + 4 
          OR a.question = b.question + 5
          OR a.question = b.question + 7
          OR a.question = b.question + 8)
    AND  b.avalue > 0
    AND  a.avalue = 0;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    h_debug =  'ERROR: Failed to update with 2nd Val/Vol Mismatch.';
    CALLPROC batch_fp_error_log
             (p_text=:h_debug, p_frpr=:h_frpr_name, p_return=:h_return);
    RETURN h_return;
  ENDIF;

  RETURN 0;
}

/**************************** LOCAL PROCEDURES ****************************/

/*=======================================================================
    Local procedure to check sql for errors during sections of code that
    utilise personal temp tables. Committed, no rollback.
=======================================================================*/

PROCEDURE lp_error_check (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC batch_check_inq_ing 
            ( h_num_row_ck = :p_num_row_ck,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

  RETURN IFNULL(:lp_return,9);

}

