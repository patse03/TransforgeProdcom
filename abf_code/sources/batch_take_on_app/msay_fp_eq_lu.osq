
/*----------------------------------------------------------------------
 EQ Table 3 - Local Units
----------------------------------------------------------------------*/

PROCEDURE msay_fp_eq_lu () =

DECLARE h_frpr_name   = VARCHAR(24) NOT NULL,
        h_table       = VARCHAR(24) NOT NULL,
        h_temp_table  = VARCHAR(24) NOT NULL,
        ret_val       = INTEGER4 NOT NULL,
{
    h_frpr_name = 'msay_fp_ep_lu';
    h_table = 'bto_eq_lu';

    MESSAGE 'Removing Duplicates from ' + :h_table + ' . . .';

    DELETE FROM :h_table a
    WHERE       a.contributor_reference IN (
                SELECT contributor_reference
                FROM   :h_table b
                WHERE  a.period = b.period
                AND    a.lu_reference = b.lu_reference
                AND    a.tid > b.tid);

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO bto_error_log
        VALUES(     'now',
                    'Error deleting dups from ' + :h_table,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    MESSAGE 'Modifying . . .';

    MODIFY    :h_table TO BTREE
    UNIQUE ON contributor_reference,
              period,
              lu_reference;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO bto_error_log
        VALUES(     'now',
                    'Error modifying ' + :h_table,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;

    /*------------------------------------------------------------------
    Store onto eq_lu
    ------------------------------------------------------------------*/

    MESSAGE 'Storing onto eq_lu . . .';

    DELETE FROM eq_lu a
    WHERE       contributor_reference IN (
                SELECT contributor_reference
                FROM   :h_table b
                WHERE  a.period = b.period);

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO bto_error_log
        VALUES (    'now',
                    'Error deleting from eq_lu',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    INSERT INTO eq_lu (
                contributor_reference,
                period,
                inquiry,
                contributor_industry,
                lu_reference,
                action,
                employment,
                add_name1,
                add_name2,
                add_name3,
                add_line1,
                add_line2,
                add_line3,
                add_line4,
                add_line5,
                add_postcode,
                date_start,
                date_cease)
    SELECT      contributor_reference,
                period,
                inquiry,
                contributor_industry,
                lu_reference,
                action,
                employment,
                add_name1,
                add_name2,
                add_name3,
                add_line1,
                add_line2,
                add_line3,
                add_line4,
                add_line5,
                add_postcode,
                date_start,
                date_cease
    FROM        :h_table;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO bto_error_log
        VALUES (    'now',
                    'Error inserting into eq_lu',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    RETURN 0;
}
