/*----------------------------------------------------------------------
 Rewritten eto comply with new standards and procedures, and to remove
 quarterly code.

 DF 2012 
----------------------------------------------------------------------*/

PROCEDURE acop_congruence_01_pr () =

DECLARE h_span_end           = INTEGER4     NOT NULL,
        h_param_list         = VARCHAR(100) NOT NULL,
        h_file_name_1        = VARCHAR(100) NOT NULL,
        h_file_name_2        = VARCHAR(100) NOT NULL,
        h_file_name_3        = VARCHAR(100) NOT NULL,
        h_varchar_variable   = VARCHAR(100) NOT NULL,
        h_integer_variable   = INTEGER1     NOT NULL,
        h_param1             = VARCHAR(20)  NOT NULL,
        h_return             = INTEGER4     NOT NULL,
        h_retries_allowed    = INTEGER1     NOT NULL,
        h_retries            = INTEGER1     NOT NULL,
        h_retry_or_not       = CHAR(5)      NOT NULL,
        h_text               = VARCHAR(60)  NOT NULL,
        h_dummy              = VARCHAR(60)  NOT NULL,
        h_main_table         = VARCHAR(36)  NOT NULL,
        h_table_1            = VARCHAR(36)  NOT NULL,
        h_table_2            = VARCHAR(36)  NOT NULL,
        h_table_3            = VARCHAR(36)  NOT NULL,
        h_frpr_name          = VARCHAR(24)  NOT NULL,
        h_command            = VARCHAR(300) NOT NULL,
        h_idbr_year          = CHAR(6)      NOT NULL,

        lp_error_check       = PROCEDURE RETURNING INTEGER NOT NULL,
        lp_full_error_check  = PROCEDURE RETURNING INTEGER NOT NULL,
        lp_drop_table        = PROCEDURE RETURNING INTEGER NOT NULL,

{
  SELECT DBMSINFO('username') AS g_user_id;
  SELECT DBMSINFO('database') AS g_database;

  IF g_database = 'prodlivedb'
  THEN
    h_file_name_1 = '/csd/live7/files/congruence/acop_selection';
    h_file_name_2 = '/csd/live7/files/congruence/congrefs.proda';
    h_file_name_3 = '/csd/live7/files/congruence/prodadata.cong';
  ELSE
    h_file_name_1 = '/admin/scratch/acop_selection';
    h_file_name_2 = '/admin/scratch/TEST_congrefs.proda';
    h_file_name_3 = '/admin/scratch/TEST_prodadata.cong';
  ENDIF;

  h_frpr_name  = 'acop_congruence_01_pr';

  h_table_1    = 'con_acop_match_data';
  h_table_2    = 'con_acop_sales_data';

  h_retries_allowed = 3;

  h_param_list = CALLPROC CommandLineParameters();

  h_varchar_variable = squeeze (h_param_list);

  h_integer_variable = LOCATE (h_varchar_variable, ' ');
  h_param1           = LEFT (h_varchar_variable,h_integer_variable - 1);

  g_period = INT4(:h_param1);

  /*----------------------------------------------------------------------
       Access check. (Error messages handled by procedure.)
  ----------------------------------------------------------------------*/
  
  h_return = CALLPROC check_access_procs (p_frpr_name = :h_frpr_name);

  IF h_return = 1 
  THEN
    RETURN 0;
  ELSEIF h_return > 1
  THEN
    RETURN 9;
  ENDIF;
  
  /*------------------------------------------------------------------
     Log start of process
  ------------------------------------------------------------------*/

  h_text = '*SIGNON*';
  CALLPROC write_to_process_log
         ( p_frpr_name = :h_frpr_name,
           p_code      = 0,
           p_text      = :h_text);


  h_text = 'STARTING: ACOP annual congruence process started.';
  CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 0,
             p_text      = :h_text);

  /*------------------------------------------------------------------
     Validate the period called.
  ------------------------------------------------------------------*/

  MESSAGE '[1/10] Validating parameters. . .';
  SLEEP 1;

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT span_end AS h_span_end
    FROM   inquiry
    WHERE  inquiry = 14;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return != 0
  THEN
    h_text = 'ERROR: Failed to select span end from table inquiry.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  IF h_span_end != g_period
  THEN
    h_text = 'ERROR: Period parameter does not match the span end.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 2,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  h_idbr_year = LEFT(VARCHAR(:g_period),4) +'12';

  /*------------------------------------------------------------------
     Check cycle_point : if not F, then stop
  ------------------------------------------------------------------*/

  MESSAGE '[2/10] Checking cycle point. . .';
  SLEEP 1;

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT industry_cycle_point AS h_dummy
    FROM   industry
    WHERE  industry_cycle_point != 'F'
    AND    inquiry = 14;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 0);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 1
  THEN
    h_text = 'WARNING: Industry cycle point is not "F". Aborting.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;

  ELSEIF h_return > 1
  THEN
    h_text = 'ERROR: Failed to select cycle point from industry table.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
     Create temp table to hold incoming data from file.
  ------------------------------------------------------------------*/

  MESSAGE '[3/10] Creating first working table. . .';
  SLEEP 1;

  h_return = CALLPROC lp_drop_table (p_table_name = :h_table_1);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to drop working table ' +:h_table_1 + '.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  CREATE TABLE :h_table_1
             ( contributor_reference CHAR(11) NOT NULL,
               sel_marker            CHAR(1)  NOT NULL,
               inquiry               CHAR(2)  NOT NULL,
               period                INTEGER4 NOT NULL WITH DEFAULT);

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to create ' +:h_table_1 +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN :h_return;
  ENDIF;

  COPY TABLE :h_table_1 
           ( contributor_reference = c0colon,
             sel_marker            = c0colon,
             inquiry               = c0nl)
  FROM :h_file_name_1;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to populate ' +:h_table_1 +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN :h_return;
  ENDIF;

  UPDATE :h_table_1
  SET    period = :g_period;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to set period on ' +:h_table_1 +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN :h_return;
  ENDIF;

  /*------------------------------------------------------------------
       Modifying first working table.
  ------------------------------------------------------------------*/

  MESSAGE '[4/10] Modifying first working table. . .';
  SLEEP 1;

  MODIFY :h_table_1 TO HASH ON contributor_reference;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to modify ' +:h_table_1 +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN :h_return;
  ENDIF;

  /*------------------------------------------------------------------
       Create table of matching ProdCom references plus data.
  ------------------------------------------------------------------*/

  MESSAGE '[5/10] Creating second working table. . .';
  SLEEP 1;

  h_return = CALLPROC lp_drop_table (p_table_name = :h_table_2);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to drop working table ' +:h_table_2 + '.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  CREATE TABLE :h_table_2
  AS 
  SELECT contributor_reference,
         period,
         'PRODA'    AS inq_type,
         INT2(9200) AS question,
         contributor_industry,
         INT1(0)    AS cs_type,
         INT4(0)    AS avalue,
         ''         AS startdate,
         ''         AS enddate
  FROM   contributor_period
  WHERE  period = :g_period
    AND  contributor_reference IN (SELECT contributor_reference
                                   FROM   :h_table_1);

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to create working table ' +:h_table_2 + '.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
       Modifying second working table.
  ------------------------------------------------------------------*/

  MESSAGE '[6/10] Modifying second working table. . .';
  SLEEP 1;

  MODIFY :h_table_2 TO HASH ON contributor_reference;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to modify ' +:h_table_2 +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN :h_return;
  ENDIF;


  /*------------------------------------------------------------------
      Update original table of acop references to set marker 
      to 'Y' if match found on Prodcom.
  ------------------------------------------------------------------*/

  MESSAGE '[7/10] Updating selected marker. . .';
  SLEEP 1;

  UPDATE :h_table_1 a
  FROM   :h_table_2 b
  SET    sel_marker = 'Y'
  WHERE  a.contributor_reference = b.contributor_reference;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    h_text = 'ERROR: Failed to update ' + :h_table_1 + ' with matches.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  IF h_return = 1
  THEN
    h_text = 'WARNING: No matches found to update ' + :h_table_1 + ' with.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
     Update table of matched references with cqpv returned data. 
  ------------------------------------------------------------------*/

  MESSAGE '[8/10] Updating with returned data. . .';
  SLEEP 1;

  UPDATE :h_table_2 a
  FROM   cqpv b
  SET    avalue = b.avalue,
         cs_type = 1
  WHERE  a.contributor_reference = b.contributor_reference
    AND  b.period = :g_period
    AND  b.quest_order = 10
    AND  b.acell IN ('V','Z');

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    h_text = 'ERROR: Failed to update data on ' + :h_table_2 + '.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
    Copy out first data file.
  ------------------------------------------------------------------*/

  MESSAGE '[9/10] Exporting first data file. . .';
  SLEEP 1;

  COPY TABLE :h_table_1 
           ( contributor_reference = c0colon,
             sel_marker            = c0colon,
             inquiry               = c0nl)
  INTO :h_file_name_2;      

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to export first data file.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
    Copy out second data file.
  ------------------------------------------------------------------*/

  MESSAGE '[10/10] Exporting second data file. . .';
  SLEEP 1;

  COPY TABLE :h_table_2 
         (contributor_reference = c0colon,
          period                = c0colon,
          inq_type              = c0colon,
          question              = c0colon,
          contributor_industry  = c0colon,
          cs_type               = c0colon,
          avalue                = c0colon,
          startdate             = c0colon,
          enddate               = c0nl)
  INTO :h_file_name_3;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to export second data file.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
     Log end of process
  ------------------------------------------------------------------*/

  h_text = 'COMPLETE: ACOP annual congruence process completed.';
  CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 0,
             p_text      = :h_text);

  h_text = '*SIGNOFF*';
  CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 0,
             p_text      = :h_text);

  RETURN 0;

}

/************************* LOCAL PROCEDURES ***************************/


/*=======================================================================
    Local procedure to check sql for errors during sections of code that
    utilise personal temp tables. Committed, no rollback.
=======================================================================*/

PROCEDURE lp_error_check (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing (
              h_num_row_ck = :p_num_row_ck,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

  RETURN IFNULL(:lp_return,9);

}


/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing (
                  h_num_row_ck = :p_num_row_ck,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}


/*===========================================================================
	      Local procedure for dropping a table if it exists.
============================================================================*/

PROCEDURE lp_drop_table(p_table_name = CHAR(36) NOT NULL) = 

  DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT,
          lp_table  = CHAR(36) NOT NULL

BEGIN

  SELECT table_name as lp_table 
    FROM iitables
   WHERE table_name  = :p_table_name
     AND table_owner = :g_user_id;

  lp_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF lp_return = 0
  THEN
    RETURN 0;
  ENDIF;

  IF lp_return > 1 
  THEN
    MESSAGE 'SYSTEM ERROR: Failed whilst selecting ' 
          +  VARCHAR(:p_table_name) + ' from iitables prior to droping, '
          + 'with error code ' + VARCHAR(:lp_return) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9;
  ENDIF;

  MODIFY :p_table_name to TRUNCATED;

  DROP TABLE :p_table_name;

  h_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF h_return != 0 
  THEN 
    MESSAGE 'SYSTEM ERROR: Unable to drop ' + VARCHAR(:p_table_name) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9; 
  ENDIF;

  RETURN 0;

END

