/*--------------------------------------------------------------------
Wrap around to pass parameters through to msab_fr_take_on_form.
This screen is entered two ways:

  1. From a menu, with no parameters passed through
  2. From a table of contributors, passing through the parameters

--------------------------------------------------------------------*/

INITIALIZE (p_reason = CHAR(20) NOT NULL) =

DECLARE h_frpr_name         = CHAR(24) NOT NULL,
        h_return            = INTEGER4 NOT NULL,
        h_industry          = INTEGER4 NOT NULL,
        h_retries_allowed   = INTEGER1 NOT NULL,
        h_retries           = INTEGER1 NOT NULL,
        h_retry_or_not      = CHAR(5) NOT NULL,

        lp_full_error_check = PROCEDURE RETURNING INTEGER,       

{
  h_retries_allowed = 3;
  h_frpr_name = 'msab_fr_select_edit_2';
  msa_date = 'now';

  SELECT DBMSINFO('database') AS g_database;
  SET_FORMS FRS (MAPFILE='/home/prodcom/admin/prodcom.map');

  h_return = CALLPROC msa_fp_get_user_details 
          ( h_default_printer = BYREF(:g_printer),
            h_access_level    = BYREF(:g_access_level),
            h_user_name       = BYREF(:g_user_name));

  /*----------------------------------------------------------------------
       Access check. (Error messages handled by procedure.)
  ----------------------------------------------------------------------*/
  
  h_return = CALLPROC check_access_frames (p_frpr_name = :h_frpr_name);

  IF h_return = 1 
  THEN
    RETURN 0;
  ELSEIF h_return > 1
  THEN
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
    If parameters have been supplied, call the main take_on screen
    immediately
  ------------------------------------------------------------------*/
    
  IF contributor_reference != ''
  THEN
    h_return = CALLPROC msab_fp_select_edit_3 (
                contributor_reference = :contributor_reference,
                period                = :period,
                contributor_industry  = :contributor_industry,
                p_reason              = :p_reason);

    RETURN h_return;

  ENDIF;

  contributor_reference = '';

  RESUME FIELD period;
}

/*----------------------------------------------------------------------
If no parameters have been supplied, accept parameters from screen,
validate them and then call the main take_on screen
----------------------------------------------------------------------*/

FIELD period =
{
  MESSAGE 'Checking Period . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT period
    FROM   inquiry_period
    WHERE  period = :period;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'ERROR: Failed to select from inquiry_period. Error code 9. '
          + 'Please contact IM immediately.' 
    WITH STYLE = POPUP;
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    MESSAGE 'WARNING: This is not a valid period.'
    WITH STYLE = POPUP;
    RESUME FIELD period;
  ENDIF;

  RESUME FIELD contributor_reference;

}

FIELD contributor_reference = 
{

  MESSAGE 'Checking Reference . . .';

  /*------------------------------------------------------------------
    Check Reference actually exists now before calling take_on_form.
  ------------------------------------------------------------------*/

  h_return = CALLPROC msa_fp_get_ref 
           ( contributor_reference = :contributor_reference);

  IF h_return != 0
  THEN
      MESSAGE 'ERROR: Failed to validate contributor reference number. '
            + 'Please make sure you have entered it correctly.'
      WITH STYLE = POPUP;
      RESUME FIELD contributor_reference;
  ENDIF;

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT contributor_reference
    FROM   contributor_period
    WHERE  contributor_reference = :contributor_reference
      AND  period = :period;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'ERROR: Failed to select from contributor_period. '
          + 'Error code 9. Please contact IM immediately.' 
    WITH STYLE = POPUP;
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    MESSAGE 'This contributor reference is not selected for the '
          + 'period specified. Please check you have entered it '
          + 'correctly.'
    WITH STYLE = POPUP;
    RESUME FIELD period;
  ENDIF;

  RESUME FIELD contributor_industry;
}

FIELD contributor_industry =
{
  MESSAGE 'Checking Industry . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT contributor_industry AS h_industry
    FROM   contributor_period
    WHERE  contributor_reference = :contributor_reference
      AND  period = :period;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'ERROR: Failed to select from contributor_period (2). '
          + 'Error code 9. Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    MESSAGE 'ERROR: Failed to select from contributor_period (2). '
          + 'Error code 1. Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  IF :contributor_industry != :h_industry
  THEN
    MESSAGE 'WARNING: This contributor reference is recorded as being '
          + 'in industry ' + VARCHAR(:h_industry) + '. Therefore, either '
          + 'the period, contributor reference or industry have been '
          + 'entered incorrectly above.'
    WITH STYLE = POPUP;
    RESUME FIELD contributor_industry;
  ENDIF;

  h_return = CALLPROC msab_fp_select_edit_3 
           ( contributor_reference = :contributor_reference,
             period                = :period,
             contributor_industry  = :contributor_industry);

  contributor_reference = '';
  contributor_industry = 0;
  msa_date = 'now';

  RESUME FIELD contributor_reference;

}


'Help', KEY FRSKEY1 =
{
    HELP_FORMS(SUBJECT = 'HELP',
               FILE = :g_help + '/' + :h_frpr_name + '.hlp');

}

'End', KEY FRSKEY14  =
{
    RETURN 0;
}

/************************** LOCAL PROCEDURES ******************************/


/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing 
            ( h_num_row_ck = :p_num_row_ck,
              h_commit          = 'Y',
              h_rollback        = 'N',
              h_retries         = :h_retries,
              h_retries_allowed = :h_retries_allowed,
              h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}

