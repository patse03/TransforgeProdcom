/*---------------------------------------------------------------------e
  Main online take on and validation screen. 
  This is the frame previously knows as msab_fr_load_codes.
----------------------------------------------------------------------*/

INITIALIZE (
        p_reason                     = CHAR(20) NOT NULL,
        h_dummy                      = CHAR(11) NOT NULL,
        h_idbr                       = CHAR(11) NOT NULL,
        form_taken_on                = CHAR(1) NOT NULL,
        prev_period                  = INTEGER4 NOT NULL,
        correct_date                 = DATE NOT NULL,
        alt_industry                 = INTEGER4 NOT NULL,
        currency                     = CHAR(1) NOT NULL,
        temp_del_aos                 = VARCHAR(20) NOT NULL,
        temp_cqpv                    = VARCHAR(20) NOT NULL) =

DECLARE h_frpr_name                  = CHAR(24) NOT NULL,
        h_rowstate                   = INTEGER4 NOT NULL,
        h_counter                    = INTEGER4 NOT NULL,
        h_counter1                   = INTEGER4 NOT NULL,
        h_data_vetted                = CHAR(1) NOT NULL,
        h_dummy_present              = CHAR(1) NOT NULL,
        h_imp_present                = CHAR(1) NOT NULL,
        h_mancon                     = CHAR(1) NOT NULL,
        h_euro_question              = INTEGER4 NOT NULL,
        h_sterling                   = INTEGER4 NOT NULL,
        h_look_for_question          = INTEGER4 NOT NULL,
        h_employment                 = INTEGER4 NOT NULL,
        h_value_of_01                = INTEGER4 NOT NULL,
        vol_question2                = INTEGER4 NOT NULL,
        vol_question4                = INTEGER4 NOT NULL,
        acell_question2              = CHAR(2) NOT NULL,
        acell_question4              = CHAR(2) NOT NULL,
        h_command                    = INTEGER1 NOT NULL,
        tf.quest_order               = INTEGER1 NOT NULL,
        tf.h_col                     = INTEGER4 NOT NULL,
        tf.question_industry         = INTEGER4 NOT NULL,
        tf.question_inquiry          = INTEGER1 NOT NULL,
        tf.aconstruction_type        = INTEGER1 NOT NULL,
        tf.update_type               = CHAR(1) NOT NULL,
        tf.acell_type                = CHAR(2) NOT NULL,
        h_aconstruction_type         = INTEGER1 NOT NULL,
        h_acell_type                 = CHAR(2)  NOT NULL,
        h_avalue                     = INTEGER4 NOT NULL,
        h_ovalue                     = INTEGER4 NOT NULL,
        store_01                     = INTEGER4 NOT NULL,
        store_val                    = INTEGER4 NOT NULL,
        h_return                     = INTEGER4 NOT NULL,
        h_return2                    = INTEGER4 NOT NULL,
        h_return3                    = INTEGER4 NOT NULL,
        h_insert_count               = INTEGER4 NOT NULL,
        h_record                     = INTEGER4 NOT NULL,
        h_figures_changed            = CHAR(1) NOT NULL,
        h_questions_changed          = CHAR(1) NOT NULL,
        store_vol                    = INTEGER4 NOT NULL,
        h_prompt                      = CHAR(1) NOT NULL,
        h_prompt2                     = CHAR(1) NOT NULL,
        h_new_question               = INTEGER4 NOT NULL,
        h_annual_period              = INTEGER4 NOT NULL,
        euro_t_sales                 = INTEGER4 NOT NULL,
        euro_t_of_01                 = INTEGER4 NOT NULL,
        h_retries_allowed            = INTEGER1 NOT NULL,
        h_retries                    = INTEGER1 NOT NULL,
        h_retry_or_not               = CHAR(5) NOT NULL,
        h_mismatch_question          = INTEGER4 NOT NULL,
        h_question                   = INTEGER4 NOT NULL,
        h_message                    = VARCHAR(200) NOT NULL,
        h_temp_table                 = VARCHAR(24) NOT NULL,
        h_add_name1                  = VARCHAR(35) NOT NULL,
        h_new_total_sales            = INTEGER4 NOT NULL,
        h_save_total_sales           = INTEGER4 NOT NULL,
        h_atypical                   = CHAR(1) NOT NULL,
        h_confirm                    = CHAR(1) NOT NULL,
        h_rows                       = INTEGER2 NOT NULL,
        h_temp_del_table             = VARCHAR(20) NOT NULL,
        h_industry_count             = INTEGER1 NOT NULL,
        h_form_status                = INTEGER1 NOT NULL,
        prev_period1                 = INTEGER4 NOT NULL,
        inquiry                      = INTEGER1 NOT NULL,

        lp_update_temp_cqpv          = PROCEDURE RETURNING INTEGER,
        lp_load_tf                   = PROCEDURE RETURNING INTEGER,
        lp_check_credibility         = PROCEDURE RETURNING INTEGER,
        lp_error_check               = PROCEDURE RETURNING INTEGER,
        lp_full_error_check          = PROCEDURE RETURNING INTEGER,
        lp_write_to_audit_trail      = PROCEDURE RETURNING INTEGER,

{
  msa_date = 'now';
  p_reason = UPPER(:p_reason);
  s_reason = UPPER(:p_reason);
  h_frpr_name = 'msab_fr_select_edit_4';
  h_retries_allowed = 3;
  euro_msg = 'EURO CONTRIBUTOR';
  inquiry = 14;
  h_counter = 0;
  h_counter1 = 1;
  h_questions_changed = 'n';
  tf.h_col = 0;
  h_form_status = 0;
  h_command = 0;
  h_confirm = 'n';


  /*-----------------------------------------------------------------------
         Display or hide special marker fields.   
  -----------------------------------------------------------------------*/

  IF country = ''
  THEN
    SET_FORMS FIELD '' (INVISIBLE(country) = 1);
  ELSE
    SET_FORMS FIELD '' (INVISIBLE(country) = 0);
  ENDIF;

  IF key_disp = ''
  THEN
    SET_FORMS FIELD '' (INVISIBLE(key_disp) = 1);
  ELSE
    SET_FORMS FIELD '' (INVISIBLE(key_disp) = 0);
  ENDIF;

  IF data_cont = ''
  THEN
    SET_FORMS FIELD '' (INVISIBLE(cont_link) = 1);
    SET_FORMS FIELD '' (INVISIBLE(data_cont) = 1);
  ELSE
    SET_FORMS FIELD '' (INVISIBLE(data_cont) = 0);
    SET_FORMS FIELD '' (INVISIBLE(cont_link) = 0);
  ENDIF;

  IF clink = ''
  THEN
    SET_FORMS FIELD '' (INVISIBLE(clink) = 1);
  ELSE
    SET_FORMS FIELD '' (INVISIBLE(clink) = 0);
  ENDIF;

  IF currency = 'E'
  THEN
    SET_FORMS FIELD '' (INVISIBLE(euro_msg) = 0,
                        INVISIBLE(exchange_rate) = 0);
    SET_FORMS COLUMN '' tf (INVISIBLE(evalue) = 0,
                            DISPLAYONLY(avalue) = 1);

  ELSE
    SET_FORMS FIELD '' (INVISIBLE(euro_msg) = 1,
                        INVISIBLE(exchange_rate) = 1);
    SET_FORMS COLUMN '' tf (INVISIBLE(evalue) = 1,
                            DISPLAYONLY(avalue) = 0);
  ENDIF;

  SET_FORMS FIELD '' (INVISIBLE(total_of_01)=1,
                      INVISIBLE(total_sales)=1,
                      INVISIBLE(difference)=1);

  IF p_reason = 'DUPLICATE FORM'
  THEN
    INITTABLE tf READ;
    SET_FORMS FIELD '' (COLOR(s_reason)=4,
                        BLINK(s_reason)=1);
  ELSE
    INITTABLE tf UPDATE;
    SET_FORMS FIELD '' (COLOR(s_reason)=1,
                        BLINK(s_reason)=0);
  ENDIF;

  /*-----------------------------------------------------------------------
         Get contributor data.
  -----------------------------------------------------------------------*/

  MESSAGE 'Selecting Contributor Values . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < :h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO
    h_retries = :h_retries + 1;

    INSERT INTO :temp_cqpv (
                quest_order,
                question,
                acell,
                avalue,
                evalue,
                acell_type,
                rounded,
	        se_mark,
                aconstruction_type,
                confirmation_code,
                question_industry,
                question_inquiry,
                update_type,
                error_msg,
		atypical)
    SELECT      quest_order,
                question,
                acell,
                avalue,
                evalue,
                acell_type,
                ' ',
                ' ',
                aconstruction_type,
                confirmation_code,
                question_industry,
                14,
                'u',
                '',
                ''
    FROM        cqpv
    WHERE       contributor_reference = :contributor_reference
      AND       period                = :period
      AND       contributor_industry  = :contributor_industry;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'ERROR: Failed to select contributor data from cqpv. '
          + 'Error code 9. Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    MESSAGE 'WARNING: Contributor has no questions for this period.'
    WITH STYLE = POPUP;
    RETURN 1;

  ENDIF;

  /*------------------------------------------------------------------
     Loads up R code for questions rounded as probable exact £ returns
     and probable volume unit errors.
  ------------------------------------------------------------------*/

  UPDATE :temp_cqpv a
  FROM   avalue_autoedit b
  SET    rounded = 'R'
  WHERE  RIGHT(:temp_cqpv,11) = b.contributor
    AND  a.question = b.question
    AND  b.period = :period
    AND  LEFT(b.action_taken,1) != 'T';

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    MESSAGE 'SYSTEM ERROR: Unable to load rounded markers. Error code '
          + VARCHAR(:h_return) +'. Please contact IM.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
     Loads up SE cell markers for questions that scored as A or C zone.
  ------------------------------------------------------------------*/

  UPDATE :temp_cqpv a
  FROM   bto_question_score b
  SET    se_mark = '!'
  WHERE  RIGHT(:temp_cqpv,11) = b.contributor_reference
    AND a.question = b.question
    AND b.period = :period
    AND b.zone IN ('A','C')
    AND a.confirmation_code != 'T';

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    MESSAGE 'SYSTEM ERROR: Unable to load zone B markers. Error code '
         + VARCHAR(:h_return) +'. Please contact IM.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
     Loads up SE cell markers for questions that scored as B zone.
  ------------------------------------------------------------------*/

  UPDATE :temp_cqpv a
  FROM   bto_question_score b,
         contributor_period c
  SET    se_mark = '?'
  WHERE  RIGHT(:temp_cqpv,11) = b.contributor_reference
    AND  a.question = b.question
    AND  b.period = :period
    AND  b.period > 200900
    AND  b.zone = 'B';

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    MESSAGE 'SYSTEM ERROR: Unable to load zone B markers. Error code '
          + VARCHAR(:h_return) +'. Please contact IM.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
     Removes SE cell markers when form status > 2.
  ------------------------------------------------------------------*/

  UPDATE :temp_cqpv a
  FROM   contributor_period b
  SET    se_mark = ''
  WHERE  RIGHT(:temp_cqpv,11) = b.contributor_reference
    AND  b.period = :period
    AND  b.form_status > 2;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    MESSAGE 'SYSTEM ERROR: Unable to remove SE markers. Error code '
          + VARCHAR(:h_return) +'. Please contact IM.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
     Modify
  ------------------------------------------------------------------*/

  MODIFY      :temp_cqpv TO BTREE
  UNIQUE ON   quest_order,
              question;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to modify ' + :temp_cqpv +' to BTREE structure. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
     Replace evalue volumes by the avalues
  ------------------------------------------------------------------*/

  UPDATE :temp_cqpv
  SET    evalue = avalue
  WHERE  MOD(question,10) != 1 AND MOD(question,10000) != 9200;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to update ' + :temp_cqpv +' with evalues. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
     Find annual period - for the periodic question_library
  ------------------------------------------------------------------*/

  h_annual_period = :period / 100 * 100;

  /*------------------------------------------------------------------
     Load temp_cqpv data into table field.
  ------------------------------------------------------------------*/

  h_return = CALLPROC lp_load_tf ();

  IF h_return != 0
  THEN
     RETURN h_return;
  ENDIF;

  /*------------------------------------------------------------------
    If the form is imputed or has been constructed for a non-responder,
    prompt before getting rid of the figures.
  ------------------------------------------------------------------*/

  h_imp_present = 'n';
  h_mancon = 'n';

  UNLOADTABLE tf
  BEGIN
    IF tf.acell = 'I'
    THEN
      h_imp_present = 'y';
    ELSEIF tf.aconstruction_type = 6
    THEN
      h_mancon = 'y';
    ENDIF;
  END;

  IF h_imp_present = 'y' OR h_mancon = 'y'
  THEN

    IF h_imp_present = 'y'
    THEN
      h_message = 'This form is an imputed form. ';
    ELSE
      h_message = 'This form has been manually constructed. ';
    ENDIF;

    h_prompt = '';

    WHILE h_prompt != 'N' AND h_prompt != 'Y'
    DO
      h_prompt =  PROMPT 'WARNING: ' +:h_message 
              + 'Continuing will remove all values. ' 
              + 'Do you wish to continue? [Y/N]: ' 
      WITH STYLE = POPUP;
      h_prompt = UPPER(h_prompt);
    ENDWHILE;

    IF h_prompt = 'N'
    THEN
      RETURN 0;
    ENDIF;

    UNLOADTABLE tf
    BEGIN
      tf.evalue = 0;
      tf.avalue = 0;
      tf.acell = 'N';
      tf.acell_type = '';
      tf.confirmation_code = '';
      tf.aconstruction_type = 0;
      tf.error_msg = '';
    END;

    h_return = CALLPROC lp_update_temp_cqpv ();

    IF h_return != 0
    THEN
      RETURN h_return;
    ENDIF;

  ELSE

    /*--------------------------------------------------------------
        Don't do the initial checking of values for Ns (non-responders)
    --------------------------------------------------------------*/

    UNLOADTABLE tf
    BEGIN
      IF tf.acell = 'N'
      THEN
        RESUME;
      ENDIF;
    END;

    /*--------------------------------------------------------------
      Do Credibility Checking Initially to load up the error codes
    --------------------------------------------------------------*/

    h_return = CALLPROC lp_check_credibility ();
    IF h_return != 0
    THEN
      RETURN h_return;
    ENDIF;

    h_return = CALLPROC lp_load_tf ();

    IF h_return != 0
    THEN
       RETURN h_return;
    ENDIF;

  ENDIF;

  /*------------------------------------------------------------------
    Store the values on cqpv in case the cell codes have changed
  ------------------------------------------------------------------*/

  MESSAGE 'Saving Initial Values . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    UPDATE cqpv a
    FROM   :temp_cqpv b
    SET    acell                   = b.acell,
           avalue                  = b.avalue,
           acell_type              = b.acell_type,
           aconstruction_type      = b.aconstruction_type,
           confirmation_code       = b.confirmation_code
    WHERE  a.contributor_inquiry   = :inquiry
      AND  a.contributor_reference = :contributor_reference
      AND  a.question              = b.question
      AND  a.quest_order           = b.quest_order
      AND  a.period                = :period
      AND  a.contributor_industry  = :contributor_industry
      AND  b.update_type           = 'u';

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed in initial update of cqpv. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  h_figures_changed = 'n';

  /*------------------------------------------------------------------
      Wipe out correct_date if there are errors on it
  ------------------------------------------------------------------*/

  IF h_data_vetted = 'N' AND correct_date != ''
  THEN

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      UPDATE contributor_period
      SET    correct_date = '',
             corr_week_no = 0,
             form_status = 2
      WHERE  contributor_reference = :contributor_reference
        AND  period = :period;

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return = 7
    THEN
      RETURN 7;

    ELSEIF h_return != 0
    THEN
      MESSAGE 'ERROR: Failed reset correct date on contributor_period. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN 9;
    ENDIF;

  ENDIF;

}

/**************************** KEY ACTIVATIONS ***************************/

/*----------------------------------------------------------------------
  Checks which key has been pressed to move out of a row and takes the
  necessary action test out of data
----------------------------------------------------------------------*/

FIELD tf.avalue =
{
  INQUIRE_FORMS FRS (h_command = command);

  IF (:h_command = 6   /*  down arrow  */
  OR :h_command = 4    /*  tab         */
  OR :h_command = 8)   /*  return      */
  THEN

    IF :tf.h_col = :h_counter
    THEN
      MESSAGE 'End of Form';
    ELSE
      h_counter1 = :tf.h_col + 1;
      SCROLL tf TO :h_counter1;
    ENDIF;

  ELSEIF h_command = 7  /*   up arrow    */
  THEN

    IF :tf.h_col = 1
    THEN
      MESSAGE 'This is the first question';
    ELSE
      h_counter1 = :tf.h_col - 1;
      SCROLL tf TO :h_counter1;
    ENDIF;

  ELSEIF :h_command = 10  /*   pagedown  */
  THEN

    IF :tf.h_col = :h_counter
    THEN
      MESSAGE 'End of Form';
    ELSEIF :tf.h_col > (h_counter - 10)
    THEN
      SCROLL tf TO :h_counter;
    ELSE
      h_counter1 = :tf.h_col + 10;
      SCROLL tf TO :h_counter1;
    ENDIF;

  ELSEIF :h_command = 11
  THEN

    IF :tf.h_col = 1
    THEN
      MESSAGE 'This is the first question';
    ELSEIF :tf.h_col < 11
    THEN
       SCROLL tf TO 1;
    ELSE
      h_counter1 = :tf.h_col - 10;
      SCROLL tf TO :h_counter1;
    ENDIF;

  ELSE

    h_counter1 = :tf.h_col + 1;
    SCROLL tf TO :h_counter1;

  ENDIF;
}

'Confirm', KEY FRSKEY3 =
{
  IF UPPER(:p_reason) = 'DUPLICATE FORM'
  THEN
    MESSAGE 'WARNING: This option is disabled for duplicate forms.'
    WITH STYLE = POPUP;
    RESUME menu;
  ENDIF;

  msa_date = 'now';
  IF tf.acell  = 'N'
  THEN
    MESSAGE 'WARNING: You cannot confirm a figure where the cell code is N.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  IF tf.acell  = 'W'
  THEN
    MESSAGE 'WARNING: You cannot confirm a figure where the cell code is W.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  /*------------------------------------------------------------------
      If any row has been changed since the form last went through
      form_check, it's got to be checked again.
  ------------------------------------------------------------------*/

  UNLOADTABLE tf (h_rowstate = _state)
  BEGIN
    IF h_rowstate != 2
    THEN
      MESSAGE 'WARNING: This option must be utilized immediately after ' +
              'VALIDATE, before any values have been changed. Please ' +
              'go through VALIDATE again, and then use this option ' +
              'to confirm any values found to be incredible.'
      WITH STYLE = POPUP;
      RESUME;
    ENDIF;
  END;

  h_prompt = '';
  WHILE h_prompt != 'Q' 
    AND h_prompt != 'R'
    AND h_prompt != 'X'
    AND h_prompt != 'B'
  DO
    h_prompt = PROMPT 'Please enter the type of confirmation:' + X'0D0D' 
             + 'B = Batch construction required '
             + '(No Volume Data Available)' + X'0D' 
             + 'Q = Confirm the current question' + X'0D' 
             + 'R = Remove the current question confirmation' + X'0D' 
             + 'X = Quit'  + X'0D'
    WITH STYLE = POPUP;
    h_prompt = UPPERCASE(h_prompt);
  ENDWHILE;

  IF h_prompt = 'X'
  THEN
    RESUME;
  ENDIF;

  IF h_prompt = 'B'
  THEN

    IF  MOD(tf.question,10) != 2 
    AND MOD(tf.question,10) != 4
    AND MOD(tf.question,10) != 5 
    AND MOD(tf.question,10) != 6
    AND MOD(tf.question,10) != 8
    THEN
      MESSAGE 'WARNING: Batch construction is only be carried out on volumes.'
      WITH STYLE = POPUP;
      RESUME;
    ENDIF;

    IF tf.avalue != 0
    THEN
      MESSAGE 'WARNING: Batch construction can only be carried out when ' 
            + 'the volume is zero.'
      WITH STYLE = POPUP;
      RESUME;
    ENDIF;

    h_counter1 = tf.h_col;

    IF MOD(tf.question,10) = 2 
    OR MOD(tf.question,10) = 4
    THEN

      h_look_for_question = tf.question / 10 * 10 + 1;

    ELSEIF MOD(tf.question,10) = 5 
    OR     MOD(tf.question,10) = 8
    THEN

      h_look_for_question = tf.question / 10 * 10 + 2;

    ELSE

      h_look_for_question = tf.question / 10 * 10 + 4;

    ENDIF;

    UNLOADTABLE tf
    BEGIN

      IF tf.question = h_look_for_question
      THEN

        IF MOD(tf.question,10) = 1 AND tf.avalue = 0
        THEN

          MESSAGE 'You cannot carry out Batch Construction' +
                  ' on a Volume while its Value Question ' +
                  VARCHAR(tf.question) + ' is zero'
          WITH STYLE = POPUP;
          SCROLL tf TO :h_counter1;
          RESUME;

        ELSEIF MOD(tf.question,10) = 2 
        AND    (tf.avalue != 0 OR tf.acell != 'B')
        THEN

          MESSAGE 'WARNING: You cannot carry out Batch Construction on an 05 '
                + ' or 08 volume until the 02 volume question ' 
                + VARCHAR(tf.question) + ' is zero and has a B cell code.'
          WITH STYLE = POPUP;
          SCROLL tf TO :h_counter1;
          RESUME;

        ELSEIF MOD(tf.question,10) = 4 
        AND    (tf.avalue != 0 OR tf.acell != 'B')
        THEN

          MESSAGE 'WARNING: You cannot carry out Batch Construction on an 06 '
                + 'volume until the 04 volume question ' 
                + VARCHAR(tf.question) + ' is zero and has a B cell code.'
          WITH STYLE = POPUP;
          SCROLL tf TO :h_counter1;
          RESUME;

        ENDIF;

      ENDIF;

    END;

    SCROLL tf TO :h_counter1;

    tf.acell = 'B';
    tf.error_msg = '';
    tf.aconstruction_type = 0;

    h_return = CALLPROC lp_write_to_audit_trail
           ( p_contributor_reference = :contributor_reference,
             p_period                = :period,
             p_question              = :tf.question,
             p_val_3                 = :h_prompt,
             p_code                  = 17);

    IF h_return != 0
    THEN
      /* Error reported by external procedure */
      RETURN 9;
    ENDIF; 
    
  ELSEIF h_prompt = 'R'
  THEN

    tf.confirmation_code = '';

    IF tf.acell = 'B'
    THEN
      tf.acell = 'Z';
    ENDIF;

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      DELETE FROM audit_trail a
      WHERE  a.contributor_reference = :contributor_reference
        AND  a.question = :tf.question
        AND  a.period   = :period
        AND  a.type     = 'CON'
        AND  a.time     =
             (SELECT MAX(b.time)
              FROM   audit_trail b
              WHERE  b.contributor_reference = a.contributor_reference
                AND  b.question    = a.question
                AND  b.period      = a.period
                AND  b.type        = 'CON'); 

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return > 0
    THEN
      IF  h_return = 1
      AND :period < 201400
      THEN
        /* No archiving prior to 201400 so expected failure */
        h_return = 0; 
      ELSE
        MESSAGE 'ERROR: Failed to delete from audit trail.' +X'0D'
              + 'Contributor ' + VARCHAR(:contributor_reference) + ', '
              + 'Question ' + VARCHAR(:tf.question) + ', '
              + 'Period ' + VARCHAR(:period) + '.' +X'0D'
              + 'Error code ' +VARCHAR(:h_return) +'. '
              + 'Please contact IM immediately.'
        WITH STYLE = POPUP;
        RETURN 9;
      ENDIF;
    ENDIF;

  ELSE

    /*--------------------------------------------------------------
         Add the confirmation
    --------------------------------------------------------------*/

    IF tf.acell = 'B'
    THEN
      MESSAGE 'NOTE: This Value is to be Constructed in Batch. ' 
            + 'There is nothing to Confirm.'
      WITH STYLE = POPUP;
      RESUME;
    ENDIF;

  /*--------------------------------------------------------------
        Don't allow confirmation of mismatches
        Amended December 1999:-
        Allow confirmation of zero volumes for ship building type 
        industries as they are built in stages and sometimes completed 
        over more that 1 period. Industries involved are 35110, 35120 
        and 35300
    --------------------------------------------------------------*/
 
    IF  tf.question_industry != 35110 
    AND tf.question_industry != 35120
    AND tf.question_industry != 35300 
    THEN

      IF  (MOD(tf.question,10) = 2 OR MOD(tf.question,10) = 4)
      AND tf.acell = 'M'
      THEN
        MESSAGE 'WARNING: You cannot confirm a zero Volume while it has '
              + 'a matching non-zero Value question.' 
        WITH STYLE = POPUP;
        RESUME;
      ENDIF;

    ENDIF;

    IF  (MOD(tf.question,10) = 2 OR MOD(tf.question,10) = 4)
    AND tf.acell = 'L'
    THEN
      MESSAGE 'WARNING: You cannot confirm a non-zero Volume while its ' +
              'matching Value question is zero.'
      WITH STYLE = POPUP;
      RESUME;
    ENDIF;

    /*--------------------------------------------------------------
        Put the confirmation on
      --------------------------------------------------------------*/

    h_prompt = '';

    WHILE h_prompt != 'C' 
      AND h_prompt != 'S' 
      AND h_prompt != 'G'
      AND h_prompt != 'X' 
      AND h_prompt != 'M' 
      AND h_prompt != 'V'
    DO
      h_prompt = PROMPT 'Please give the reason for confirmation:' +X'0D0D' 
               + 'C = Contacted company' + X'0D' 
               + 'G = Generally acceptable' + X'0D' 
               + 'M = Mis-reported' + X'0D' 
               + 'S = Seasonality' + X'0D' 
               + 'V = Volume of zero confirmed' + X'0D' 
               + 'X = Quit'
      WITH STYLE = POPUP;
      h_prompt = UPPERCASE(h_prompt);
    ENDWHILE;

    IF h_prompt = 'X'
    THEN
      RESUME;
    ENDIF;

    IF tf.avalue = 0
    THEN

      tf.acell = 'Z';

    ELSE

      IF tf.acell = 'U'
      THEN
        tf.acell = 'V';
      ELSEIF tf.acell = 'K'
      THEN
        tf.acell = 'P';
      ELSEIF tf.acell = '1U'
      THEN
        tf.acell = '1V';
      ELSEIF tf.acell = '1K'
      THEN
        tf.acell = '1P';
      ENDIF;

    ENDIF;

    tf.confirmation_code = h_prompt;
    tf.error_msg = '';

    h_return = CALLPROC lp_write_to_audit_trail
           ( p_contributor_reference = :contributor_reference,
             p_period                = :period,
             p_question              = :tf.question,
             p_val_3                 = :h_prompt,
             p_code                  = 17);

    IF h_return != 0
    THEN
      /* Error reported by external procedure */
      RETURN 9;
    ENDIF; 
    

  ENDIF;

  /*------------------------------------------------------------------
    To resume on required question
  ------------------------------------------------------------------*/

  h_counter1 = tf.h_col;

  h_return = CALLPROC lp_update_temp_cqpv ();

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

  h_return = CALLPROC lp_load_tf ();

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

  h_confirm = 'y';

}


'Text', KEY FRSKEY4 =
{
  msa_date = 'now';
  h_return = CALLPROC ARRAYCLEAR(g_question_array);

  /*------------------------------------------------------------------
    Copy all the tf questions into the array
  ------------------------------------------------------------------*/

  h_counter = 0;

  UNLOADTABLE tf
  BEGIN
    INSERTROW g_question_array [:h_counter] (
              quest_order = :tf.quest_order,
              question = :tf.question);
    h_counter = h_counter + 1;
  END;

  /*------------------------------------------------------------------
    Get the current question's position and pass it through to the
    text displaying program
  ------------------------------------------------------------------*/

  h_counter = 0;

  UNLOADTABLE g_question_array
  BEGIN

    h_counter = :h_counter + 1;

    IF :g_question_array.question = :tf.question
    THEN
      ENDLOOP;
    ENDIF;

  END;

  h_question = :tf.question;

  h_return = CALLFRAME msab_fr_dis_ques_text
           ( period    = :period,
             industry  = :contributor_industry,
             h_counter = :h_counter,
             question  = BYREF(:h_question));

  /*--------------------------------------------------------------------------
    Reload and resume on question whose text was looked at most recently
  --------------------------------------------------------------------------*/

  h_return = CALLPROC lp_update_temp_cqpv ();

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

  h_return = CALLPROC lp_load_tf ();

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

  UNLOADTABLE tf (h_record = _RECORD)
  BEGIN
    IF :tf.question = :h_question
    THEN
      SCROLL tf TO :h_record;
      RESUME FIELD tf;
    ENDIF;
  END;

}

'Construct', KEY FRSKEY5 =
{
  IF UPPER(:p_reason) = 'DUPLICATE FORM'
  THEN
    MESSAGE 'WARNING: This option is disabled for duplicate forms.'
    WITH STYLE = POPUP;
    RESUME menu;
  ENDIF;
 
  msa_date = 'now';
  h_prompt = '';
  WHILE h_prompt != 'M' 
    AND h_prompt != 'R'
    AND h_prompt != 'X'
  DO
    h_prompt = PROMPT 'Please enter the type of construction:' + X'0D0D' 
                    + 'M = Manually construct the current question' + X'0D' 
                    + 'R = Remove the current question construction' + X'0D' 
                    + 'X = Quit'
    WITH STYLE = POPUP;
    h_prompt = UPPER(h_prompt);
  ENDWHILE;

  IF h_prompt = 'X'
  THEN

    RESUME;

  ELSEIF h_prompt = 'M'
  THEN

    IF tf.avalue = 0
    THEN
      MESSAGE 'You cannot Manually Construct a zero value'
      WITH STYLE = POPUP;
      RESUME;
    ENDIF;

    tf.acell = 'P';
    tf.aconstruction_type = 1;
    tf.confirmation_code = '';

  ELSE

    /*--------------------------------------------------------------
         Remove the Manual Construction
    --------------------------------------------------------------*/

    IF tf.acell != 'P'
    THEN
      MESSAGE 'WARNING: You can only remove a Manual Construction marker' +
              ' for cell codes of P.'
      WITH STYLE = POPUP;
      RESUME;
    ENDIF;

    tf.avalue = 0;
    tf.acell = 'N';
    tf.acell_type = '';
    tf.confirmation_code = '';
    tf.aconstruction_type = 0;
    tf.error_msg = '';

  ENDIF;
}

'PrintForm', KEY FRSKEY6 =
{
  msa_date = 'now';

  h_prompt = '';
  WHILE h_prompt != 'N' AND h_prompt != 'Y'
  DO
    h_prompt =  PROMPT :h_message + 'Do you wish to print form [Y/N] ?' 
    WITH STYLE = POPUP;
    h_prompt = UPPER(h_prompt);
  ENDWHILE;

  IF h_prompt = 'N'
  THEN
    RESUME;
  ENDIF;

  /*-------------------------------------------------------------------------
     Print the whole form complete with question text where applicable.
     (Dont combine the create and update, the written ins dissapear!)
  -------------------------------------------------------------------------*/

  MESSAGE 'Creating List of Questions . . .';

  h_temp_table = 'temp_takeon_print';

  h_return = CALLPROC msa_fp_drop_table (h_table = :h_temp_table);

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    CREATE TABLE :h_temp_table
    AS 
    SELECT question,
           quest_order,
           avalue,
           evalue,
           acell,
           confirmation_code,
           error_msg,
           '                                   ' AS text_line1
    FROM   :temp_cqpv;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;
  ELSEIF h_return > 0
  THEN
    MESSAGE 'ERROR: Failed to create ' + :h_temp_table +'. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately. '
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    UPDATE :h_temp_table a
    FROM   question_library b
    SET    text_line1 = b.text_line1
    WHERE  a.question = b.question
      AND  b.period = :period;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;
  ELSEIF h_return > 0
  THEN
    MESSAGE 'ERROR: Failed to update ' + :h_temp_table +' with question text. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately. '
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  h_add_name1 = add_name1;

  h_return = CALLPROC msa_fp_remove_quotes 
           ( textline = BYREF(:h_add_name1));

  MESSAGE 'Preparing Report . . .';

  h_return = CALLPROC msa_cp_callsys 
           ( 'report ' +
             :g_database +
             ' ''(period = ' + VARCHAR(:period) +
             ',contributor_reference = "' + :contributor_reference + '"' +
             ',add_name1 = "' + :h_add_name1 + '"' +
             ',h_table = "' + :h_temp_table + '"' +
             ',currency = "' + :currency + '"' +
             ',user_name = "' + :g_user_name + '"' +
             ')'' -i$REPORTS/msab_rw_print_form.rw' +
             ' > report.output 2> report.output');

  IF h_return != 0
  THEN

    MESSAGE 'ERROR: Failed to produce report. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;

  ELSE

    /*----------------------------------------------------------
         Remove last line - so a blank end page is not printed
    ----------------------------------------------------------*/

    h_return = CALLPROC msa_cp_callsys 
             ( 'lines=`wc -l < msab_rw_print_form.rpt`;' +
               'lines=`expr ${lines} - 1`;' +
               'head -${lines} msab_rw_print_form.rpt | ' +
               'lp -o16l -d' + :g_printer +
               ' >> report.output 2>> report.output');

    IF h_return != 0
    THEN
      MESSAGE 'ERROR: Failed to send report to printer ' + :g_printer +'. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
    ELSE
      MESSAGE 'NOTE: Report successfully sent to printer ' + :g_printer + '.'
      WITH STYLE = POPUP;
    ENDIF;

  ENDIF;

  h_return = CALLPROC msa_fp_drop_table ( h_table = :h_temp_table);

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

}

'ExtraQuests', KEY FRSKEY7 =
{
  IF UPPER(:p_reason) = 'DUPLICATE FORM'
  THEN
    MESSAGE 'WARNING: This option is not available for duplicate forms.'
    WITH STYLE = POPUP;
    RESUME menu;
  ENDIF;

  msa_date = 'now';

  /*------------------------------------------------------------------
     Add a real question or a dummy written-in code.
  ------------------------------------------------------------------*/

  UNLOADTABLE tf(h_rowstate = _state)
  BEGIN
    IF h_rowstate != 2
    THEN
      MESSAGE 'This option must be utilized immediately after' +
              ' VALIDATE, or after loading before any changes are made.' 
      WITH STYLE = POPUP;
      RESUME;
    ENDIF;
  END;

  h_return = CALLPROC lp_update_temp_cqpv ();

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

  h_return = CALLFRAME msab_fr_ext_menu 
           ( contributor_inquiry   = inquiry,
             contributor_reference = contributor_reference,
             h_dummy               = :h_dummy,
             h_idbr                = :h_idbr,
             prev_period           = :prev_period,
             period                = period,
             contributor_industry  = contributor_industry,
             currency              = :currency,
             h_questions_changed   = BYREF(h_questions_changed),
             temp_cqpv             = :temp_cqpv,
             temp_del_aos          = temp_del_aos);

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

  h_return = CALLPROC lp_load_tf ();
  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

}

'CN Links', KEY FRSKEY8 =
{
  IF UPPER(:p_reason) = 'DUPLICATE FORM'
  THEN
    MESSAGE 'WARNING: This option is not available for duplicate forms.'
    WITH STYLE = POPUP;
    RESUME menu;
  ENDIF;

  msa_date = 'now';

  /*------------------------------------------------------------------
     Shows questions associated with a particular CN code
  ------------------------------------------------------------------*/

  CALL APPLICATION (exec = '$IMAGES/idealist_app',
                    param = VARCHAR(:period));
}

'Validate', KEY FRSKEY9 =
{
  IF UPPER(:p_reason) = 'DUPLICATE FORM'
  THEN
    MESSAGE 'WARNING: This option is not available for duplicate forms.'
    WITH STYLE = POPUP;
    RESUME menu;
  ENDIF;

  MESSAGE 'Checking Form Values . . .';

  msa_date = 'now';

  h_form_status = 0;

  h_dummy_present = 'n';

  h_temp_del_table = 'temp_deleted_uncoded';

  h_return = CALLPROC msa_fp_drop_table ( h_table = :h_temp_del_table);

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

  /*------------------------------------------------------------------
    Make sure no negative values are on the form
  ------------------------------------------------------------------*/

  UNLOADTABLE tf (h_record = _record)
  BEGIN
    IF :tf.avalue < 0
    THEN
      MESSAGE 'WARNING: Negative Values are not allowed.'
      WITH STYLE = POPUP;
      SCROLL tf TO h_record;
      RESUME;
    ENDIF;
  END;

  /*------------------------------------------------------------------
      If an imputed form is being overwritten, ALL the imputed figures
      must be overwritten.
  ------------------------------------------------------------------*/

  UNLOADTABLE tf(h_rowstate = _state, h_record = _record)
  BEGIN
    IF tf.acell = 'I'
    THEN
      IF h_rowstate = 2 AND :tf.avalue != 0
      THEN
        MESSAGE 'WARNING: When overwriting a form containing imputed '
              + 'figures, the entire form must be overwritten.' + X'0D0D' 
              + 'Question ' + VARCHAR(:tf.question) + ' contains a value '
              + 'that has not been changed.'
        WITH STYLE = POPUP;
        SCROLL tf TO h_record;
        RESUME;
      ENDIF;
    ENDIF;
  END;

  /*------------------------------------------------------------------
    For a Euro form:
       1. Copy all volumes (evalue -> avalue)
       2. Convert all values (evalue / exchange rate -> avalue)
  ------------------------------------------------------------------*/

  IF currency = 'E'
  THEN

    UNLOADTABLE tf ( h_rowstate = _state)
    BEGIN
      IF h_rowstate != 2
      THEN
        IF MOD(tf.question,10) = 1 OR MOD(tf.question,10000) = 9200
        THEN
          tf.avalue = (:tf.evalue / :exchange_rate) + 0.5;
        ELSE
          tf.avalue = :tf.evalue;
        ENDIF;
      ENDIF;

      /*------------------------------------------------------------------
          If an extra question has been added to a euro form
          (avalue = 0 and evalue != 0), but the evalue has NOT been
          changed by the user (rowstate = 2), calculate the avalue.
      ------------------------------------------------------------------*/

      IF :tf.avalue = 0 
      AND :tf.evalue != 0 
      AND MOD(:tf.question,10) = 1
      THEN
        tf.avalue = (:tf.evalue / :exchange_rate) + 0.5;
      ENDIF;
    END;

  ENDIF;

  /*------------------------------------------------------------------
    Add 1 to the f9_count and Update user_id
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    UPDATE contributor_period
    SET    f9_count = f9_count + 1,
           user_id = :g_user_id
    WHERE  contributor_reference = :contributor_reference
      AND  period = :period;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;
  ELSEIF h_return > 0
  THEN
    MESSAGE 'ERROR: Failed to update contributor_period with f9_count. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately. '
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;


  /*------------------------------------------------------------------
    If any previously confirmed values have been changed, un-confirm
    them so they are checked again.
  ------------------------------------------------------------------*/

  UNLOADTABLE tf(h_rowstate = _state, h_record = _record)
  BEGIN

    IF  h_rowstate = 3 
    AND tf.confirmation_code != '' 
    AND tf.confirmation_code != 'R'
    THEN
      tf.confirmation_code = '';
    ENDIF;

  END;

  h_return = CALLPROC lp_check_credibility ();

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

  REDISPLAY;

  /*------------------------------------------------------------------
     If h_data_vetted = "Y", the form has passed all data vet and
     credibility tests (or has had all incredible values confirmed)
     and is automatically taken on. 

     If h_data_vetted = "n", the User is given the option of taking 
     the form on as it is, or having the form redisplayed so that any 
     amendments may be made.
  ------------------------------------------------------------------*/

  IF h_data_vetted = 'Y'
  THEN

    h_dummy_present = 'N';

    UNLOADTABLE tf
    BEGIN
      IF tf.acell = 'W'
      THEN
        h_dummy_present = 'Y';
      ENDIF;
    END;

  ELSEIF h_data_vetted = 'N'
  THEN

    h_prompt = '';

    WHILE h_prompt != 'N' AND h_prompt != 'Y'
    DO
      h_prompt = PROMPT 'Form has failed to clear. ' +
                        'Do you still wish to take it on [Y/N] ? ' 
      WITH STYLE = POPUP;
      h_prompt = UPPER(h_prompt);
    ENDWHILE;

    IF h_prompt = 'N'
    THEN

      h_return = CALLPROC lp_write_to_audit_trail
               ( p_contributor_reference = :contributor_reference,
                 p_period                = :period,
                 p_val_2                 = 2,
                 p_code                  = 5);

      IF h_return != 0
      THEN
        /* Error reported by external procedure */
        RETURN 9;
      ENDIF; 

      RESUME;

    ENDIF;

  ENDIF;

  h_return = CALLPROC lp_load_tf ();

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < :h_retries_allowed and :h_retry_or_not = 'RETRY'
  DO
    h_retries = :h_retries + 1;

    DELETE FROM cqpv
    WHERE       contributor_reference = :contributor_reference
    AND         quest_order = 9
    AND         question IN (SELECT question FROM :temp_del_aos)
    AND         period = :period;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;
  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to delete uncoded questions from cqpv. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately. Form not taken on.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
     Create temp table with deleted uncoded entries data.
  ------------------------------------------------------------------*/

  h_return = CALLPROC msa_fp_drop_table ( h_table = :h_temp_del_table);

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < :h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    CREATE TABLE :h_temp_del_table 
    AS
    SELECT :contributor_reference AS contributor_reference,
           :contributor_industry  AS contributor_industry,
            question              AS question,
           :period                AS period,
            avalue                AS avalue, 
           :g_user_id             AS user_id,
           DATE('now')            AS removed_date
    FROM :temp_del_aos;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;
  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to create ' +:h_temp_del_table +'. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately. Form not taken on.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
     Insert deleted and updated uncoded entries into removed
     uncoded entries table.
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < :h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    INSERT INTO removed_uncoded_entries
    SELECT * FROM :h_temp_del_table;
        
    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;
  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to insert into remove_uncoded_entries. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately. Form not taken on.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
     Empty temp_del_aos.
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < :h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    MODIFY :temp_del_aos TO truncated;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;
  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to truncate ' +:temp_del_aos +'. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately. Form not taken on.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
    Scan temp cqpv for changes and insert audit trail entries for
    any found.
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < :h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT question AS h_question,
           avalue   AS h_avalue
    FROM   :temp_cqpv
    BEGIN

      h_retry_or_not      = 'RETRY';
      h_retries           = 0;

      WHILE :h_retries < :h_retries_allowed AND :h_retry_or_not = 'RETRY'
      DO

        h_retries = :h_retries + 1;

        SELECT avalue AS h_ovalue
        FROM   cqpv
        WHERE  contributor_reference = :contributor_reference
          AND  question              = :h_question
          AND  period                = :period
          AND  avalue               != :h_avalue;
 
        h_return2 = CALLPROC lp_full_error_check (p_num_row_ck = 0);

        IF h_return2 != 7
        THEN
          h_retry_or_not = '';
        ENDIF;

      ENDWHILE;

      IF h_return2 > 1
      THEN
        MESSAGE 'ERROR: Failed to select from temp_cqpv for audit trail. '
              + 'Error code ' +VARCHAR(:h_return2) +'. '
              + 'Please contact IM immediately. Form not taken on.'
        WITH STYLE = POPUP;
        RETURN 9;

      ELSEIF h_return2 = 1
      THEN

        h_return3 = CALLPROC lp_write_to_audit_trail
             ( p_contributor_reference = :contributor_reference,
               p_period                = :period,
               p_question              = :h_question,
               p_val_1                 = :h_ovalue,
               p_val_2                 = :h_avalue,
               p_code                  = 12);

        IF h_return3 != 0
        THEN
          /* Error reported by external procedure */
          RETURN 9;
        ENDIF; 

      ENDIF;

    END;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to selct for audit trail check loop. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately. Form not taken on.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
    Update cqpv with form's values
  ------------------------------------------------------------------*/


  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < :h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    UPDATE cqpv a
    FROM   :temp_cqpv b
    SET    acell                   = b.acell,
           avalue                  = b.avalue,
           acell_type              = b.acell_type,
           aconstruction_type      = b.aconstruction_type,
           confirmation_code       = b.confirmation_code,
           atypical                = b.atypical
    WHERE  a.contributor_inquiry   = :inquiry
      AND  a.contributor_reference = :contributor_reference
      AND  a.question              = b.question
      AND  a.quest_order           = b.quest_order
      AND  a.period                = :period
      AND  a.contributor_industry  = :contributor_industry
      AND  b.update_type           = 'u';

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;
  ELSEIF h_return > 0
  THEN
    MESSAGE 'ERROR: Failed to update CQPV with question data. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately. Form not taken on.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
    Update cqpv with Euro form's values.
    The "where :currency = 'E'" ensures that this only happens for
    Euro forms (where E=E).
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < :h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO
    h_retries = :h_retries + 1;

    UPDATE cqpv a
    FROM   :temp_cqpv b
    SET    evalue                  = b.evalue
    WHERE  a.contributor_inquiry   = :inquiry
      AND  a.contributor_reference = :contributor_reference
      AND  a.question              = b.question
      AND  a.quest_order           = b.quest_order
      AND  a.period                = :period
      AND  a.contributor_industry  = :contributor_industry
      AND  b.update_type           = 'u'
      AND  :currency               = 'E'
      AND  (MOD(a.question,10) = 1 OR MOD(a.question,10000)=9200);

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;
  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to update CQPV with Euro question data. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately. Form not taken on.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
    If there are any new questions added to the form, insert into cqpv
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < :h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT COUNT(question) AS h_insert_count
    FROM   :temp_cqpv
    WHERE  update_type = 'i';

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;
  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to count question inserts on ' +:temp_cqpv +'. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately. Form not taken on.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  IF h_insert_count > 0
  THEN
    h_return = CALLPROC msab_fp_ins_added 
             ( currency              = :currency,
               contributor_reference = :contributor_reference,
               period                = :period,
               inquiry               = :inquiry,
               contributor_industry  = :contributor_industry,
               temp_cqpv             = :temp_cqpv);

    IF h_return != 0
    THEN
      RETURN h_return;
    ENDIF;

  ENDIF;

  /*------------------------------------------------------------------
    Store the first-time taken-on values
  ------------------------------------------------------------------*/

  h_return = CALLPROC msab_fp_store_first 
           ( inquiry = :inquiry,
             period  = :period,
             h_dummy = :h_dummy,
             h_idbr  = :h_idbr);

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

  h_questions_changed = 'n';

  IF :h_dummy_present = 'y'
  THEN
    MESSAGE 'NOTE: Take on completed but uncoded entries held.'
    WITH STYLE = POPUP;
  ELSE
      /*--------------------------------------------------------------
         delete any existing reclassification proposals
      --------------------------------------------------------------*/

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < :h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      DELETE FROM reclass_contrib
      WHERE  contributor_reference = :contributor_reference
        AND  period                = :period;


      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return = 7
    THEN
      RETURN 7;
    ELSEIF h_return > 1
    THEN
      MESSAGE 'ERROR: Failed to delete from reclass_contrib. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately. Form not taken on.'
      WITH STYLE = POPUP;
      RETURN 9;
    ENDIF;

    /*--------------------------------------------------------------
         Delete any R or S marks from bto_reference_score
    --------------------------------------------------------------*/

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < :h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      UPDATE  bto_reference_score
      SET     marker = ''
      WHERE   contributor_reference = :contributor_reference
        AND   period                = :period
        AND   marker IN ('R','S');

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return = 7
    THEN
      RETURN 7;
    ELSEIF h_return > 1
    THEN
      MESSAGE 'ERROR: Failed to delete R or S marker from '
            + 'reclass_contrib. Error code ' +VARCHAR(:h_return) +'.'
            + 'Please contact IM immediately. Form not taken on.'
      WITH STYLE = POPUP;
      RETURN 9;
    ENDIF;

    /*--------------------------------------------------------------
          Reclassify
    --------------------------------------------------------------*/

    IF :h_data_vetted = 'Y'
    THEN
      MESSAGE 'Reclassification Test Starts . . .';

      h_return = CALLPROC msab_fp_reclass_topdown 
               ( contributor_reference = :contributor_reference,
                 period                = :period,
                 contributor_industry  = :contributor_industry,
                 alt_industry          = :alt_industry,
                 contributor_inquiry   = :inquiry,
                 h_data_vetted         = BYREF(:h_data_vetted));

      MESSAGE 'Reclassification Test Ends . . .';

      IF h_return != 0
      THEN
        RETURN h_return;
      ENDIF;

    ENDIF;

  ENDIF;

  /*------------------------------------------------------------------
    Values have been updated on cqpv, so update them on
    contributor_period too
  ------------------------------------------------------------------*/

  h_return = CALLPROC msab_fp_update_conper 
           ( contributor_reference = :contributor_reference,
             h_dummy_present       = :h_dummy_present,
             form_taken_on         = :form_taken_on,
             inquiry               = :inquiry,
             period                = :period);

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

  h_return = CALLPROC msa_fp_drop_table ( h_table = :h_temp_del_table);

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

  /*------------------------------------------------------------------
     Check to see if form status for noting in audit trail.
  ------------------------------------------------------------------*/

  SELECT form_status AS h_form_status
  FROM   contributor_period 
  WHERE  contributor_reference = :contributor_reference
    AND  period = :period;
    
  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to select form status from contributor_period. '
          + 'Error code ' +VARCHAR(:h_return) +'.'
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  h_return = CALLPROC lp_write_to_audit_trail
           ( p_contributor_reference = :contributor_reference,
             p_period                = :period,
             p_val_2                 = :h_form_status,
             p_code                  = 5);

  IF h_return != 0
  THEN
    /* Error reported by external procedure */
    RETURN 9;
  ENDIF; 

  /*------------------------------------------------------------------
     Check to see if form is now status 4 and on bto_unscored. 
     If so, delete entries on bto_unscored after copying them to 
     bto_unscored_cleared.
  ------------------------------------------------------------------*/

  h_form_status = 0;

  SELECT form_status AS h_form_status
  FROM   contributor_period a,
         bto_unscored b
  WHERE  a.contributor_reference = b.contributor_reference
    AND  a.period = b.period
    AND  a.contributor_reference = :contributor_reference
    AND  a.period = :period;
    
  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to select form status from contributor_period ' 
          + 'and bto_unscored. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  IF h_form_status = 4
  THEN

    h_return = CALLFRAME msab_fr_clear_form ();

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      INSERT INTO bto_unscored_cleared
      SELECT *
      FROM   bto_unscored
      WHERE  contributor_reference = :contributor_reference
        AND  period = :period;

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return = 7
    THEN
      RETURN 7;

    ELSEIF h_return > 0
    THEN
      MESSAGE 'ERROR: Failed to insert into bto_unscored_cleared.' +X'0D'
            + 'Contributor ' + VARCHAR(:contributor_reference) + ', '
            + 'Period ' + VARCHAR(:period) + '.' +X'0D'
            + 'Error code ' +VARCHAR(h_return) +'. '
            + 'Please contact IM immediately.'              
      WITH STYLE = POPUP;
      RETURN 9;
    ENDIF;

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      DELETE FROM bto_unscored
      WHERE       contributor_reference = :contributor_reference
      AND         period = :period;

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return = 7
    THEN
      RETURN 7;

    ELSEIF h_return > 0
    THEN
      MESSAGE 'ERROR: Failed to delete from bto_unscored.' +X'0D'
            + 'Contributor ' + VARCHAR(:contributor_reference) + ', '
            + 'Period ' + VARCHAR(:period) + '.' +X'0D'
            + 'Error code ' +VARCHAR(h_return) +'. '
            + 'Please contact IM immediately.'              
      WITH STYLE = POPUP;
      RETURN 9;
    ENDIF;

  ENDIF; /* End of unscorable form status 4 actions */

  /*------------------------------------------------------------------
       Ask users to make an entry on the contact pad.
  ------------------------------------------------------------------*/

  h_prompt = '';
  WHILE h_prompt != 'Y' AND h_prompt != 'N'
  DO
    h_prompt = PROMPT 'Have you amended current or back data? ' 
	            + 'If so, please make an entry on Contact Pad. ' 
                    + 'Do you wish to enter Contact Pad now [Y/N] ? ' 
	       WITH STYLE = POPUP;
    h_prompt = UPPER(:h_prompt);
  ENDWHILE;

  IF h_prompt = 'Y'
  THEN
    CALL APPLICATION (exec = '$IMAGES/communicate',
                      param = VARCHAR(:contributor_reference));
  ENDIF;

  h_return = CALLFRAME msab_fr_clear_form ();

  IF h_return = 0
  THEN
    RETURN 0;
  ENDIF;

  /*------------------------------------------------------------------
    'Return to Form' has been pressed:
    The form has been cleared and taken onto cqpv, so change any
    "inserted" update-types to "updated"
  ------------------------------------------------------------------*/

  h_figures_changed = 'n';
  h_counter = 0;

  UNLOADTABLE tf
  BEGIN
    tf.update_type = 'u';
    h_counter = h_counter + 1;
    tf.h_col = h_counter;
  END;

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < :h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO
    h_retries = :h_retries + 1;

    UPDATE :temp_cqpv
    SET    update_type = 'u';

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;
  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to update ' +:temp_cqpv +' with U marker. '
          + 'Error code ' +VARCHAR(:h_return) +'.'
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

}

'Contact', KEY FRSKEY10 =
{
  msa_date = 'now';
  CALL APPLICATION (exec = '$IMAGES/communicate',
                    param = VARCHAR(:contributor_reference));
}

'History', KEY FRSKEY11 =
{
  msa_date = 'now';

  IF :tf.quest_order = 10
  THEN

    /*--------------------------------------------------------------
         Standard headings with SPH
    --------------------------------------------------------------*/

    h_return = CALLFRAME msab_fr_std_hdg_hist_sph 
             ( question  = :tf.question,
               period    = :period,
               h_dummy   = :h_dummy,
               h_idbr    = :h_idbr);

    IF h_return != 0
    THEN
      MESSAGE 'ERROR: Failed to call standard headings SPH history table. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN h_return;
    ENDIF;

    RESUME;

  ENDIF;

  IF :tf.quest_order != 1
  THEN

    /*--------------------------------------------------------------
         Standard headings
    --------------------------------------------------------------*/

    h_return = CALLFRAME msab_fr_std_hdg_hist 
             ( question  = :tf.question,
               period    = :period,
               h_dummy   = :h_dummy,
               h_idbr    = :h_idbr);

    IF h_return != 0
    THEN
      MESSAGE 'ERROR: Failed to call standard headings history table. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN h_return;
    ENDIF;

    RESUME;

  ENDIF;

  IF MOD(tf.question,10) = 5 OR MOD(tf.question,10) = 6
  THEN

    /*--------------------------------------------------------------
         05 or 06 - no UVs required
    --------------------------------------------------------------*/

    h_return = CALLFRAME msab_fr_quest_hist0 
             ( period   = :period,
               question = :tf.question,
               h_dummy  = :h_dummy,
               h_idbr   = :h_idbr);

    IF h_return != 0
    THEN
      MESSAGE 'ERROR Failed to call question history frame. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN h_return;
    ENDIF;

  ELSEIF MOD(tf.question,10) = 4
  THEN

    /*--------------------------------------------------------------
         04 selected - check 02 exists
    --------------------------------------------------------------*/

    vol_question2 = :tf.question - 2;

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < :h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      SELECT question AS vol_question2
      FROM   :temp_cqpv
      WHERE  question = :vol_question2;

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 0);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return = 7
    THEN
      RETURN 7;

    ELSEIF h_return > 1
    THEN
      MESSAGE 'ERROR: Failed to select 02 question from ' +:temp_cqpv +'. ' 
            + 'Error code ' +VARCHAR(:h_return) +'.'
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN 9;

    ELSEIF h_return = 1
    THEN

      /*----------------------------------------------------------
             04 selected and 02 exists
      ----------------------------------------------------------*/

      h_return = CALLFRAME msab_fr_quest_hist2 
               ( question = :tf.question,
                 period   = :period,
                 h_dummy  = :h_dummy,
                 h_idbr   = :h_idbr);

      IF h_return != 0
      THEN
        MESSAGE 'ERROR Failed to call question history frame two. '
              + 'Error code ' +VARCHAR(:h_return) +'.'
              + 'Please contact IM immediately.'
        WITH STYLE = POPUP;
        RETURN h_return;
      ENDIF;

    ELSEIF h_return = 0
    THEN

      /*----------------------------------------------------------
             04 only exists
      ----------------------------------------------------------*/

      h_return = CALLFRAME msab_fr_quest_hist1 
               ( period   = :period,
                 question = :tf.question,
                 h_dummy  = :h_dummy,
                 h_idbr   = :h_idbr);

      IF h_return != 0
      THEN
        MESSAGE 'ERROR Failed to call question history frame one. '
              + 'Error code ' +VARCHAR(:h_return) +'.'
              + 'Please contact IM immediately.'
        WITH STYLE = POPUP;
        RETURN h_return;
      ENDIF;

    ENDIF;

  ELSEIF MOD(tf.question,10) = 2
  THEN

    /*--------------------------------------------------------------
         02 selected - check 04 exists
    --------------------------------------------------------------*/

    vol_question4 = :tf.question + 2;

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < :h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      SELECT question AS vol_question4
      FROM   :temp_cqpv
      WHERE  question = :vol_question4;

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 0);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return = 7
    THEN
      RETURN 7;

    ELSEIF h_return > 1
    THEN
      MESSAGE 'ERROR: Failed to select 04 question from ' +:temp_cqpv +'. ' 
            + 'Error code ' +VARCHAR(:h_return) +'.'
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP ;
      RETURN 9;

    ELSEIF h_return = 1
    THEN

      /*----------------------------------------------------------
             02 selected and 04 exists
      ----------------------------------------------------------*/

      h_return = CALLFRAME msab_fr_quest_hist2 
               ( period   = :period,
                 question = :tf.question,
                 h_dummy  = :h_dummy,
                 h_idbr   = :h_idbr);

      IF h_return != 0
      THEN
        MESSAGE 'ERROR Failed to call question history frame two. '
              + 'Error code ' +VARCHAR(:h_return) +'.'
              + 'Please contact IM immediately.'
        WITH STYLE = POPUP;
        RETURN h_return;
      ENDIF;

    ELSEIF h_return = 0
    THEN
      /*----------------------------------------------------------
             02 only exists
      ----------------------------------------------------------*/

      h_return = CALLFRAME msab_fr_quest_hist1 
               ( period   = :period,
                 question = :tf.question,
                 h_dummy  = :h_dummy,
                 h_idbr   = :h_idbr);

      IF h_return != 0
      THEN
        MESSAGE 'ERROR Failed to call question history frame one. '
              + 'Error code ' +VARCHAR(:h_return) +'.'
              + 'Please contact IM immediately.'
        WITH STYLE = POPUP;
        RETURN h_return;
      ENDIF;

    ENDIF;

  ELSE

    /*--------------------------------------------------------------
         01 selected - check 02 exists
    --------------------------------------------------------------*/

    vol_question2 = :tf.question + 1;
    vol_question4 = :tf.question + 3;

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < :h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      SELECT question AS vol_question2
      FROM   :temp_cqpv
      WHERE  question = :vol_question2;

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return = 7
    THEN
      RETURN 7;

    ELSEIF h_return > 1
    THEN
      MESSAGE 'ERROR: Failed to select 02 question from ' +:temp_cqpv +'. ' 
            + 'Error code ' +VARCHAR(:h_return) +'.'
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP ;
      RETURN 9;

    ELSEIF h_return = 1
    THEN

      /*----------------------------------------------------------
           01 Selected - no 02 held
      ----------------------------------------------------------*/

      h_return = CALLFRAME msab_fr_quest_hist0 
               ( period   = :period,
                 question = :tf.question,
                 h_dummy  = :h_dummy,
                 h_idbr   = :h_idbr);

      IF h_return != 0
      THEN
        MESSAGE 'ERROR Failed to call question history frame. '
              + 'Error code ' +VARCHAR(:h_return) +'. '
              + 'Please contact IM immediately.'
        WITH STYLE = POPUP;
        RETURN h_return;
      ENDIF;

    ELSEIF h_return = 0
    THEN

      /*--------------------------------------------------------------
         01 selected - check 04 exists
      --------------------------------------------------------------*/

      h_retry_or_not      = 'RETRY';
      h_retries           = 0;

      WHILE :h_retries < :h_retries_allowed AND :h_retry_or_not = 'RETRY'
      DO
        h_retries = :h_retries + 1;

        SELECT question AS vol_question4
        FROM   :temp_cqpv
        WHERE  question = :vol_question4;

        h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

        IF h_return != 7
        THEN
          h_retry_or_not = '';
        ENDIF;

      ENDWHILE;

      IF h_return = 7
      THEN
        RETURN 7;

      ELSEIF h_return > 1
      THEN
        MESSAGE 'ERROR: Failed to select 04 question from ' +:temp_cqpv +'. ' 
              + 'Error code ' +VARCHAR(:h_return) +'.'
              + 'Please contact IM immediately.'
        WITH STYLE = POPUP ;
        RETURN 9;

      ELSEIF h_return = 1
      THEN

        /*------------------------------------------------------
                    01 and 02 only
        ------------------------------------------------------*/

        h_return = CALLFRAME msab_fr_quest_hist1 
                 ( period   = :period,
                   question = :tf.question,
                   h_dummy  = :h_dummy,
                   h_idbr   = :h_idbr);

        IF h_return != 0
        THEN
          MESSAGE 'ERROR Failed to call question history frame one. '
                + 'Error code ' +VARCHAR(:h_return) +'.'
                + 'Please contact IM immediately.'
          WITH STYLE = POPUP;
          RETURN h_return;
        ENDIF;

      ELSEIF h_return = 0
      THEN

        /*------------------------------------------------------
             01 selected and 02 and 04 exist
        ------------------------------------------------------*/

        h_return = CALLFRAME msab_fr_quest_hist2 
                 ( period   = :period,
                   question = :tf.question,
                   h_dummy  = :h_dummy,
                   h_idbr   = :h_idbr);

        IF h_return != 0
        THEN
          MESSAGE 'ERROR Failed to call question history frame two. '
                + 'Error code ' +VARCHAR(:h_return) +'.'
                + 'Please contact IM immediately.'
          WITH STYLE = POPUP;
          RETURN h_return;
        ENDIF;

      ENDIF;

    ENDIF;

  ENDIF;

}

'UpdateContributor', KEY FRSKEY12 =
{
  IF UPPER(:p_reason) = 'DUPLICATE FORM'
  THEN
    MESSAGE 'WARNING: This option is disabled for duplicate forms.'
    WITH STYLE = POPUP;
    RESUME menu;
  ENDIF;

  msa_date = 'now';
  CALL APPLICATION ( exec  = '$IMAGES/online_cont_sel_app msafd_fr_up_cont',
                     param = VARCHAR(:contributor_reference));
}

'Gates' =
{
  IF UPPER(:p_reason) = 'DUPLICATE FORM'
  THEN
    MESSAGE 'WARNING: This option is disabled for duplicate forms.'
    WITH STYLE = POPUP;
    RESUME menu;
  ENDIF;

  msa_date = 'now';
  h_return = CALLFRAME msab_fr_view_gates ( question = :tf.question);

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;
}

'EuroTotals' =
{
  IF UPPER(:p_reason) = 'DUPLICATE FORM'
  THEN
    MESSAGE 'WARNING: This option is disabled for duplicate forms.'
    WITH STYLE = POPUP;
    RESUME menu;
  ENDIF;

  msa_date = 'now';
  IF currency != 'E'
  THEN
    MESSAGE 'WARNING: This is only used for Euro Forms.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  euro_t_sales = 0;
  euro_t_of_01 = 0;

  UNLOADTABLE tf
  BEGIN

    IF MOD(tf.question,10000) = 9200
    THEN
      euro_t_sales = tf.evalue;

    ELSEIF MOD(tf.question,10) = 1
    THEN
       euro_t_of_01 = euro_t_of_01 + tf.evalue;
    ENDIF;

  END;

  MESSAGE 'Euro Total 01s   = ' + VARCHAR(euro_t_of_01) + X'0D' +
          'Euro Total Sales = ' + VARCHAR(euro_t_sales) + X'0D' +
          'Difference       = ' + VARCHAR(euro_t_of_01 - euro_t_sales)
  WITH STYLE = POPUP;

}

'ICR' =
{
  IF UPPER(:p_reason) = 'DUPLICATE FORM'
  THEN
    MESSAGE 'WARNING: This option is disabled for duplicate forms.'
    WITH STYLE = POPUP;
    RESUME menu;
  ENDIF;

  msa_date = 'now';

  /*------------------------------------------------------------------
      Display/amend ICR error codes
  ------------------------------------------------------------------*/

  h_return = CALLFRAME msab_fr_icr_codes 
           ( contributor_reference = :contributor_reference,
             contributor_industry  = :contributor_industry,
             inquiry               = :inquiry,
             period                = :period);
}

'Help', KEY FRSKEY1 =
{
  HELP_FORMS(SUBJECT = 'HELP',
             FILE = :g_help + '/' + :h_frpr_name + '.hlp');
}

'End', KEY FRSKEY14  =
{
  msa_date = 'now';

  /*------------------------------------------------------------------
                                End
    ------------------------------------------------------------------*/

  UNLOADTABLE tf(h_rowstate=_state)
  BEGIN

    IF h_rowstate != 2 
    OR h_questions_changed = 'y' 
    OR h_figures_changed = 'y'
    THEN

      h_prompt = '';

      WHILE h_prompt != 'N' AND h_prompt != 'Y'
      DO
        h_prompt = PROMPT 'WARNING: You have updated the form since it ' 
                        + 'was last taken on. Do you wish to exit without '
                        + 'taking on the changes [Y/N] ?'
                   WITH STYLE = POPUP;
        h_prompt = UPPER(h_prompt);
      ENDWHILE;

      IF h_prompt = 'Y'
      THEN

        IF :h_confirm = 'Y'
        THEN
          MESSAGE 'REMINDER: Have you updated the contact pad?'
          WITH STYLE = POPUP;
        ENDIF;
        SET_FORMS FIELD '' (COLOR(s_reason)=1,
                            BLINK(s_reason)=0);
        RETURN 0;

      ELSE

        RESUME;

      ENDIF;

    ENDIF;

  END;

  IF :h_confirm = 'y'
  THEN
    MESSAGE 'REMINDER: Have you updated the contact pad?'
    WITH STYLE = POPUP;
  ENDIF;

  SET_FORMS FIELD '' (COLOR(s_reason)=1,
                      BLINK(s_reason)=0);
  RETURN 0;

}

'QuickView', KEY FRSKEY20 =
{
  CALL APPLICATION (exec = '$IMAGES/quickview_app',
                    param = 'Take ');
}

/************************** LOCAL PROCEDURES **************************/

/*----------------------------------------------------------------------
                L O C A L    P R O C E D U R E    1

  Updates the temporary table :temp_cqpv with the contents of the screen
  table field tf
----------------------------------------------------------------------*/

PROCEDURE lp_update_temp_cqpv =
{
  UNLOADTABLE tf(h_rowstate = _state)
  BEGIN

    IF h_rowstate != 2
    THEN

      h_figures_changed = 'y';
      h_retry_or_not      = 'RETRY';
      h_retries           = 0;

      WHILE :h_retries < :h_retries_allowed AND :h_retry_or_not = 'RETRY'
      DO

        h_retries = :h_retries + 1;

        UPDATE :temp_cqpv
        SET    acell              = :tf.acell,
               avalue             = :tf.avalue,
               evalue             = :tf.evalue,
               acell_type         = :tf.acell_type,
               aconstruction_type = :tf.aconstruction_type,
               confirmation_code  = :tf.confirmation_code,
               error_msg          = :tf.error_msg
        WHERE  question           = :tf.question;

        h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

        IF h_return != 7
        THEN
          h_retry_or_not = '';
        ENDIF;

      ENDWHILE;

      IF h_return = 7
      THEN
        RETURN 7;

      ELSEIF h_return > 0
      THEN
        MESSAGE 'ERROR: Failed to update ' +:temp_cqpv +' '
            + 'with question ' + VARCHAR(:tf.question) +'. ' 
            + 'Error code ' +VARCHAR(:h_return) +'.'
            + 'Please contact IM immediately.'
        WITH STYLE = POPUP ;
        RETURN :h_return;
      ENDIF;

    ENDIF;

  END;

}

/*----------------------------------------------------------------------
                L O C A L    P R O C E D U R E    2

   Loads screen table field tf from the temporary table :temp_cqpv
----------------------------------------------------------------------*/

PROCEDURE lp_load_tf =
{
  CLEAR FIELD tf;

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < :h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    tf = SELECT   question,
                  avalue,
                  evalue,
                  acell,
                  confirmation_code,
                  error_msg,
                  rounded,
                  se_mark AS check_mark,
                  acell_type,
                  aconstruction_type,
                  update_type,
                  quest_order AS quest_order,
                  question_industry,
                  question_inquiry
         FROM     :temp_cqpv
         ORDER BY quest_order,
                  question;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return > 0
  THEN
    MESSAGE 'ERROR: Failed to load questions from ' +:temp_cqpv +'. '
        + 'Error code ' +VARCHAR(:h_return) +'.'
        + 'Please contact IM immediately.'
    WITH STYLE = POPUP ;
    RETURN :h_return;
  ENDIF;

  /*------------------------------------------------------------------
    Store the number of rows on the table field. 

    This is used later to prevent the 'out of data' message
    appearing when the top or bottom of the table is reached; the code
    must be repeated whenever the number of rows is changed?
  ------------------------------------------------------------------*/

  h_counter = 0;
  UNLOADTABLE tf
  BEGIN
    h_counter = h_counter + 1;
    tf.h_col = h_counter;
  END;

  IF :h_counter < :h_counter1
  THEN
    SCROLL tf TO :h_counter;
  ELSE
    SCROLL tf TO :h_counter1;
  ENDIF;

}
 
/*----------------------------------------------------------------------
                L O C A L    P R O C E D U R E    3

  Checks credibility of questions
----------------------------------------------------------------------*/

PROCEDURE lp_check_credibility () =
{
  /*------------------------------------------------------------------
     If it's a Euro form:
     Add up the Euro 01s, and if they match the Euro 9200,
     then set the sterling 9200 to the sum of the sterling 01s.
     If you don't, you get
     Euro 01s = Euro 9200 but sterling 01s != sterling 9200
     because each 01 would have been converted & rounded to sterling,
     and the sum of the rounded 01s may not match the 9200 figure.
  ------------------------------------------------------------------*/

  IF currency = 'E'
  THEN
    total_sales = 0;
    total_of_01 = 0;

    UNLOADTABLE tf
    BEGIN

      IF MOD(tf.question,10000) = 9200
      THEN
        total_sales = tf.evalue;

      ELSEIF MOD(tf.question,10) = 1
      THEN
        total_of_01 = total_of_01 + tf.evalue;

      ENDIF;

    END;

    IF total_of_01 = total_sales
    THEN
      total_of_01 = 0;

      UNLOADTABLE tf
      BEGIN
        IF MOD(tf.question,10) = 1
        THEN
          total_of_01 = total_of_01 + tf.avalue;
        ENDIF;
      END;      

      UNLOADTABLE tf
      BEGIN
        IF MOD(tf.question,10000) = 9200
        THEN
           tf.avalue = total_of_01;
        ENDIF;
      END;

    ENDIF;

  ENDIF;

  /*------------------------------------------------------------------
     Sets total_sales to value of total sales code 9200, and
     total_of_01 to the total of all 01 codes.
  ------------------------------------------------------------------*/

  total_sales = 0;
  total_of_01 = 0;
  difference = 0;

  UNLOADTABLE tf
  BEGIN

    IF MOD(tf.question,10000) = 9200
    THEN
      total_sales = tf.avalue;
    ELSEIF MOD(tf.question,10) = 1
    THEN
      total_of_01 = total_of_01 + tf.avalue;
    ENDIF;

  END;

  difference = ABS(total_of_01 - total_sales);

  /*------------------------------------------------------------------
    If a value has been changed to non-zero while it has a B cell code,
    remove the B
  ------------------------------------------------------------------*/

  UNLOADTABLE tf
  BEGIN
    IF tf.avalue != 0 AND tf.acell = 'B'
    THEN
      tf.acell = 'V';
    ENDIF;
  END;

  /*------------------------------------------------------------------
    If a value has been changed to Zero while its volume has a B for
    batch construction code, reset the batch code
  ------------------------------------------------------------------*/

  UNLOADTABLE tf
  BEGIN

    IF MOD(tf.question,10) = 1
    THEN
      store_val = tf.avalue;
    ENDIF;

    IF  (MOD(tf.question,10) = 2 OR MOD(tf.question,10) = 4)
    AND (tf.acell = 'A' OR tf.acell = 'B') 
    AND store_val = 0
    THEN
      tf.acell = 'Z';
    ENDIF;

  END;

  /*------------------------------------------------------------------
    If a 02 or 04 has been changed to non-Zero while its 05, 08 or 06
    volume has a batch construction code, reset the batch code
  ------------------------------------------------------------------*/

  UNLOADTABLE tf
  BEGIN

    IF MOD(tf.question,10) = 2
    THEN
      vol_question2 = tf.avalue;
      acell_question2 = tf.acell;
    ELSEIF MOD(tf.question,10) = 4
    THEN
      vol_question4 = tf.avalue;
      acell_question4 = tf.acell;
    ENDIF;

    IF  (MOD(tf.question,10) = 5 OR MOD(tf.question,10) = 8)
    AND (tf.acell = 'A' OR tf.acell = 'B') 
    AND (vol_question2 != 0 OR acell_question2 != 'B')
    AND store_val = 0
    THEN
      tf.acell = 'Z';
    ENDIF;

    IF MOD(tf.question,10) = 6
    AND (tf.acell = 'A' OR tf.acell = 'B') 
    AND (vol_question4 != 0 OR acell_question4 != 'B')
    AND store_val = 0
    THEN
      tf.acell = 'Z';
    ENDIF;

  END;

  /*------------------------------------------------------------------
    Highlight volumes when there is a value-volume mismatch
  ------------------------------------------------------------------*/

  UNLOADTABLE tf
  BEGIN
    IF tf.acell = 'L' 
    OR tf.acell = 'M'
    THEN
      tf.acell = '';
      tf.error_msg = '';
    ENDIF;
  END;

  UNLOADTABLE tf
  BEGIN

    IF MOD(tf.question,10) = 1
    THEN
      store_01  = tf.question;
      store_val = tf.avalue;
    ENDIF;

    /*--------------------------------------------------------------
        Zero Value & non-Zero Volume
    --------------------------------------------------------------*/

    IF (    MOD(tf.question,10) = 2 
         OR MOD(tf.question,10) = 4
         OR MOD(tf.question,10) = 5
         OR MOD(tf.question,10) = 6
         OR MOD(tf.question,10) = 8)
    AND tf.avalue > 0 
    AND store_val = 0 
    AND tf.acell != 'W'
    THEN
      tf.acell = 'L';
      tf.acell_type = '0';
      tf.error_msg = 'Zero Value & Non-Zero Volume';
      tf.confirmation_code = '';
    ENDIF;

    /*--------------------------------------------------------------
        Zero Volume & non-Zero Value
    --------------------------------------------------------------*/

    IF (    MOD(tf.question,10) = 2 
         OR MOD(tf.question,10) = 4
         OR MOD(tf.question,10) = 5 
         OR MOD(tf.question,10) = 6 
	 OR MOD(tf.question,10) = 8 
         OR MOD(tf.question,10) = 9)
    AND tf.avalue = 0 
    AND store_val > 0
    AND tf.acell != 'B' 
    AND tf.acell != 'W'
    AND tf.confirmation_code != 'V'
    THEN
      tf.acell = 'M';
      tf.acell_type = '0';
      tf.error_msg = 'Zero Volume & Non-Zero Value';
      tf.confirmation_code = '';
    ENDIF;

  END;

  REDISPLAY;

  /*------------------------------------------------------------------
    get the register_emp
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < :h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT register_emp
    FROM   contributor_period
    WHERE  contributor_reference = :contributor_reference
    AND    period = :period;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return > 0
  THEN
    MESSAGE 'ERROR: Failed to select register_emp from contributor_period. '
          + 'Error code ' +VARCHAR(:h_return) +'.'
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP ;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
     Check if question has replaced more than one question this year.  
  ------------------------------------------------------------------*/

  UNLOADTABLE tf
  BEGIN

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      SELECT new_question AS h_new_question
      FROM   question_history
      WHERE  new_question = :tf.question
        AND  rep_type = 3
        AND  period = :h_annual_period;

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return = 7
    THEN
      RETURN 7;

    ELSEIF h_return > 1
    THEN
      MESSAGE 'ERROR: Failed to select new_question from question_history. '
            + 'Error code ' +VARCHAR(:h_return) +'.'
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP ;
      RETURN 9;

    ELSEIF h_return = 0
    THEN
      data_cont = 'LINK';
      qlink = 'Q';
      SET_FORMS FIELD '' (INVISIBLE(data_cont) = 0);
      SET_FORMS FIELD '' (INVISIBLE(qlink) = 0);
    ENDIF;

  END;

  /*------------------------------------------------------------------
    Do Credibility Checking
  ------------------------------------------------------------------*/

  UNLOADTABLE tf
  BEGIN

    IF MOD(tf.question,10) = 1
    THEN
      h_value_of_01 = :tf.avalue;
    ENDIF;

    IF (tf.confirmation_code = '' OR tf.confirmation_code = 'R')
    AND tf.acell != 'W' 
    AND tf.acell != 'M'
    AND tf.acell != 'L'
    AND tf.acell != 'B' 
    AND tf.acell != 'A' 
    AND tf.acell != 'C'
    THEN

      h_return = CALLPROC msab_fp_credibility 
               ( h_idbr            = :h_idbr,
                 h_dummy           = :h_dummy,
                 inquiry           = :inquiry,
                 period            = :period,
                 prev_period       = :prev_period,
                 question          = :tf.question,
                 quest_order       = :tf.quest_order,
                 avalue            = :tf.avalue,
                 register_emp      = :register_emp,
                 value_of_01       = :h_value_of_01,
                 total_of_01       = :total_of_01,
                 total_sales       = :total_sales,
		 h_new_total_sales = BYREF(:h_new_total_sales),
		 h_atypical        = BYREF(:h_atypical),
                 acell             = BYREF(:tf.acell),
                 acell_type        = BYREF(:tf.acell_type),
                 error_msg         = BYREF(:tf.error_msg));

      IF h_return != 0
      THEN
        RETURN h_return;
      ENDIF;

      IF tf.error_msg != ''
      THEN
        h_data_vetted = 'N';
      ENDIF;

      IF MOD(tf.question,10000) = 9200 AND h_atypical = 'Y'
      THEN
        tf.avalue           = :h_new_total_sales;
        h_save_total_sales  = :h_new_total_sales;

        h_retry_or_not      = 'RETRY';
        h_retries           = 0;

        WHILE :h_retries < :h_retries_allowed AND :h_retry_or_not = 'RETRY'
        DO

          h_retries = :h_retries + 1;

          UPDATE :temp_cqpv
          SET    atypical = 'Y'
	  WHERE  mod(question,10000) = 9200;

          h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

          IF h_return != 7
          THEN
            h_retry_or_not = '';
          ENDIF;

        ENDWHILE;

        IF h_return = 7
        THEN
          RETURN 7;

        ELSEIF h_return > 0
        THEN
          MESSAGE 'ERROR: Failed to update atypical marker on '+:temp_cqpv +'. '
                + 'Error code ' +VARCHAR(:h_return) +'.'
                + 'Please contact IM immediately.'
          WITH STYLE = POPUP ;
          RETURN 9;
        ENDIF;

      ENDIF;

    ENDIF;

  END;

  IF difference != 0
  THEN
    SET_FORMS FIELD '' (INVISIBLE(total_of_01)=0,
                        INVISIBLE(total_sales)=0,
                        INVISIBLE(difference)=0);
  ELSE
    SET_FORMS FIELD '' (INVISIBLE(total_of_01)=1,
                        INVISIBLE(total_sales)=1,
                        INVISIBLE(difference)=1);
  ENDIF;

  /*------------------------------------------------------------------
    In case the total sales was confirmed and did not go through
    credibility checking, put the '1' flag in the cell code if the
    01s don't add up (and remove the '1' flag if they do).
    If auto editing has taken place in credibility program then
    h_new_total_sales will not equal Zero. If so then remove the '1'
    flag from the total sales question.
   ------------------------------------------------------------------*/

  UNLOADTABLE tf
  BEGIN

    IF tf.quest_order = 10
    THEN

      IF difference != 0 
      AND LEFT(tf.acell,1) != '1' 
      AND h_save_total_sales = 0
      THEN

        tf.acell = '1' + tf.acell;

      ELSEIF difference != 0 
      AND    LEFT(tf.acell,1) = '1' 
      AND    h_save_total_sales > 0
      THEN
        tf.acell = RIGHT(tf.acell,1);

      ELSEIF difference = 0 
      AND    LEFT(tf.acell,1) = '1' 
      AND    h_save_total_sales = 0 
      THEN
        tf.acell = RIGHT(tf.acell,1);

      ENDIF;

    ENDIF;

  END;

  /*------------------------------------------------------------------
    Highlight Uncoded Entries
  ------------------------------------------------------------------*/

  UNLOADTABLE tf
  BEGIN

    IF tf.acell = 'W'
    THEN
      tf.error_msg = 'Uncoded Entry';
    ENDIF;

  END;


  h_data_vetted = 'Y';

  UNLOADTABLE tf
  BEGIN

    IF tf.error_msg != '' 
    OR tf.acell LIKE '1%'
    THEN
      h_data_vetted = 'N';
    ENDIF;

  END;

  h_return = CALLPROC lp_update_temp_cqpv ();

  IF h_return != 0
  THEN
    RETURN 9;
  ENDIF;

  h_return = CALLPROC lp_load_tf ();

  IF h_return != 0
  THEN
    RETURN 9;
  ENDIF;

  RETURN 0;

}

/*=======================================================================
    Local procedure to check sql for errors during sections of code that
    utilise personal temp tables. Committed, no rollback.
=======================================================================*/

PROCEDURE lp_error_check (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing (
              h_num_row_ck = :p_num_row_ck,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

  RETURN IFNULL(:lp_return,9);

}


/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing (
                  h_num_row_ck = :p_num_row_ck,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}


/*=======================================================================
    Local procedure to write to audit trail.
=======================================================================*/

PROCEDURE lp_write_to_audit_trail
        ( p_contributor_reference = CHAR(11)    NOT NULL WITH DEFAULT,
          p_question              = INTEGER4    NOT NULL WITH DEFAULT,
          p_period                = INTEGER4    NOT NULL WITH DEFAULT,
          p_code                  = INTEGER1    NOT NULL WITH DEFAULT,
          p_val_1                 = INTEGER4    NOT NULL WITH DEFAULT,
          p_val_2                 = INTEGER4    NOT NULL WITH DEFAULT,
          p_val_3                 = VARCHAR(20) NOT NULL WITH DEFAULT,
          p_frpr_name             = VARCHAR(36) NOT NULL WITH DEFAULT )=

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC write_to_audit_trail 
            ( p_contributor_reference = :p_contributor_reference, 
              p_question              = :p_question,
              p_period                = :p_period,
              p_code                  = :p_code, 
              p_val_1                 = :p_val_1,
              p_val_2                 = :p_val_2,
              p_val_3                 = :p_val_3,
              p_frpr_name             = :h_frpr_name);

  RETURN IFNULL(:lp_return,9);

}


