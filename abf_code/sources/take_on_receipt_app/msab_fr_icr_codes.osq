INITIALIZE (

        contributor_reference = CHAR(11) NOT NULL,
        contributor_industry  = INTEGER4 NOT NULL,
        inquiry               = INTEGER1 NOT NULL,
        period                = INTEGER4 NOT NULL) =

DECLARE h_retries_allowed = INTEGER1 NOT NULL,
        h_retries         = INTEGER1 NOT NULL,
        h_retry_or_not    = CHAR(5) NOT NULL,
        h_frpr_name       = VARCHAR(24) NOT NULL,
        h_prompt           = CHAR(1) NOT NULL,
        h_error_found     = CHAR(1) NOT NULL,
        h_icr_code        = INTEGER1 NOT NULL,
        h_return           = INTEGER1 NOT NULL,


        lp_full_error_check = PROCEDURE RETURNING INTEGER NOT NULL,

{
  h_frpr_name = 'msab_fr_icr_codes';
  h_retries_allowed = 3;

  SET_FORMS FIELD '' (MODE(tf) = 'READ');

  MESSAGE 'Loading Errors . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    tf = SELECT   text,
                  icr_code,
                  ' ' AS applies
         FROM     icr_error_text
         ORDER BY icr_code;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return > 0
  THEN
    MESSAGE 'ERROR: Failed to access icr_error_text. '
          + 'Error code ' + VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN :h_return;
  ENDIF;

  /*------------------------------------------------------------------
    Load up errors stored
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT icr_code AS h_icr_code
    FROM   icr_contributor
    WHERE  contributor_reference = :contributor_reference
      AND  period = :period
    BEGIN    

      UNLOADTABLE tf
      BEGIN

        IF tf.icr_code = h_icr_code
        THEN
          tf.applies = 'Y';
          ENDLOOP;
        ENDIF;

      END;

    END;
      
    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to access icr_contributor. '
          + 'Error code ' + VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN :h_return;

  ENDIF;

  RESUME FIELD tf;

}

'Help', KEY FRSKEY1 =
{
  HELP_FORMS(SUBJECT = 'HELP',
             FILE = :g_help + '/' + :h_frpr_name + '.hlp');

}

'SetError', KEY FRSKEY4 =
{
  MESSAGE 'Updating ICR Errors . . .';

  IF tf.applies = 'Y'
  THEN

    tf.applies = '';

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      DELETE FROM icr_contributor
      WHERE       contributor_reference = :contributor_reference
        AND       period = :period
        AND       icr_code = :tf.icr_code;

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return = 7
    THEN
      RETURN 7;

    ELSEIF h_return > 0
    THEN
      MESSAGE 'ERROR: Failed to delete from icr_contributor. '
            + 'Error code ' + VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN :h_return;
    ENDIF;

  ELSE

    tf.applies = 'Y';

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      INSERT INTO icr_contributor 
                ( contributor_reference,
                  inquiry,
                  period,
                  contributor_industry,
                  user_id,
                  time,
                  icr_code)
      VALUES    ( :contributor_reference,
                  :inquiry,
                  :period,
                  :contributor_industry,
                  :g_user_id,
                  'now',
                  :tf.icr_code);

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return = 7
    THEN
      RETURN 7;

    ELSEIF h_return > 0
    THEN
      MESSAGE 'ERROR: Failed to insert into icr_contributor. '
            + 'Error code ' + VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN :h_return;
    ENDIF;

  ENDIF;

}

'End', KEY FRSKEY12 =
{
  h_error_found = 'n';

  UNLOADTABLE tf
  BEGIN

    IF tf.icr_code != 100 AND tf.applies = 'Y'
    THEN
      h_error_found = 'y';
    ENDIF;

    IF tf.icr_code = 100 
    AND tf.applies = 'Y' 
    AND h_error_found = 'n'
    THEN
      MESSAGE 'WARNING: If you select ICR Errors as being the sole ' 
            + 'cause of validation failure, you must also ' 
            + 'mark the actual errors themselves.'
      WITH STYLE = POPUP;
      RESUME;
    ENDIF;
  END;

  h_prompt = '';
  WHILE h_prompt != 'Y' AND h_prompt != 'N'
  DO
    h_prompt = PROMPT 'WARNING: Are you sure you''ve selected the '
                    + 'correct errors? [Y/N] '
               WITH STYLE = POPUP;
    h_prompt = UPPER(:h_prompt);
  ENDWHILE;

  IF h_prompt = 'N'
  THEN
    RESUME;
  ENDIF;

  RETURN 0;

}

/************************ LOCAL PROCEDURES **************************/


/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing (
                  h_num_row_ck = :p_num_row_ck,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}

