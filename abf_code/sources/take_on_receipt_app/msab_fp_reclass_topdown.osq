/*******************************************************************************
 msab_fp_reclass_topdown:                                            
                                                                   
 Amendment History:                                                
 
 FEB 2012 - M C - Problem with display message 'Form not found on bto_reference 
                  score. If it was...', as the message displays but does not 
                  continue with processing so the reference form_status does not
                  get set so processing cannot continue, commented out RETURN 1,
                  so message just a warning.                                                                                              
******************************************************************************/

PROCEDURE msab_fp_reclass_topdown (contributor_reference = CHAR(11) NOT NULL,
                                   period                = INTEGER4 NOT NULL,
                                   contributor_industry  = INTEGER4 NOT NULL,
                                   alt_industry          = INTEGER4 NOT NULL,
                                   contributor_inquiry   = INTEGER1 NOT NULL,
                                   h_data_vetted         = CHAR(1) NOT NULL) =

DECLARE  h_retries_allowed     = INTEGER1      NOT NULL,
         h_retries             = INTEGER1      NOT NULL,
         h_retry_or_not        = CHAR(5)       NOT NULL,
         h_frpr_name           = VARCHAR(24)   NOT NULL,
         h_return              = INTEGER1      NOT NULL,
         h_return_2            = INTEGER1      NOT NULL,
         h_max_period          = INTEGER4      NOT NULL,
         h_register_emp        = INTEGER4      NOT NULL,
         h_inquiry             = INTEGER1      NOT NULL,
         q1                    = INTEGER4      NOT NULL,
         q2                    = INTEGER4      NOT NULL,
         q3                    = INTEGER4      NOT NULL,
         q4                    = INTEGER4      NOT NULL,
         h_message             = VARCHAR(1000) NOT NULL,
         h_table1              = VARCHAR(24)   NOT NULL,
         h_table2              = VARCHAR(24)   NOT NULL,
         h_table3              = VARCHAR(24)   NOT NULL,
         h_changed             = CHAR(1)       NOT NULL,
         h_sic_changed         = CHAR(1)       NOT NULL,
         h_section             = CHAR(1)       NOT NULL,
         h_yesno               = CHAR(1)       NOT NULL,
         h_out_of_scope        = CHAR(1)       NOT NULL,
         h_count               = INTEGER1      NOT NULL,
         h_division            = INTEGER1      NOT NULL,
         h_grp                 = INTEGER4      NOT NULL,
         h_class               = INTEGER4      NOT NULL,
         h_subclass            = INTEGER4      NOT NULL,
         h_merchanted          = INTEGER4      NOT NULL,
         h_avalue              = INTEGER4      NOT NULL,
         h_services            = INTEGER4      NOT NULL,
         h_work_done           = INTEGER4      NOT NULL,
         h_waste               = INTEGER4      NOT NULL,
         h_total_sales         = INTEGER4      NOT NULL,
         h_question            = INTEGER4      NOT NULL,
         h_prin_class          = INTEGER4      NOT NULL,
         h_prin_group          = INTEGER4      NOT NULL,
         h_prin_division       = INTEGER1      NOT NULL,
         h_prin_section        = CHAR(1)       NOT NULL,
         h_prin_subclass_value = INTEGER4      NOT NULL,
         h_prin_class_value    = INTEGER4      NOT NULL,
         h_prin_group_value    = INTEGER4      NOT NULL,
         h_prin_division_value = INTEGER4      NOT NULL,
         h_prin_section_value  = INTEGER4      NOT NULL,
         h_top_perc            = FLOAT8        NOT NULL,
         h_prinprod_perc       = FLOAT8        NOT NULL,
         h_merchanted_perc     = FLOAT8        NOT NULL,
         h_work_done_perc      = FLOAT8        NOT NULL,
         h_waste_perc          = FLOAT8        NOT NULL,
         h_services_perc       = FLOAT8        NOT NULL,
         h_stand_head_perc     = FLOAT8        NOT NULL,

        lp_error_check      = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,
        lp_full_error_check = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,

{

  h_retries_allowed = 3;
  h_frpr_name = 'msab_fp_reclass_topdown';

  h_table1 = 'reclass_cqpv1';
  h_table2 = 'reclass_cqpv2';
  h_table3 = 'reclass_cqpv3';
  h_out_of_scope = 'n';
  h_changed = 'n';
  h_sic_changed = 'n';

  MESSAGE 'Checking for Out Of Scope . . .';

 /*--------------------------------------------------------------
   Create table for this Contributor from cqpv but with only 
   one quarter's data to test for out-of-scope
  --------------------------------------------------------------*/

  h_return = CALLPROC msa_fp_drop_table ( h_table = :h_table3);

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;
    
  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO
    
    h_retries = :h_retries + 1;
    
    CREATE TABLE :h_table3
    AS 
    SELECT question,
           contributor_industry,
           question_industry,
           quest_order,
           avalue
    FROM   cqpv
    WHERE  contributor_reference = :contributor_reference
    AND    period = :period;
   
    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;
    
  IF h_return = 7
  THEN
    RETURN 7;
    
  ELSEIF h_return = 9
  THEN
    MESSAGE 'System error in loading from cqpv '
    WITH STYLE = POPUP;
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    MESSAGE 'No rows found on cqpv to create ' + :h_table3
    WITH STYLE = POPUP;
    RETURN 1;
  ENDIF;

  /*------------------------------------------------------------------
    Load standard headings
  ------------------------------------------------------------------*/

  h_merchanted = 0;
  h_work_done = 0;
  h_waste = 0;
  h_services = 0;
  h_total_sales = 0;

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT question AS h_question,
           avalue AS h_avalue
    FROM   :h_table3
    WHERE  quest_order != 1

    {

      IF MOD(:h_question,10000) = 9301
      THEN
        h_merchanted = :h_avalue;

      ELSEIF MOD(:h_question,10000) = 9401
      THEN
        h_work_done = :h_avalue;
 
      ELSEIF MOD(:h_question,10000) = 9501
      THEN
        h_waste = :h_avalue;
 
      ELSEIF MOD(:h_question,10000) = 9601
      THEN
        h_services = :h_avalue;
 
      ELSEIF MOD(:h_question,10000) = 9200
      THEN
        h_total_sales = :h_avalue;

      ENDIF;

    };

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'System error in loading standard headings'
    WITH STYLE = POPUP;
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    MESSAGE 'No standard headings found'
    WITH STYLE = POPUP;
    RETURN 9;

  ENDIF;

  /*------------------------------------------------------------------
    Test for out-of-scope
  ------------------------------------------------------------------*/

  IF :h_total_sales = 0
  THEN
    h_merchanted_perc = 0;
    h_work_done_perc  = 0;
    h_waste_perc      = 0;
    h_services_perc   = 0;
    h_stand_head_perc = 0;

  ELSE
    h_merchanted_perc = :h_merchanted * 100 / :h_total_sales;
    h_work_done_perc  = :h_work_done  * 100 / :h_total_sales;
    h_waste_perc      = :h_waste      * 100 / :h_total_sales;
    h_services_perc   = :h_services   * 100 / :h_total_sales;
    h_stand_head_perc = (:h_merchanted + :h_waste + :h_services)
                                      * 100 / :h_total_sales;
  ENDIF;

  IF :h_merchanted_perc > 85
  THEN
    h_out_of_scope = 'y';
    h_message = 'Merchanted Goods make up '
               + VARCHAR(INT4(:h_merchanted_perc + 0.5)) + '% of Total Sales'
  ENDIF;

  IF :h_waste_perc > 60
  THEN
    h_out_of_scope = 'y';
    h_message = 'Waste Products make up ' 
               + VARCHAR(INT4(:h_waste_perc + 0.5)) + '% of Total Sales'
  ENDIF;

  IF :h_services_perc > 60
  THEN
     h_out_of_scope = 'y';
     h_message = 'Services Rendered make up '
                + VARCHAR(INT4(:h_services_perc + 0.5)) + '% of Total Sales'
  ENDIF;

  /*------------------------------------------------------------------
    Test if standard headings collectively exceed cutoff
  ------------------------------------------------------------------*/

  IF :h_out_of_scope = 'n'
  THEN

    IF :h_stand_head_perc > 85
    THEN
      h_out_of_scope = 'y';
      h_message = 'Standard Headings make up ' 
                 + VARCHAR(INT4(:h_stand_head_perc + 0.5)) + '% of Total Sales'
    ENDIF;

  ENDIF;

  IF :h_out_of_scope = 'y'
  THEN
    MESSAGE 'Reclassification: ' + X'0d0d' 
           + 'Warning: ' + :h_message + X'0d0d' 
           + 'You must enter the Non Production SIC for ' 
           + 'this Contributor in the Reclassification table ' 
           + 'and send a Reg Amend for the change to IDBR.' 
    WITH STYLE = POPUP;

    /*--------------------------------------------------------------
       Insert the Non production value into reclass_contrib 
    --------------------------------------------------------------*/

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      INSERT INTO reclass_contrib 
                  (contributor_reference,
                   period,
                   inquiry,
                   current_ind,
                   current_ind_perc,
                   proposed_ind,
                   proposed_ind_perc,
                   action_date,
                   action,
                   user_id)
          VALUES  (:contributor_reference,
                   :period,
                   :contributor_inquiry,
                   :alt_industry,
                   :h_prinprod_perc,
                   111111111,
                   0,
                   'now',
                   'NON PROD',
                   :g_user_id);

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return = 7
    THEN
      RETURN 7;

    ELSEIF h_return = 9
    THEN
      MESSAGE 'System error in inserting into reclass_contrib'
      WITH STYLE = POPUP;
      RETURN 9;

    ELSEIF h_return = 1
    THEN
      MESSAGE 'No rows inserted into reclass_contrib'
      WITH STYLE = POPUP;
      RETURN 1;

    ENDIF;

    /*--------------------------------------------------------------
       Set 'S' marker if form exists on bto_reference_score
     --------------------------------------------------------------*/

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO
      h_retries = :h_retries + 1;

      UPDATE bto_reference_score
      SET    marker = 'S'
      WHERE  contributor_reference = :contributor_reference
      AND    period = :period;

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return = 7
    THEN
      RETURN 7;

    ELSEIF h_return = 9
    THEN
      MESSAGE 'ERROR: Failed to update bto_reference_score with S mark. '
            + 'Error code 9. Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN 9;

    ELSEIF h_return = 1
    THEN
      MESSAGE 'Note: Form not found on bto_reference score. If it was '
            + 'taken on at the desk then this is expected.'
      WITH STYLE = POPUP;
      /* 06/02/2012 - MC - Commented the return */
      /* RETURN 1;                              */
    ENDIF;

    /*--------------------------------------------------------------
      Blank out correct date for non production reference
    --------------------------------------------------------------*/
    
    h_retry_or_not      = 'RETRY';
    h_retries           = 0;
    
    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO
      h_retries = :h_retries + 1;
    
      UPDATE contributor_period
      SET    correct_date = '',
             corr_week_no = 0,
             form_status = 3
      WHERE  contributor_reference = :contributor_reference
      AND    period = :period;
    
      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);
    
      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;
    
    ENDWHILE;
    
    IF h_return = 7
    THEN
      RETURN 7;
    
    ELSEIF h_return = 9
    THEN
      MESSAGE 'System error in updating contributor_period'
      WITH STYLE = POPUP;
      RETURN 9;
    
    ELSEIF h_return = 1
    THEN
      MESSAGE 'No rows updated in contributor_period'
      WITH STYLE = POPUP;
      RETURN 1;

    ENDIF;
    
    h_data_vetted = 'n';

    h_return = CALLPROC msa_fp_drop_table ( h_table = :h_table3);
    RETURN 0;

  ENDIF; /*End of  h_out_of_scope = 'y'*/

  MESSAGE 'Checking for Reclassification . . .';

  /*------------------------------------------------------------------
    Only reclassify if the period is the latest one that has been
    receipted. 
   ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO
    h_retries = :h_retries + 1;

    SELECT MAX(period) AS h_max_period
    FROM   contributor_period
    WHERE  contributor_reference = :contributor_reference
    AND    inquiry = 14
    AND    receipt_date != '';
    
    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'System error in accessing contributor_period'
    WITH STYLE = POPUP;
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    MESSAGE 'No receipted periods loaded from contributor_period'
    WITH STYLE = POPUP;
    RETURN 1;
  ENDIF;

  IF :h_max_period != :period
  THEN
    RETURN 0;
  ENDIF;

  h_return = CALLPROC msa_fp_drop_table ( h_table = :h_table1);

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

  /*--------------------------------------------------------------
    Create table for this Contributor from cqpv 
  --------------------------------------------------------------*/
    
  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO
    h_retries = :h_retries + 1;
    
    CREATE TABLE :h_table1
    AS 
    SELECT question,
           contributor_industry,
           question_industry,
           quest_order,
           avalue
    FROM   cqpv
    WHERE  contributor_reference = :contributor_reference
    AND    period = :period;
    
    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;
    
  IF h_return = 7
  THEN
    RETURN 7;
   
  ELSEIF h_return = 9
  THEN
    MESSAGE 'System error in loading from cqpv '
    WITH STYLE = POPUP;
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    MESSAGE 'No rows found on cqpv to create ' + :h_table1
    WITH STYLE = POPUP;
    RETURN 1;
  ENDIF;

  /*------------------------------------------------------------------
    Create temporary table to hold all grps/divisions/etc
  ------------------------------------------------------------------*/

  h_return = CALLPROC msa_fp_drop_table ( h_table = :h_table2);

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO
    h_retries = :h_retries + 1;

    CREATE TABLE :h_table2
    AS 
    SELECT a.question,
           a.contributor_industry,
           a.question_industry,
           a.avalue,
           b.section,
           (a.question_industry/1000) AS division,
           (a.question_industry/100) AS grp,
           (a.question_industry/10) AS class
    FROM   :h_table1 a,
           top_down_lookup b
    WHERE  a.question_industry/1000 = b.division
    AND    a.quest_order = 1
    AND    MOD(a.question,10) = 1;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'System error in creating ' + :h_table2
    WITH STYLE = POPUP;
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    /*--------------------------------------------------------------
      Contributor has no product questions - only standard headings
    --------------------------------------------------------------*/

    h_return = CALLPROC msa_fp_drop_table ( h_table = :h_table1);
    h_return = CALLPROC msa_fp_drop_table ( h_table = :h_table2);
    h_return = CALLPROC msa_fp_drop_table ( h_table = :h_table3);
    RETURN 0;
  ENDIF;

  /*------------------------------------------------------------------
    Update question_industry to its IDBR one (e.g. 15110 --> 15111)
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO
    h_retries = :h_retries + 1;

    UPDATE :h_table2 a
    FROM   question_levels b
    SET    question_industry = b.question_subclass
    WHERE  a.question = b.question;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'System error in updating from question_subclass'
    WITH STYLE = POPUP;
    RETURN 9;

  ENDIF;

  /*------------------------------------------------------------------
    Find what categories principal products are in
  ------------------------------------------------------------------*/

  h_prin_class = :contributor_industry / 10;
  h_prin_group = :contributor_industry / 100;
  h_prin_division = :contributor_industry / 1000;

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO
    h_retries = :h_retries + 1;

    SELECT section AS h_prin_section
    FROM   top_down_lookup
    WHERE  division = :contributor_industry / 1000;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'System error in calculating principal section'
    WITH STYLE = POPUP;
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    MESSAGE 'No principal section found'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
    Find value of principal products - ALT_INDUSTRY (i.e. industry
    selected on IDBR)
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO
    h_retries = :h_retries + 1;

    SELECT IFNULL(SUM(avalue),0) AS h_prin_subclass_value
    FROM   :h_table2
    WHERE  question_industry = :alt_industry;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'System error in adding up principal industry values'
    WITH STYLE = POPUP;
    RETURN 9;

  ENDIF;

  /*------------------------------------------------------------------
    Find value of principal products - CLASS
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO
    h_retries = :h_retries + 1;

    SELECT IFNULL(SUM(avalue),0) AS h_prin_class_value
    FROM   :h_table2
    WHERE  class = :h_prin_class;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'System error in adding up principal class values'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
     Find value of principal products - GROUP
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO
    h_retries = :h_retries + 1;

    SELECT IFNULL(SUM(avalue),0) AS h_prin_group_value
    FROM   :h_table2
    WHERE  grp = :h_prin_group;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'System error in adding up principal group values'
    WITH STYLE = POPUP;
    RETURN 9;

  ENDIF;

  /*------------------------------------------------------------------
    Find value of principal products - DIVISION
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO
    h_retries = :h_retries + 1;

    SELECT IFNULL(SUM(avalue),0) AS h_prin_division_value
    FROM   :h_table2
    WHERE  division = :h_prin_division;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'System error in adding up principal division values'
    WITH STYLE = POPUP;
    RETURN 9;

  ENDIF;

  /*------------------------------------------------------------------
    Find value of principal products - SECTION
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO
    h_retries = :h_retries + 1;

    SELECT IFNULL(SUM(avalue),0) AS h_prin_section_value
    FROM   :h_table2
    WHERE  section = :h_prin_section;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'System error in adding up principal division values'
    WITH STYLE = POPUP;
    RETURN 9;

  ENDIF;

  /*------------------------------------------------------------------comment
    'Currently in: ' + X'0d0d' + 'Industry = ' + VARCHAR(:alt_industry) +
                   ', value  = ' + VARCHAR(:h_prin_subclass_value) + X'0d' +
                   'Class    = ' + VARCHAR(:h_prin_class) +
                   ',  value  = ' + VARCHAR(:h_prin_class_value) + X'0d' +
                   'Group    = ' + VARCHAR(:h_prin_group) +
                   ',   value  = ' + VARCHAR(:h_prin_group_value) + X'0d' +
                   'Division = ' + VARCHAR(:h_prin_division) +
                   ',    value  = ' + VARCHAR(:h_prin_division_value) + X'0d' +
                   'Section  = ' + VARCHAR(:h_prin_section) +
                   ',     value  = ' + VARCHAR(:h_prin_section_value) 
                   WITH STYLE = POPUP;
  comment--------------------------------------------------------------------*/

  /*------------------------------------------------------------------
    Find section that most Sales are in:
    If not > 105% of current section, current section stays the max.
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO
    h_retries = :h_retries + 1;

    SELECT SUM(avalue) as h_avalue,
           section AS h_section
    FROM   :h_table2
    GROUP BY section
    ORDER BY h_avalue DESC;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'System error in selecting section'
    WITH STYLE = POPUP;
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    MESSAGE 'No rows found for section'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  h_message = 'TopDown Reclassification: ' + X'0d0d' +
              'Max Section is ' + :h_section + X'0d0d' +
              'Its Value is ' + VARCHAR(:h_avalue) + X'0d0d';

  IF :h_section != :h_prin_section
  THEN

    IF :h_avalue > :h_prin_section_value * 105.0 / 100
    THEN
      h_changed = 'y';
      h_message = :h_message + X'0d0d' + 'Change Section';
    ENDIF;

  ENDIF;

  /*------------------------------------------------------------------
    Find division that most Sales for that section are in.
    If you haven't changed, then if > 105% of current division, 
    change sections 
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT SUM(avalue) as h_avalue,
           division AS h_division
    FROM   :h_table2
    WHERE  section = :h_section
    GROUP BY division
    ORDER BY h_avalue DESC;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'System error in selecting division'
    WITH STYLE = POPUP;
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    MESSAGE 'No rows found for division'
    WITH STYLE = POPUP;
    RETURN 9;

  ENDIF;

  h_message = 'TopDown Reclassification: ' + X'0d0d' + 'Max Division in ' 
            + :h_section + ' is ' + VARCHAR(:h_division) + X'0d0d' 
            + 'Its Value is ' + VARCHAR(:h_avalue) + X'0d0d';

  IF :h_changed = 'n'
  THEN

    IF :h_division != :h_prin_division
    THEN

      IF :h_avalue > :h_prin_division_value * 105.0 / 100
      THEN
        h_changed = 'y';
        h_message = :h_message + X'0d0d' + 'Change Division';
      ENDIF;

    ENDIF;

  ENDIF;

  /*------------------------------------------------------------------
    Find grp that most Sales for that division are in.
    If you haven't changed, then if > 105% of current group, 
    change groups 
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO
    h_retries = :h_retries + 1;

    SELECT SUM(avalue) as h_avalue,
           grp AS h_grp
    FROM   :h_table2
    WHERE  division = :h_division
    GROUP BY grp
    ORDER BY h_avalue DESC;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'System error in selecting grp'
    WITH STYLE = POPUP;
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    MESSAGE 'No rows found for grp'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  h_message = 'TopDown Reclassification: ' + X'0d0d' 
             +'Max Group in ' + VARCHAR(:h_division) + ' is ' 
             + VARCHAR(:h_grp) + X'0d0d' + 'Its Value is ' 
             + VARCHAR(:h_avalue) + X'0d0d';

  IF :h_changed = 'n'
  THEN

    IF :h_grp != :h_prin_group
    THEN

      IF :h_avalue > :h_prin_group_value * 105.0 / 100
      THEN
        h_changed = 'y';
        h_message = :h_message + X'0d0d' + 'Change Group';
      ENDIF;

    ENDIF;

  ENDIF;

  /*------------------------------------------------------------------
    For SIC2003 changes from 200200 annual data for the following 
    industries, topdown reclassification is only to be decided at 
    group level:
    21211&21219, 21250, 29400
    If it is a 3 digit change eg. 21250 --> 25240 then process the 
    reclassification as normal. If it is staying the same at 3 digit level 
    then bypass the reclass tests and just clear the form.    
    Amended back Dec 2004
  ------------------------------------------------------------------*/

  IF h_changed = 'y'
  THEN 

    IF period < 200400
    THEN

      IF :h_prin_class = 2121 OR :h_prin_class = 2125 
      OR :h_prin_class = 2941 OR :h_prin_class = 2942
      OR :h_prin_class = 2943
      THEN
        h_sic_changed = 'y'
      ENDIF;

    ENDIF;

  ENDIF;

  /*-----------------------------------------------------------comment
    MESSAGE :h_message WITH STYLE = POPUP;
  comment-----------------------------------------------------------*/

  /*-----------------------------------------------------------------------
    Find Class that most Sales for that group are in.
    If you haven't changed, then if > 105% of current class, change classes. 
    For the industries affected by SIC2003 changes set the h_message to 
    spaces as this gets built up for the 4th digit and 5th digit topdown 
    reclass check.
  ------------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO
    h_retries = :h_retries + 1;

    SELECT SUM(avalue) as h_avalue,
           class AS h_class
    FROM   :h_table2
    WHERE  grp = :h_grp
    GROUP BY class
    ORDER BY h_avalue DESC;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'System error in selecting class'
    WITH STYLE = POPUP;
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    MESSAGE 'No rows found for class'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  h_message = 'TopDown Reclassification: ' + X'0d0d' + 'Max Class in ' 
             + VARCHAR(:h_grp) + ' is ' + VARCHAR(:h_class) + X'0d0d' 
             +'Its Value is ' + VARCHAR(:h_avalue) + X'0d0d';

  IF :h_changed = 'n'
  THEN

    IF :h_class != :h_prin_class
    THEN

      IF :h_avalue > :h_prin_class_value * 105.0 / 100
      THEN
        h_changed = 'y';
        h_message = :h_message + X'0d0d' + 'Change Class';
      ENDIF;

    ENDIF;

  ENDIF;


  /*-----------------------------------------------------------comment
    MESSAGE :h_message WITH STYLE = POPUP;
  comment-----------------------------------------------------------*/

  /*-------------------------------------------------------------------------
    Find Subclass that most Sales for that class are in:
    1. If you haven't changed, then if >105% of current class, change classes.
    2. If you have changed, change classes regardless.
  --------------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO
    h_retries = :h_retries + 1;

    SELECT SUM(avalue) as h_avalue,
           question_industry AS h_subclass
    FROM   :h_table2
    WHERE  class = :h_class
    GROUP BY question_industry
    ORDER BY h_avalue DESC;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'System error in selecting subclass'
    WITH STYLE = POPUP;
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    MESSAGE 'No rows found for subclass'
    WITH STYLE = POPUP;
    RETURN 9;

  ENDIF;

  h_message = 'TopDown Reclassification: ' + X'0d0d' + 'Max Ind for ' 
             + VARCHAR(:h_class) + ' is ' + VARCHAR(:h_subclass) + X'0d0d' 
             +'Its Value is ' + VARCHAR(:h_avalue) + X'0d0d';

  IF :h_changed = 'n'
  THEN

    IF :h_subclass != :alt_industry
    THEN

      IF :h_avalue > :h_prin_subclass_value * 105.0 / 100
      THEN
        h_changed = 'y';
        h_message = :h_message + X'0d0d' + 'Change Industry';
      ENDIF;

    ENDIF;

  ENDIF;

  IF :h_changed = 'n'
  THEN
    h_return = CALLPROC msa_fp_drop_table ( h_table = :h_table1);
    h_return = CALLPROC msa_fp_drop_table ( h_table = :h_table2);
    h_return = CALLPROC msa_fp_drop_table ( h_table = :h_table3);
    RETURN 0;
  ENDIF;

  /*------------------------------------------------------------------
    Calculate percentages of contributor's industry & top industry 
  ------------------------------------------------------------------*/

  IF :h_total_sales = 0
  THEN
    h_prinprod_perc = 0;
    h_top_perc = 0;
  ELSE
    h_prinprod_perc = :h_prin_subclass_value * 100 / :h_total_sales;
    h_top_perc = :h_avalue * 100 / :h_total_sales;
  ENDIF;

  /*------------------------------------------------------------------
    Prompt for an R048
    Inform user that it is a large change ie, >= 1000 register_emp
    and also a change at 2 digit level. They must inform BRU using 
    R048 that will be produced automatically
  ------------------------------------------------------------------*/

  h_return = CALLPROC msa_fp_get_user_details 
                      (h_user_name    = BYREF(:g_user_name),
                       h_room_number  = BYREF(:g_room_number),
                       h_extension    = BYREF(:g_extension));

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO
    h_retries = :h_retries + 1;

    SELECT register_emp AS h_register_emp
    FROM   contributor_period
    WHERE  contributor_reference = :contributor_reference
    AND    period = :period;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'System error in accessing contributor_period'
    WITH STYLE = POPUP;
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    MESSAGE 'Reference could not be found on contributor_period'
    WITH STYLE = POPUP;
    RETURN 1;

  ENDIF;

  /*------------------------------------------------------------------
    For these 'large change' reclassifications select inquiry of the 
    proposed subclass. Display a different prompt depending on where 
    the contributor is being reclassed to. 
    eg.
    1. Reclassify staying within annual or quarterly Prodcom
    2. Reclassify from annual to quarterly Prodcom
    3. Reclassify from quarterly to annual Prodcom
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO
    h_retries = :h_retries + 1;

    SELECT DISTINCT(MAX(inquiry)) AS h_inquiry
    FROM   industry_period
    WHERE  industry = :h_subclass 
    OR     industry IN (SELECT class 
                        FROM   industry_class_level
                        WHERE  sub_class = :h_subclass);

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'System error in accessing industry_period'
    WITH STYLE = POPUP;
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    MESSAGE 'Industry could not be found on industry_period'
    WITH STYLE = POPUP;
    RETURN 1;
  ENDIF;

  IF :contributor_industry/1000 != :h_division AND :h_register_emp >= 1000
  THEN
    h_message = 'IMMEDIATE RECLASSIFICATION WARNING: '
               +'Proposed reclassification at two '    
               +'digit level with register greater than 999.'
               + X'0d0d' + 'The following action is required: '  
               + X'0d' + '1. Check product coding.'+ X'0d0d' 
               +'2. Consult with RAP.'+ X'0d0d' 
               +'3. IF an immediate reclass is agreed by RAP, '
               +'deselect from incorrect SIC and create on new SIC.'
               + X'0d0d' + '4. Send regamend requesting reclassification.'
               + X'0d0d'+ 'To view reclassification proposal press <return>'
               + X'0d0d';
  ENDIF;

  /*------------------------------------------------------------------
    Insert initial WAITING value into reclass_contrib
   ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO
    h_retries = :h_retries + 1;

    INSERT INTO reclass_contrib 
                (contributor_reference,
                 period,
                 inquiry,
                 current_ind,
                 current_ind_perc,
                 proposed_ind,
                 proposed_ind_perc,
                 action_date,
                 action,
                 user_id)
    VALUES      (:contributor_reference,
                 :period,
		 :contributor_inquiry,
                 :alt_industry,
                 :h_prinprod_perc,
                 :h_subclass,
                 :h_top_perc,
                 'now',
                 'WAITING',
                 :g_user_id);

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'System error in inserting into reclass_contrib'
    WITH STYLE = POPUP;
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    MESSAGE 'No rows inserted into reclass_contrib'
    WITH STYLE = POPUP;
    RETURN 1;
  ENDIF;

  /*------------------------------------------------------------------
    References that are classified to industries that are collected at
    the 5th digit on IDBR but that are only changing at the 5th digit 
    within the same class on Prodcom will be automatically accepted 
    on the reclass table
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO
    h_retries = :h_retries + 1;

    h_count = 0;

    SELECT COUNT(*) AS h_count
    FROM   industry_class_level
    WHERE  sub_class IN (:alt_industry,:h_subclass);

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'System error selecting from industry_class_level'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
    Update reclass_contrib to ACCEPTED
    Amended April 2002 - 
    For contributors who were staying in the same industry on IDBR 
    ie the alt_industry they were having an incorrect proposed 
    industry set on table reclass-contrib.These would not be 
    noticeable to the DVB but would propbably get rejected when the 
    batch reclass file was loaded onto IDBR because the proposed 
    industry was a Prodcom industry and these to not exist on IDBR.
    Added an update to current_ind and proposed_ind to solve problem.

    Amended December 2002
    For SIC2003 changes do not automatically ACCEPT for 
    reclassification those industries affected which are 29400 
    (Prodcom industry) which combines 29401 and 29409 on IDBR
  ------------------------------------------------------------------*/

  IF :h_count = 2 AND :alt_industry/100 = :h_subclass/100
  THEN
    h_retry_or_not      = 'RETRY';
    h_retries           = 0;
    
    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO
      h_retries = :h_retries + 1;
    
      UPDATE reclass_contrib
      SET    current_ind           = :alt_industry,
             proposed_ind          = :alt_industry,
             action                = 'ACCEPTED',
             action_date           = 'now',
             user_id               = :g_user_id
      WHERE  contributor_reference = :contributor_reference
      AND    period                = :period;
   
      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);
    
      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;
    
    ENDWHILE;
    
    IF h_return = 7
    THEN
      RETURN 7;
  
    ELSEIF h_return = 9
    THEN
      MESSAGE 'System error in updating reclass_contrib'
      WITH STYLE = POPUP;
      RETURN 9;
 
    ELSEIF h_return = 1
    THEN
      MESSAGE 'No rows to update in reclass_contrib'
      WITH STYLE = POPUP;
      RETURN 9;
    ENDIF;

    h_return = CALLPROC msa_fp_drop_table ( h_table = :h_table1);
    h_return = CALLPROC msa_fp_drop_table ( h_table = :h_table2);
    h_return = CALLPROC msa_fp_drop_table ( h_table = :h_table3);

    RETURN 0;

  ENDIF; 

  /*------------------------------------------------------------------
    Prompt to reclassify or not - and update reclass_contrib
    For industries affected by SIC2003 changes - the reclass
    prompt is given at group level
  ------------------------------------------------------------------*/

  h_yesno = '';

  IF h_sic_changed = 'y'
  THEN
    h_message = 'TopDown Reclassification: ' + X'0d0d' 
               +'This Contributor is classified to the IDBR Industry ' 
               + VARCHAR(:alt_industry) + '. TopDown suggests ' 
               +'that it should be classified to ' 
               + VARCHAR(:h_subclass) + X'0d0d';
  ENDIF;            

  IF :h_merchanted > 0
  THEN
    h_message = :h_message + '     Merchanted Goods make up ' 
                           + VARCHAR(INT4(:h_merchanted_perc + 0.5)) 
                           + '% of Total Sales' + X'0d0d';
  ENDIF;

  IF :h_work_done > 0
  THEN
    h_message = :h_message + '     Work Done makes up ' 
                           + VARCHAR(INT4(:h_work_done_perc + 0.5)) 
                           + '% of Total Sales' + X'0d0d';
  ENDIF;

  IF :h_waste > 0
  THEN
    h_message = :h_message + '     Waste Products make up ' 
                           + VARCHAR(INT4(:h_waste_perc + 0.5)) 
                           + '% of Total Sales' + X'0d0d';
  ENDIF;

  IF :h_services > 0
  THEN
    h_message = :h_message + '     Services Rendered make up ' 
                           + VARCHAR(INT4(:h_services_perc + 0.5)) 
                           + '% of Total Sales' + X'0d0d';
  ENDIF;

  IF :period <= 200300 AND (:h_prin_class = 2121
                       AND  :h_prin_class = 2125 
                       AND  :h_prin_class = 2941
                       AND  :h_prin_class = 2942
                       AND  :h_prin_class = 2943)
                       OR  h_sic_changed = 'y'
  THEN
    h_return = CALLPROC msa_fp_drop_table ( h_table = :h_table1);
    h_return = CALLPROC msa_fp_drop_table ( h_table = :h_table2);
    h_return = CALLPROC msa_fp_drop_table ( h_table = :h_table3);
    RETURN 0;

  ELSE
    MESSAGE :h_message + '     Any Reclass proposals will now be ' 
                       + 'displayed' + X'0d0d'
    WITH STYLE = POPUP;

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO
      h_retries = :h_retries + 1;

      h_return = CALLFRAME msab_fr_reclass_history
                           (contributor_reference = :contributor_reference,
	                    period                = :period);

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return = 7
    THEN
      RETURN 7;

    ELSEIF h_return = 9
    THEN
      MESSAGE 'System error selecting reclass history'
      WITH STYLE = POPUP;
      RETURN 9;

    ELSEIF h_return = 1 
    THEN
      MESSAGE 'No history exists for contributor ' + :contributor_reference
      WITH STYLE = POPUP;

      WHILE :h_yesno != 'y' AND :h_yesno != 'n'
      DO
        h_yesno = PROMPT 'Do you wish to reclassifyi ' 
                        +'this Contributor? Type Y/N and press' + ' <return>'
        WITH STYLE = POPUP;
        h_yesno = LOWERCASE(:h_yesno);
      ENDWHILE;

    ELSEIF h_return = 0
    THEN
      WHILE :h_yesno != 'y' AND :h_yesno != 'n'
      DO
        h_yesno = PROMPT 'Do you wish to reclassify ' 
                        +'this Contributor? Type Y/N and press' + ' <return>'
        WITH STYLE = POPUP;
        h_yesno = LOWERCASE(:h_yesno);
      ENDWHILE;

    ENDIF;

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO
      h_retries = :h_retries + 1;

      IF :h_yesno = 'y'
      THEN
        MESSAGE 'Warning: ' + X'0d0d' 
                         +'You now need to generate a Reg Amend for IDBR.'
        WITH STYLE = POPUP;
        
        UPDATE reclass_contrib
        SET    action      = 'PROPOSED',
               action_date = 'now',
               user_id     = :g_user_id
        WHERE  contributor_reference = :contributor_reference
        AND    period                = :period;

        h_return_2 = CALLPROC lp_error_check (p_num_row_ck = 1);

        IF h_return_2 != 0
        THEN
          MESSAGE 'ERROR: Failed to update reclass_contrib '
                 +'with proposed reclass. ' + 'Error code ' 
                 +VARCHAR(:h_return_2) +'. ' + 'Please contact IM immediately.'
          WITH STYLE = POPUP;
          RETURN 9;
        ENDIF;

        /*----------------------------------------------------------
          If a reclass is proposed then inform DBV if work done is 
          > 25% of total sales
        ----------------------------------------------------------*/

        IF :h_work_done_perc >= 25
        THEN
          MESSAGE 'Work Done makes up ' + VARCHAR(INT4(:h_work_done_perc + 0.5))
                 +'% of Total Sales' + X'0d0d'
          WITH STYLE = POPUP;
        ENDIF;

      ELSE 
        UPDATE reclass_contrib
        SET    action      = 'NOT PROPOSED',
               action_date = 'now',
               user_id     = :g_user_id
        WHERE  contributor_reference = :contributor_reference
        AND    period                = :period;

      ENDIF;

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return = 7
    THEN
      RETURN 7;

    ELSEIF h_return = 9
    THEN
      MESSAGE 'System error in updating reclass_contrib'
      WITH STYLE = POPUP;
      RETURN 9;

    ELSEIF h_return = 1
    THEN
      MESSAGE 'No rows updated in reclass_contrib'
      WITH STYLE = POPUP;
      RETURN 1;
    ENDIF;

    /*------------------------------------------------------------------
     Blank out correct date if the reclassification has been proposed
    ------------------------------------------------------------------*/

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO
      h_retries = :h_retries + 1;

      IF :h_yesno = 'y'
      THEN
        h_data_vetted = 'n';

        UPDATE contributor_period
        SET    correct_date = '',
               corr_week_no = 0,
               form_status = 3
        WHERE  contributor_reference = :contributor_reference
        AND    period = :period;

      ELSE
        UPDATE contributor_period a
        FROM   inquiry_period b
        SET    correct_date = 'today',
               corr_week_no = b.week_no,
               form_status = 4
        WHERE  a.contributor_reference = :contributor_reference
        AND    a.period = :period
        AND    a.period = b.period
        AND    b.inquiry = :contributor_inquiry;

      ENDIF;

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return = 7
    THEN
      RETURN 7;

    ELSEIF h_return = 9
    THEN
      MESSAGE 'System error in updating contributor_period'
      WITH STYLE = POPUP;
      RETURN 9;

    ELSEIF h_return = 1
    THEN
      MESSAGE 'No rows updated in contributor_period'
      WITH STYLE = POPUP;
      RETURN 1;
    ENDIF;

    IF :h_yesno = 'y'
    THEN

      /*--------------------------------------------------------------
        Set 'R' marker if form exists on bto_reference_score and 
        reclass being proposed.
      --------------------------------------------------------------*/

      h_retry_or_not      = 'RETRY';
      h_retries           = 0;

      WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
      DO
        h_retries = :h_retries + 1;

        UPDATE bto_reference_score
        SET    marker = 'R'
        WHERE  contributor_reference = :contributor_reference
        AND    period = :period;

        h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

        IF h_return != 7
        THEN
          h_retry_or_not = '';
        ENDIF;

      ENDWHILE;

      IF h_return = 7
      THEN
        RETURN 7;

      ELSEIF h_return = 9
      THEN
        MESSAGE 'ERROR: Failed to update bto_reference_score with R mark. '
               +'Error code 9. Please contact IM immediately.'
        WITH STYLE = POPUP;
        RETURN 9;

      ELSEIF h_return = 1
      THEN
        MESSAGE 'Note: Form not found on bto_reference_score. If it was '
               +'taken on at the desk then this is expected.'
        WITH STYLE = POPUP;
      ENDIF;

      MESSAGE 'Contributor has been successfully proposed for '
             +'reclassification.'
      WITH STYLE = POPUP;

    ELSE
      MESSAGE 'This reclassification has been rejected as requested.'
      WITH STYLE = POPUP;

    ENDIF;

  ENDIF; /* end of new reclass prompt if statement*/

  h_return = CALLPROC msa_fp_drop_table ( h_table = :h_table1);
  h_return = CALLPROC msa_fp_drop_table ( h_table = :h_table2);
  h_return = CALLPROC msa_fp_drop_table ( h_table = :h_table3);

  RETURN 0;
}

/***************************** LOCAL PROCEDURES ***************************/

/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing 
                       (h_num_row_ck = :p_num_row_ck,
                        h_commit          = 'Y',
                        h_rollback        = 'N',
                        h_retries         = :h_retries,
                        h_retries_allowed = :h_retries_allowed,
                        h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}

/*=======================================================================
    Local procedure to check sql for errors during sections of code that
    utilise personal temp tables. Committed, no rollback.
=======================================================================*/

PROCEDURE lp_error_check (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing 
                       (h_num_row_ck = :p_num_row_ck,
                        h_commit     = 'Y',
                        h_rollback   = 'N',
                        h_frpr_name  = :h_frpr_name);

  RETURN IFNULL(:lp_return,9);

}

