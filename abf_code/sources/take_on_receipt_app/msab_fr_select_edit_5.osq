INITIALIZE () =

DECLARE h_retries_allowed = INTEGER1     NOT NULL,
        h_retries         = INTEGER1     NOT NULL,
        h_retry_or_not    = CHAR(5)      NOT NULL,
        h_frpr_name       = VARCHAR(24)  NOT NULL,
        h_field_name      = VARCHAR(24)  NOT NULL,
        h_prompt          = CHAR(1)      NOT NULL,
        h_rows            = INTEGER4     NOT NULL,
        h_return          = INTEGER1     NOT NULL,
        tf.inquiry        = INTEGER1     NOT NULL,
        tf.looked_at      = CHAR(1)      NOT NULL,
        h_record          = INTEGER4     NOT NULL,
        h_on_record       = INTEGER4     NOT NULL,
        h_reference       = CHAR(11)     NOT NULL,
        h_last_reference  = CHAR(11)     NOT NULL,
        h_last_period     = INTEGER4     NOT NULL,
        h_last_industry   = INTEGER4     NOT NULL,
        h_industry        = INTEGER4     NOT NULL,
        h_message         = VARCHAR(200) NOT NULL,
        h_order_by        = VARCHAR(100) NOT NULL,
        h_prompt_ind      = VARCHAR(5)   NOT NULL,
        h_prompt_ref      = VARCHAR(11)  NOT NULL,
        h_hold_ind        = VARCHAR(5)   NOT NULL,
        h_hold_ref        = VARCHAR(11)  NOT NULL,
        h_order           = INTEGER1     NOT NULL,
        h_dummy_id        = VARCHAR(8)   NOT NULL,
        h_diary_date      = DATE         NOT NULL,
        h_dummy           = CHAR(11)     NOT NULL,
        h_table           = VARCHAR(32)  NOT NULL,

  lp_load_data            = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,
  lp_display_data         = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,
  lp_error_check          = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,
  lp_full_error_check     = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,
  lp_write_to_audit_trail = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,
  lp_refresh_diary_date   = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,

{
  h_frpr_name = 'msab_fr_select_edit_5';
  h_retries_allowed = 3;
  h_table = 'tt_sel_edit_5';
  msa_date = 'now';

  SELECT DBMSINFO('username') AS g_user_id;
  SELECT DBMSINFO('database') AS g_database;

  SET_FORMS FRS (MAPFILE='/home/prodcom/admin/prodcom.map');

  /*----------------------------------------------------------------------
       Access check. (Error messages handled by procedure.)
  ----------------------------------------------------------------------*/
  
  h_return = CALLPROC check_access_frames (p_frpr_name = :h_frpr_name);

  IF h_return = 1 
  THEN
    RETURN 0;
  ELSEIF h_return > 1
  THEN
    RETURN 9;
  ENDIF;

  SET_FORMS FIELD '' (MODE(tf) = 'READ');

  h_return = CALLPROC lp_load_data ();

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

  RESUME FIELD tf;
}

'Actioned', KEY FRSKEY4 =
{
  INQUIRE_FORMS FORM (h_field_name = FIELD);

  IF :h_field_name != 'tf'
  THEN
    MESSAGE 'WARNING: Please highlight the required form on the table.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  INQUIRE_FORMS TABLE '' (h_rows = DATAROWS(tf));

  IF :h_rows = 0
  THEN
    MESSAGE 'WARNING: Please highlight the required form on the table.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  h_prompt = '';
  WHILE h_prompt != 'Y' AND h_prompt != 'N'
  DO
    h_prompt = PROMPT 'WARNING: Have you completed all the actions necessary '
                    + 'or appropriate for this unscorable form? [Y/N] '
                WITH STYLE = POPUP;
    h_prompt = UPPER(:h_prompt);
  ENDWHILE;

  IF h_prompt = 'N'
  THEN
    RESUME;
  ENDIF;

  MESSAGE 'Marking form as actioned . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    INSERT INTO bto_unscored_cleared
    VALUES     (:tf.contributor_reference,
                :tf.period,
                :tf.contributor_industry,
                :tf.reason,
                :tf.time); 

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return > 0
  THEN
    MESSAGE 'ERROR: Failed to insert into bto_unscored_cleared.' +X'0D'
          + 'Contributor ' + VARCHAR(:tf.contributor_reference) + ', '
          + 'Period ' + VARCHAR(:tf.Period) + '.' +X'0D'
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'              
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    DELETE FROM bto_unscored
    WHERE       contributor_reference = :tf.contributor_reference
      AND       contributor_industry  = :tf.contributor_industry
      AND       period                = :tf.period
      AND       time                  = :tf.time;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return > 0
  THEN
    MESSAGE 'ERROR: Failed to delete from bto_unscored.' +X'0D'
          + 'Contributor ' + VARCHAR(:tf.contributor_reference) + ', '
          + 'Period ' + VARCHAR(:tf.Period) + '.' +X'0D'
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'              
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  h_return = CALLPROC lp_write_to_audit_trail
            ( p_contributor_reference = :tf.contributor_reference,
              p_period                = :tf.period,
              p_val_3                 = :tf.reason,
              p_code                  = 18);

  IF h_return != 0
  THEN
    /* Error reported by external procedure */
    RETURN 9;
  ENDIF;

  h_return = CALLPROC lp_load_data ();

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

  RESUME FIELD tf;
}

'Diarydate', KEY FRSKEY9 =
{

  IF  g_user_class != 'I'
  AND g_user_class != 'D'
  THEN
    MESSAGE 'WARNING: This function is not available to your access class.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  INQUIRE_FORMS FORM (h_field_name = FIELD);

  IF :h_field_name != 'tf'
  THEN
    MESSAGE 'Please highlight the required Contributor'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  INQUIRE_FORMS TABLE '' (h_rows = DATAROWS(tf));

  IF :h_rows = 0
  THEN
    MESSAGE 'Please highlight the required Contributor'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  h_reference = :tf.contributor_reference;
  h_industry  = :tf.contributor_industry;

  MESSAGE 'Loading Diary Date .  .  .';

  IF h_diary_date = ''
  THEN

    h_diary_date = 'today';

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      SELECT contributor_reference AS :h_dummy
      FROM   contributor_diary
      WHERE  contributor_reference = :h_reference;

      h_return = CALLPROC check_inq_ing 
                          (h_num_row_ck      = 1,
                           h_commit          = 'Y',
                           h_rollback        = 'N',
                           h_retries         = :h_retries,
                           h_retries_allowed = :h_retries_allowed,
                           h_frpr_name       = :h_frpr_name);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return > 1
    THEN
      MESSAGE 'ERROR: Failed to create working table. '
            + 'Error code '+ VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN 9;
    ELSEIF h_return = 1
    THEN
   
      h_retry_or_not      = 'RETRY';
      h_retries           = 0;

      WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
      DO

        h_retries = :h_retries + 1;

        INSERT INTO contributor_diary 
                   (contributor_reference,
                    contributor_industry,
                    diary_date)
        VALUES     (:h_reference,
                    :h_industry,
                    :h_diary_date);

        h_return = CALLPROC check_inq_ing 
                            (h_num_row_ck      = 1,
                             h_commit          = 'Y',
                             h_rollback        = 'N',
                             h_retries         = :h_retries,
                             h_retries_allowed = :h_retries_allowed,
                             h_frpr_name       = :h_frpr_name);

        IF h_return != 7
        THEN
          h_retry_or_not = '';
        ENDIF;

      ENDWHILE;

      IF h_return = 7
      THEN
        RETURN 7;

      ELSEIF h_return = 9
      THEN
        MESSAGE 'System error inserting into contributor_diary'
        WITH STYLE = POPUP;
        RETURN 9;

      ELSEIF h_return = 1
      THEN
        MESSAGE 'No rows inserted into contributor_diary'
        WITH STYLE = POPUP;
        RETURN 9;
      ENDIF;

    ENDIF;

    h_return = CALLFRAME msa_fr_diary_date (diary_date = BYREF(:h_diary_date));

    IF h_return = 1 OR h_return = 0
    THEN
      h_retry_or_not      = 'RETRY';
      h_retries           = 0;

      WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
      DO
        h_retries = :h_retries + 1;

        IF h_return = 1
        THEN
          DELETE FROM contributor_diary
          WHERE  contributor_reference IN (:h_reference);
        ELSE
          UPDATE contributor_diary
          SET    diary_date = :h_diary_date
          WHERE  contributor_reference IN (:h_reference);
        ENDIF;

        h_return = CALLPROC check_inq_ing 
                            (h_num_row_ck      = 1,
                             h_commit          = 'Y',
                             h_rollback        = 'N',
                             h_retries         = :h_retries,
                             h_retries_allowed = :h_retries_allowed,
                             h_frpr_name       = :h_frpr_name);

        IF h_return != 7
        THEN
          h_retry_or_not = '';
        ENDIF;

      ENDWHILE;

      IF h_return = 7
      THEN
        RETURN 7;

      ELSEIF h_return = 9
      THEN
        MESSAGE 'System error updating/deleting from contributor_diary'
        WITH STYLE = POPUP;
        RETURN 9;

      ELSEIF h_return = 1
      THEN
        MESSAGE 'No rows updated/deleted on contributor_diary'
        WITH STYLE = POPUP;
        RETURN 9;

      ENDIF;

    ENDIF;

  ENDIF;

  h_return = CALLPROC lp_refresh_diary_date (p_reference = :h_reference);

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

}

'View', KEY FRSKEY11 =
{

  INQUIRE_FORMS FORM (h_field_name = FIELD);

  IF :h_field_name != 'tf'
  THEN
    MESSAGE 'WARNING: Please highlight the required form on the table.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  INQUIRE_FORMS TABLE '' (h_rows = DATAROWS(tf));

  IF :h_rows = 0
  THEN
    MESSAGE 'WARNING: Please highlight the required form on the table.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;
    
  h_return = CALLFRAME msab_fr_select_edit_2 
           ( contributor_reference = :tf.contributor_reference,
             period                = :tf.period,
             contributor_industry  = :tf.contributor_industry,
             p_reason              = IFNULL(:tf.reason,''));

  msa_date = 'now';

  IF h_return != 0
  THEN
    RESUME;
  ENDIF;

  h_return = CALLPROC lp_load_data ();

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

}


'Contact', KEY FRSKEY6 =
{
  INQUIRE_FORMS FORM (h_field_name = FIELD);

  IF :h_field_name != 'tf'
  THEN
    MESSAGE 'Please highlight the required Contributor'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  INQUIRE_FORMS TABLE '' (h_rows = DATAROWS(tf));

  IF :h_rows = 0
  THEN
    MESSAGE 'WARNING: Please highlight the required form on the table.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  h_reference = :tf.contributor_reference;

  CALL APPLICATION(exec = '$IMAGES/communicate',
                   param = VARCHAR(:h_reference));

  msa_date = 'now';

}

'GoToRef', KEY FRSKEY7 =
{
  h_message = 'Please enter the contributor reference number';

  IF h_hold_ref != ''
  THEN
    h_message = h_message + ', or just press <Return> to go to the next ' 
              + 'form whose reference number starts with ' 
              + VARCHAR(h_hold_ref) +'.';
  ELSE
    h_message = h_message + '.'; 
  ENDIF;

  h_prompt_ref = PROMPT h_message WITH STYLE = POPUP;

  IF h_prompt_ref = '' AND h_hold_ref != ''
  THEN
    h_prompt_ref = h_hold_ref;
    h_on_record = :tf._record;
  ELSE
    h_on_record = 0;
  ENDIF;

  h_hold_ref = h_prompt_ref;

  UNLOADTABLE tf (h_record = _record)
  BEGIN

    IF h_record > h_on_record
    THEN

      IF LEFT(VARCHAR(tf.contributor_reference),LENGTH(h_prompt_ref)) 
       = :h_prompt_ref
      THEN
        SCROLL tf TO h_record;
        RESUME;
      ENDIF;

    ENDIF;

  END;

}

'End', KEY FRSKEY14 =
{
  RETURN 0;
}

/************************** LOCAL PROCEDURES ***************************/

/*=======================================================================
    Local procedure to check sql for errors during sections of code that
    utilise perosnal temp tables. Committed, no rollback.
=======================================================================*/

PROCEDURE lp_error_check (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing (
              h_num_row_ck = :p_num_row_ck,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

  RETURN IFNULL(:lp_return,9);

}

/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing (
                  h_num_row_ck = :p_num_row_ck,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}


/*===================================================================
      Local procedure to populate working table.
====================================================================*/

PROCEDURE lp_load_data () =

DECLARE   lp_return        = INTEGER4   NOT NULL WITH DEFAULT,
          lp_scope         = INTEGER1   NOT NULL WITH DEFAULT,
          lp_refresh_diary_date_date    = INGRESDATE NOT NULL WITH DEFAULT

{

  /*---------------------------------------------------------------------
     Determine scope of unscorable forms to be viewed.

     This is a temporary method until I can implement the full replacement 
     of the existing min n match method of accesses. - DF 2012

     Scope: 1 = AO - Own allocation
            2 = EO - Teams allocation
            3 = HEO/DEV - All.
   ----------------------------------------------------------------------*/  

  lp_scope = 0;

  /*......................................................................
     Scope 1: Exists as analyst on analyst_coordinator_manager table.
  ......................................................................*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT  DISTINCT analyst_id AS h_dummy_id
    FROM   analyst_coordinator_manager
    WHERE  analyst_id = :g_user_id
    BEGIN
      lp_scope = 1;
    END;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck= 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return > 7
  THEN
    MESSAGE 'ERROR: Failed to select scope 1 from the '
          + 'analyst_coordinator_manager table.'
    WITH STYLE = POPUP;
    RETURN 9;

  ENDIF;

 
  /*......................................................................
     Scope 2: Exists as coordinator on analyst_coordinator_manager table.
  ......................................................................*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT  DISTINCT coordinator_id AS h_dummy_id
    FROM   analyst_coordinator_manager
    WHERE  coordinator_id = :g_user_id
    BEGIN
      lp_scope = 2;
    END;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck= 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return > 7
  THEN
    MESSAGE 'ERROR: Failed to select scope 2 from the '
          + 'analyst_coordinator_manager table.'
    WITH STYLE = POPUP;
    RETURN 9;

  ENDIF;

  /*......................................................................
     Scope 3: Exists as manager on analyst_coordinator_manager table
              or is a dev id.
  ......................................................................*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT  DISTINCT manager_id AS h_dummy_id
    FROM   analyst_coordinator_manager
    WHERE  manager_id = :g_user_id
    BEGIN
      lp_scope = 3;
    END;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck= 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return > 7
  THEN
    MESSAGE 'ERROR: Failed to select scope 3 from the '
          + 'analyst_coordinator_manager table.'
    WITH STYLE = POPUP;
    RETURN 9;

  ENDIF;

  IF  :g_user_id = 'produser'
  OR  :g_user_id = 'prodlive'
  OR  :g_user_id = 'produat'
  OR  :g_user_id = 'proddev'
  THEN
    lp_scope = 3;
  ENDIF; 

  /*---------------------------------------------------------------------
      Still scope zero? Sorry, nothing will be shown for you.
   ----------------------------------------------------------------------*/  

  IF lp_scope = 0
  THEN
    MESSAGE 'WARNING: You do not have access to this data. Please '
          + 'contact the business area control team to ensure you '
          + 'are listed in the team roster and have an allocation.'
    WITH STYLE = POPUP;
    RETURN 0;
  ENDIF;

  /*---------------------------------------------------------------------
      Drops tables ready for use.
   ----------------------------------------------------------------------*/  

  h_return = CALLPROC msa_fp_drop_table ( h_table = 'tt_view_ids');

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;


  h_return = CALLPROC msa_fp_drop_table ( h_table = 'tt_view_forms');

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

  h_return = CALLPROC msa_fp_drop_table ( h_table = :h_table );

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

  /*---------------------------------------------------------------------
      Determines user ids of allocations to display based on scope. 
   ----------------------------------------------------------------------*/  

  IF lp_scope = 1 
  THEN
    CREATE TABLE tt_view_ids
    AS
    SELECT analyst_id AS user_id
    FROM   analyst_coordinator_manager
    WHERE  analyst_id = :g_user_id;  

  ELSEIF lp_scope = 2
  THEN
    CREATE TABLE tt_view_ids
    AS
    SELECT a.analyst_id AS user_id
    FROM   analyst_coordinator_manager a
    WHERE  a.coordinator_id = :g_user_id  
       OR  a.coordinator_id = ( SELECT b.id_two
                                FROM   job_share b
                                WHERE  b.id_one  = :g_user_id);

  ELSEIF lp_scope = 3
  THEN
    CREATE TABLE tt_view_ids
    AS
    SELECT analyst_id AS user_id
    FROM   analyst_coordinator_manager;

  ELSE
    MESSAGE 'ERROR: Critical fault in setting scope of display. '
          + 'Unable to continue. Please contact I.M. immediately.'
    WITH STYLE = POPUP;
    RETURN 9;

  ENDIF;
   
  /*---------------------------------------------------------------------
      Determines which forms can be viewed using the ids listed in the
      tt_view_ids table and referencing them with industry_analysts table
      to create tt_view_forms table.
   ----------------------------------------------------------------------*/  

  CREATE TABLE tt_view_forms 
  AS
  SELECT a.* 
  FROM   industry_analysts a,
         tt_view_ids b
  WHERE  a.user_id = b.user_id;
 
  lp_return = CALLPROC lp_error_check (p_num_row_ck  = 1); 

  IF lp_return != 0
  THEN
    MESSAGE 'ERROR: Failed to create tt_view_forms. Error code '
          + VARCHAR(:lp_return) +'. Unable to continue. '
          + 'Please contact I.M. immediately.'
    WITH STYLE = POPUP;
    RETURN 9; 
  ENDIF;

  MESSAGE 'Selecting Unscorable Forms . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;
  
    CREATE TABLE :h_table
    AS 
    SELECT   a.contributor_industry,
             a.period,
             a.contributor_reference,
             a.time,
             a.reason,
             DATE('') AS diary_date,
             CHAR(e.keyresp) AS key
    FROM     bto_unscored a,
             tt_view_forms b,
             contributor_period e
    WHERE    a.contributor_industry = b.industry
      AND    a.contributor_reference >= b.low_ref
      AND    a.contributor_reference <= b.high_ref
      AND    a.contributor_reference = e.contributor_reference
      AND    a.period = e.period
      AND    a.reason != 'Invalid Ref Line'
      AND    a.contributor_reference NOT IN 
           ( SELECT c.contributor
             FROM   bto_reference_acu c
             WHERE  c.contributor = a.contributor_reference
               AND  c.period = a.period 
               AND  c.actioned = 'N')
      AND    a.contributor_reference NOT IN 
           ( SELECT d.contributor_reference
             FROM   removed_contrib_period d
             WHERE  d.contributor_reference = a.contributor_reference
               AND  d.period = a.period); 

    UPDATE :h_table
    SET    key = 'Y'
    WHERE  key = 1;

    UPDATE :h_table
    SET    key = ' '
    WHERE  key = 0;

    h_return = CALLPROC check_inq_ing (
              h_num_row         = BYREF(no_forms),
              h_num_row_ck      = 1,
              h_commit          = 'Y',
              h_rollback        = 'N',
              h_retries         = :h_retries,
              h_retries_allowed = :h_retries_allowed,
              h_frpr_name       = :h_frpr_name);

    IF h_return != 7
    THEN
        h_retry_or_not = '';
    ENDIF;

    MODIFY :h_table TO BTREE 
        ON period, contributor_industry, contributor_reference, time;
    COMMIT;
   
  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'SYSTEM ERROR: Failed to populate table field. Error code 9. '
          + 'Please contact IM immediately.' WITH STYLE = POPUP;
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    MESSAGE 'NOTE: You do not have outstanding unscored forms to action.'
    WITH STYLE = POPUP;
    RETURN 1;
  ENDIF;

  MESSAGE 'Checking for diary dates . . .' WITH STYLE = POPUP;

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    UPDATE :h_table a
    FROM   contributor_diary b
    SET    diary_date = b.diary_date
    WHERE  a.contributor_reference = b.contributor_reference;

    h_return = CALLPROC check_inq_ing (
               h_num_row_ck      = 0,
               h_commit          = 'Y',
               h_rollback        = 'N',
               h_retries         = :h_retries,
               h_retries_allowed = :h_retries_allowed,
               h_frpr_name       = :h_frpr_name);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to update working table with diary dates. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.' 
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  msa_date = 'now';

  h_return = CALLPROC lp_display_data();

  IF h_return != 0
  THEN
    /* Error message handled in local procedure */
    RETURN :h_return;
  ENDIF;

  RETURN 0;

}

/*=======================================================================
    Local procedure to write to audit trail.
=======================================================================*/

PROCEDURE lp_write_to_audit_trail
        ( p_contributor_reference = CHAR(11)    NOT NULL WITH DEFAULT,
          p_question              = INTEGER4    NOT NULL WITH DEFAULT,
          p_period                = INTEGER4    NOT NULL WITH DEFAULT,
          p_code                  = INTEGER1    NOT NULL WITH DEFAULT,
          p_val_1                 = INTEGER4    NOT NULL WITH DEFAULT,
          p_val_2                 = INTEGER4    NOT NULL WITH DEFAULT,
          p_val_3                 = VARCHAR(20) NOT NULL WITH DEFAULT,
          p_frpr_name             = VARCHAR(36) NOT NULL WITH DEFAULT )=

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC write_to_audit_trail 
            ( p_contributor_reference = :p_contributor_reference, 
              p_question              = :p_question,
              p_period                = :p_period,
              p_code                  = :p_code, 
              p_val_1                 = :p_val_1,
              p_val_2                 = :p_val_2,
              p_val_3                 = :p_val_3,
              p_frpr_name             = :h_frpr_name);

  RETURN IFNULL(:lp_return,9);

}

/*--------------------------------------------------------------------------
  Local procedure to update diary date on working table and table field.
--------------------------------------------------------------------------*/

PROCEDURE lp_refresh_diary_date ( p_reference = CHAR(11) NOT NULL) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{
    /*------------------------------------------------------------------
       Get diary date
    ------------------------------------------------------------------*/

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        SELECT diary_date AS h_diary_date
        FROM   contributor_diary
        WHERE  contributor_reference = :p_reference;

        lp_return = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF lp_return != 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF lp_return > 1
    THEN
      MESSAGE 'System error in accessing contributor_diary'
      WITH STYLE = POPUP;
      RETURN 9;

    ELSEIF lp_return = 1
    THEN
        h_diary_date = '';

    ENDIF;

    /*------------------------------------------------------------------
       Update working table with new diary date
    ------------------------------------------------------------------*/

    MESSAGE 'Updating with diary date . . .';

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        UPDATE :h_table
        SET    diary_date = :h_diary_date
        WHERE  contributor_reference = :p_reference;

        lp_return = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF lp_return != 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF lp_return != 0
    THEN
        MESSAGE 'System error in updating ' + :h_table + ' with diary date'
        WITH STYLE = POPUP;
        RETURN 9;
    ENDIF;

    /*------------------------------------------------------------------
      Refresh tablefield.
    ------------------------------------------------------------------*/

  lp_return = CALLPROC lp_display_data();

  IF lp_return != 0
  THEN
    RETURN :lp_return;
  ENDIF;

  RETURN 0;

}

/*--------------------------------------------------------------------------
  Local procedure to refresh table field from working table.
--------------------------------------------------------------------------*/

PROCEDURE lp_display_data ( p_reference = CHAR(11) NOT NULL) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  INITTABLE tf READ;

  tf = 

  SELECT contributor_industry,
         period,
         contributor_reference,
         time,
         reason,
         diary_date,
         key
  FROM   :h_table;

  lp_return = CALLPROC check_inq_ing (
            h_num_row_ck      = 1,
            h_commit          = 'Y',
            h_rollback        = 'N',
            h_frpr_name       = :h_frpr_name);

  IF lp_return != 0
  THEN
    MESSAGE 'ERROR: Failed to refresh on screen data from working table. '
          + 'Error code ' +VARCHAR(:lp_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  REDISPLAY;

  RETURN 0; 

}

