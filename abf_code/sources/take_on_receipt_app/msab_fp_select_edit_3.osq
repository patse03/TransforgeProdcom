/*----------------------------------------------------------------------
  Preprocesses for msab_fr_select_edit_4.
----------------------------------------------------------------------*/

PROCEDURE msab_fp_select_edit_3 (

        p_reason              = CHAR(20) NOT NULL,
        contributor_reference = CHAR(11) NOT NULL,
        period                = INTEGER4 NOT NULL,
        contributor_industry  = INTEGER4 NOT NULL)=

DECLARE h_frpr_name        = CHAR(24) NOT NULL,
        h_output_category  = CHAR(1) NOT NULL,
        form_taken_on      = CHAR(1) NOT NULL,
        h_return            = INTEGER4 NOT NULL,
        temp_cqpv          = VARCHAR(20) NOT NULL,
        temp_del_aos       = VARCHAR(20) NOT NULL,
        add_name1          = VARCHAR(35) NOT NULL,
        prev_period        = INTEGER4 NOT NULL,
        alt_industry       = INTEGER4 NOT NULL,
        reref              = CHAR(1) NOT NULL,
        cmkr               = CHAR(1) NOT NULL,
        h_receipt_date     = DATE NOT NULL,
        h_correct_date     = DATE NOT NULL,
        h_cycle_point      = CHAR(2) NOT NULL,
        h_currency         = CHAR(1) NOT NULL,
        h_span_end         = INTEGER4 NOT NULL,
        register_emp       = INTEGER4 NOT NULL,
        h_load_contributor = CHAR(11) NOT NULL,
        h_idbr             = CHAR(11) NOT NULL,
        h_dummy            = CHAR(11) NOT NULL,
        country            = CHAR(2) NOT NULL,
        data_cont          = CHAR(4) NOT NULL,
        exchange_rate      = FLOAT8 NOT NULL,
        cont_link          = CHAR(4) NOT NULL,
        clink              = CHAR(1) NOT NULL,
        h_prompt            = CHAR(1) NOT NULL,
        h_keyresp          = INTEGER1 NOT NULL,
        h_key              = CHAR(3) NOT NULL,
        h_retries_allowed  = INTEGER1 NOT NULL,
        h_retries          = INTEGER1 NOT NULL,
        h_retry_or_not     = CHAR(5) NOT NULL,

        lp_full_error_check = PROCEDURE RETURNING INTEGER,

{
  h_retries_allowed = 3;
  h_frpr_name = 'msab_fp_take_on_form';

  reref = 'N';
  cmkr  = 'N';

  MESSAGE 'Checking Contributor Reference . . .';

  h_return = CALLPROC msa_fp_get_ref 
           ( h_dummy               = BYREF(:h_dummy),
             h_idbr                = BYREF(:h_idbr),
             contributor_reference = :contributor_reference);

  IF h_return != 0
  THEN
    RETURN 0;
  ENDIF;

  /*------------------------------------------------------------------
     Check existence on contributor_period
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT contributor_reference AS contributor_reference
    FROM   contributor_period
    WHERE  contributor_reference IN (:h_idbr,:h_dummy)
      AND  period = :period;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to access contributor_period. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    MESSAGE 'WARNING: Contributor has not been selected for ' 
          + VARCHAR(:period) +'.'
    WITH STYLE = POPUP;
    RETURN 0;

  ENDIF;

  h_return = CALLPROC msa_fp_prev_periods 
           ( inquiry      = 14,
             period       = :period,
             prev_period1 = BYREF(:prev_period));

  /*------------------------------------------------------------------
     Get span_end
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT span_end AS h_span_end
    FROM   inquiry
    WHERE  inquiry = 14;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return > 0
  THEN
    MESSAGE 'ERROR: Failed to select span_end from inquiry table. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;

  ENDIF;

  /*------------------------------------------------------------------
     Get cycle_point
  ------------------------------------------------------------------*/

  IF period = :h_span_end
  THEN

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      SELECT industry_cycle_point AS h_cycle_point
      FROM   industry
      WHERE  industry = :contributor_industry;

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return = 7
    THEN
      RETURN 7;

    ELSEIF h_return > 1
    THEN
      MESSAGE 'ERROR: Failed to select cycle_point from industry table. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN 9;

    ENDIF;


    IF h_cycle_point = 'A' 
    OR h_cycle_point = 'C' 
    OR h_cycle_point = 'Q'
    THEN
      MESSAGE 'WARNING: The forms for this year have not yet been sent out. ' 
            + 'Therefore its somewhat suprising that you have data to take on.'
      WITH STYLE = POPUP;
      RETURN 1;
    ENDIF;

  ENDIF;

  /*------------------------------------------------------------------
     Get Contributor Name
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT add_name1
    FROM   contributor
    WHERE  contributor_reference IN (:h_idbr,:h_dummy);

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to access contributor table. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    add_name1 := 'UNKNOWN';

  ENDIF;

  /*------------------------------------------------------------------
     Check Enforcement - and prevent enter/edit values
  ------------------------------------------------------------------*/

  h_return = CALLPROC msa_fp_latest_details 
           ( contributor_reference = :contributor_reference,
             output_category       = BYREF(:h_output_category));

  IF h_output_category = 'Y'
  THEN
    MESSAGE 'WARNING: This Contributor is in Enforcement.' + X'0d0d' 
          + 'Its values cannot be updated while it has an enforcement marker.'
    WITH STYLE = POPUP;
        RETURN 0;
  ENDIF;


  /*------------------------------------------------------------------
     Check if contributor has been re_referenced
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT contributor_reference
    FROM   reref_contributors
    WHERE  contributor_reference = :contributor_reference;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 0);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to access reref_contributors table. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    reref = 'Y';
    cmkr = 'Y';

  ENDIF;

   
  /*------------------------------------------------------------------
     Get Contributor Details
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT a.keyresp as h_keyresp,
           b.country,
           a.contributor_reference,
           a.period,
           a.contributor_industry,
           a.alt_industry,
           a.form_taken_on,
           a.register_emp,
           a.receipt_date AS h_receipt_date,
           a.correct_date AS h_correct_date,
           a.currency AS h_currency
    FROM   contributor_period a,
           region b
    WHERE  a.contributor_reference IN (:h_idbr,:h_dummy)
      AND  a.period                = :period
      AND  a.contributor_industry  = :contributor_industry
      AND  a.region = b.region;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to select from contributor_period table. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    MESSAGE 'WARNING: This Contributor was not selected for this Industry ' 
          + 'in this Period'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  IF h_keyresp = 1
  THEN
    h_key = 'KEY';
  ELSE
    h_key = '';
  ENDIF;

  /*------------------------------------------------------------------
    If it's a Euro form, display the message and get the exchange rate.
    If there is no available exchange rate, stop.
  ------------------------------------------------------------------*/

  IF :h_currency = 'E'
  THEN

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      SELECT euros AS exchange_rate
      FROM   euro_exchange_rate
      WHERE  period = :period
        AND  fixed = 'Y';

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return = 7
    THEN
      RETURN 7;

    ELSEIF h_return > 1
    THEN
      MESSAGE 'ERROR: Failed to select from euro_exchange_rate table. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN 9;

    ELSEIF h_return = 1
    THEN
      MESSAGE 'WARNING: This is a Euro form, but the exchange rate has not ' 
            + 'yet been fixed for the period ' + VARCHAR(:period) +'.'
      WITH STYLE = POPUP;
      RETURN 0;

    ENDIF;

  ENDIF;

  h_load_contributor = :contributor_reference;

  IF h_idbr != ''
  THEN
    contributor_reference = :h_idbr;
  ENDIF;

  /*---------------------------------------------------------------------------
    Highlight contrib and/or question links if data_continuity needs checking.
  ---------------------------------------------------------------------------*/

  IF reref = 'Y'
  THEN
    cont_link = 'CONT';
    data_cont = 'LINK';
  ELSE
    cont_link = '';
    data_cont = '';
  ENDIF;

  IF cmkr = 'Y'
  THEN
    clink = 'C';
  ELSE
    clink = '';
  ENDIF;

  /*------------------------------------------------------------------
    Prompt to receipt if not previously receipted.
  ------------------------------------------------------------------*/

  IF :h_receipt_date = ''
  THEN

    h_prompt = '';

    WHILE h_prompt != 'Y' AND h_prompt != 'N'
    DO
      h_prompt = PROMPT 'WARNING: This Contributor has not yet been '
                      + 'receipted for ' + VARCHAR(period) + '. ' +X'0D'
                      + '         Do you wish to receipt it [Y/N] ?'
                 WITH STYLE = POPUP;
      h_prompt = UPPER(:h_prompt);
    ENDWHILE;

    IF h_prompt = 'N'
    THEN
      RETURN 0;
    ENDIF;

     h_return = CALLPROC msab_fp_rec_form 
              ( p_contributor_reference = :contributor_reference,
                p_period                = :period);

     IF h_return != 0
     THEN
       RETURN h_return;
     ENDIF;

  ENDIF;

  /*------------------------------------------------------------------
    IF AUTO RECEIPTING NEEDS TO BE TURNED OFF, REPLACE THE ABOVE SECTION
    WITH THE FOLLOWING CODE.

    IF :h_receipt_date = ''
    THEN
        MESSAGE 'WARNING: No data can be taken on until this form has been '
              + 'receipted.'
        WITH STYLE = POPUP;
        RETURN 0;
    ENDIF;
  ------------------------------------------------------------------*/

  IF form_taken_on = 'N'
  THEN
    form_taken_on = 'O';
  ENDIF;

  MESSAGE 'Selecting Data . . .';

  temp_cqpv = 't_' + :contributor_reference;
  temp_del_aos = 't_' + :contributor_reference + '_del';

  h_return = CALLPROC msa_fp_drop_table(h_table = :temp_cqpv);

  IF h_return = 9
  THEN
    RETURN 9;
  ENDIF;

  h_return = CALLPROC msa_fp_drop_table(h_table = :temp_del_aos);

  IF h_return = 9
  THEN
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
      Create temporary CQPV table
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    CREATE TABLE :temp_cqpv 
               ( quest_order        INTEGER1     NOT NULL,
                 question           INTEGER4     NOT NULL,
                 acell              CHAR(2)      NOT NULL,
                 avalue             INTEGER4     NOT NULL,
                 evalue             INTEGER4     NOT NULL,
                 acell_type         CHAR(2)      NOT NULL,
                 rounded            CHAR(1)      NOT NULL,
                 se_mark            CHAR(1)      NOT NULL,
                 aconstruction_type INTEGER1     NOT NULL,
                 confirmation_code  CHAR(1)      NOT NULL,
                 question_industry  INTEGER4     NOT NULL WITH DEFAULT,
                 question_inquiry   INTEGER1     NOT NULL WITH DEFAULT,
                 update_type        CHAR(1)      NOT NULL WITH DEFAULT,
                 error_msg          VARCHAR(100) NOT NULL WITH DEFAULT,
	         atypical           CHAR(1)      NOT NULL WITH DEFAULT);

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to create ' +:temp_cqpv +'. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;

  ENDIF;

  /*------------------------------------------------------------------
      Create temporary deletion table
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    CREATE TABLE :temp_del_aos
               ( question           INTEGER4 NOT NULL,
                 avalue             INTEGER4 NOT NULL);

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to create ' +:temp_del_aos +'. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;

  ENDIF;

  /*------------------------------------------------------------------
    Load Codes
  ------------------------------------------------------------------*/

  MESSAGE 'Calling main screen . . .';

  h_return = CALLFRAME msab_fr_select_edit_4 
           ( p_reason               = :p_reason,
             contributor_reference  = :h_load_contributor,
             h_dummy                = :h_dummy,
             h_idbr                 = :h_idbr,
             add_name1              = :add_name1,
             country                = :country,
             key_disp               = :h_key,
             data_cont              = :data_cont,
             cont_link              = :cont_link,
             clink                  = :clink,
             period                 = :period,
             prev_period            = :prev_period,
             register_emp           = :register_emp,
             correct_date           = :h_correct_date,
             contributor_industry   = :contributor_industry,
             alt_industry           = :alt_industry,
             form_taken_on          = :form_taken_on,
             exchange_rate          = :exchange_rate,
             currency               = :h_currency,
             temp_del_aos           = :temp_del_aos,
             temp_cqpv              = :temp_cqpv);

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

  MESSAGE 'Exiting Take-On Screen . . .';

  h_return = CALLPROC msa_fp_drop_table(h_table = :temp_cqpv);

  IF h_return = 9
  THEN
    RETURN 9;
  ENDIF;

  h_return = CALLPROC msa_fp_drop_table(h_table = :temp_del_aos);

  IF h_return = 9
  THEN
    RETURN 9;
  ENDIF;

  RETURN 0;
}

/************************** LOCAL PROCEDURES ******************************/


/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing (
                  h_num_row_ck = :p_num_row_ck,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}

