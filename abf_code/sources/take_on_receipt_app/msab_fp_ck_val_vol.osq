/*-s--------------------------------------------------------------------
                      MSAB_FP_CK_VAL_VOL
     This procedure is called from msab_fr_extra_codes.osq.
     01 codes are examined to see if they have a corresponding 02 code.
--------------------------------------------------------------------e-*/

PROCEDURE msab_fp_ck_val_vol (

        h_question        = INTEGER4 NOT NULL,
        period            = INTEGER4 NOT NULL,
        question2_exists  = CHAR(1) NOT NULL,
        question4_exists  = CHAR(1) NOT NULL,
        question5_exists  = CHAR(1) NOT NULL,
        question6_exists  = CHAR(1) NOT NULL,
        question7_exists  = CHAR(1) NOT NULL,
        question8_exists  = CHAR(1) NOT NULL,
        q2_unit_1         = CHAR(20) NOT NULL,
        q4_unit_1         = CHAR(20) NOT NULL,
        q5_unit_1         = CHAR(20) NOT NULL,
        q6_unit_1         = CHAR(20) NOT NULL,
        q7_unit_1         = CHAR(20) NOT NULL,
        q8_unit_1         = CHAR(20) NOT NULL) =

DECLARE h_retries_allowed = INTEGER1 NOT NULL,
        h_retries         = INTEGER1 NOT NULL,
        h_retry_or_not    = CHAR(5) NOT NULL,
        h_frpr_name       = VARCHAR(24) NOT NULL,
        ret_val           = INTEGER1 NOT NULL,
        h_volume          = INTEGER4 NOT NULL,
        h_unit_1          = CHAR(20) NOT NULL,
        h_annual_period   = INTEGER4 NOT NULL
{
    h_frpr_name = 'msab_fp_ck_val_vol';
    h_retries_allowed = 3;

    h_annual_period = :period / 100 * 100;

    question2_exists = 'n';
    question4_exists = 'n';
    question5_exists = 'n';
    question6_exists = 'n';
    question7_exists = 'n';
    question8_exists = 'n';

    /*------------------------------------------------------------------
     Look for questions
    ------------------------------------------------------------------*/

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        SELECT question AS h_volume,
               unit_1 AS h_unit_1
        FROM   question_library
        WHERE  question IN (:h_question + 1,
                            :h_question + 3,
                            :h_question + 4,
                            :h_question + 5,
                            :h_question + 7)
        AND    period = :h_annual_period
        {
            IF MOD(h_volume,10) = 2
            THEN
                question2_exists = 'y';
                q2_unit_1 = h_unit_1;

            ELSEIF MOD(h_volume,10) = 4
            THEN
                question4_exists = 'y';
                q4_unit_1 = h_unit_1;

            ELSEIF MOD(h_volume,10) = 5
            THEN
                question5_exists = 'y';
                q5_unit_1 = h_unit_1;

            ELSEIF MOD(h_volume,10) = 6
            THEN
                question6_exists = 'y';
                q6_unit_1 = h_unit_1;

            ELSEIF MOD(h_volume,10) = 8
            THEN
                question8_exists = 'y';
                q8_unit_1 = h_unit_1;
            ENDIF;

        };

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in accessing question_library'
        WITH STYLE = POPUP;
        RETURN 9;

    ENDIF;

    RETURN 0;
}
