/*----------------------------------------------------------------------
Note the existence of a timeout for this frame, which is the
direct entry point to this application for ppiprod usernames.
----------------------------------------------------------------------*/

INITIALIZE () =

DECLARE h_retries_allowed = INTEGER1 NOT NULL,
        h_retries         = INTEGER1 NOT NULL,
        h_retry_or_not    = CHAR(5) NOT NULL,
        h_frpr_name       = VARCHAR(24) NOT NULL,
        h_table           = VARCHAR(24) NOT NULL,
        h_field_name      = VARCHAR(24) NOT NULL,
        h_return           = INTEGER1 NOT NULL,
        h_rows            = INTEGER4 NOT NULL,
        h_tf_rows         = INTEGER4 NOT NULL,
        q1                = INTEGER4 NOT NULL,
        q2                = INTEGER4 NOT NULL,
        q3                = INTEGER4 NOT NULL,
        q4                = INTEGER4 NOT NULL,
        yr1               = INTEGER4 NOT NULL,
        inquiry           = INTEGER1 NOT NULL,
        h_counter         = INTEGER4 NOT NULL,
        h_position        = INTEGER4 NOT NULL,
        h_prev_val        = INTEGER4 NOT NULL,
        h_params          = CHAR(18) NOT NULL,

{
  h_retries_allowed = 3;
  h_rows = 0;
  msa_date = 'now';
  h_frpr_name = 'msab_fr_quest_contribs';
  h_table = 'temp_top_contribs';

  SET_FORMS FIELD '' (MODE(tf) = 'READ');
  SET_FORMS FRS (TIMEOUT = :gc_other_timeout);
  SET_FORMS FRS (MAPFILE='/home/prodcom/admin/prodcom.map');

  SELECT DBMSINFO('username') AS g_user_id;
  SELECT DBMSINFO('database') AS g_database;

  /*----------------------------------------------------------------------
       Access check. (Error messages handled by procedure.)
  ----------------------------------------------------------------------*/
  
  h_return = CALLPROC check_access_frames (p_frpr_name = :h_frpr_name);

  IF h_return = 1 
  THEN
    RETURN 0;
  ELSEIF h_return > 1
  THEN
    RETURN 9;
  ENDIF;
  
    /*------------------------------------------------------------------
     Re-load user_name as this frame is a direct entry route to the
     application, missing the default starting frame and the setting
     up of the user_name variable. (Needed for quickview test at end)
    ------------------------------------------------------------------*/

    SET_FORMS FRS (TIMEOUT = :gc_other_timeout);

    SELECT DBMSINFO('database') AS g_database;
    SELECT user_name AS g_user_id FROM iidbconstants;

    IF g_user_id LIKE 'prod%'
    THEN
        h_return = CALLPROC msa_fp_get_user_details (
                  h_default_printer = BYREF(:g_printer),
                  h_access_level    = BYREF(:g_access_level),
                  h_user_name       = BYREF(:g_user_name));

        IF h_return != 0
        THEN
            RETURN h_return;
        ENDIF;
    ENDIF;
}

FIELD question =
{
    CLEAR FIELD tf, total, no_contribs;
    h_rows = 0;

    /*------------------------------------------------------------------
     Just check if question exists on question_library - regardless of
     which period
    ------------------------------------------------------------------*/

    MESSAGE 'Checking Question . . .';

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        SELECT question
        FROM   question_library
        WHERE  question = :question;

        h_return = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF h_return != 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF h_return = 7
    THEN
        RETURN 7;

    ELSEIF h_return = 9
    THEN
        MESSAGE 'System error in accessing question_library'
        WITH STYLE = POPUP;
        RETURN 9;

    ELSEIF h_return = 1
    THEN
        MESSAGE 'This question does not exist'
        WITH STYLE = POPUP;
        RESUME FIELD question;
    ENDIF;

    RESUME FIELD period;
}

FIELD period =
{
    CLEAR FIELD tf, total, no_contribs;
    h_rows = 0;

    MESSAGE 'Checking Period . . .';

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        SELECT inquiry
        FROM   question_period
        WHERE  period = :period
        AND    question = :question;

        h_return = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF h_return != 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF h_return = 7
    THEN
        RETURN 7;

    ELSEIF h_return = 9
    THEN
        MESSAGE 'System error in accessing question_period'
        WITH STYLE = POPUP;
        RETURN 9;

    ELSEIF h_return = 1
    THEN
        MESSAGE 'This question is not valid for this period'
        WITH STYLE = POPUP;
        RESUME FIELD period;
    ENDIF;

    /*------------------------------------------------------------------
      Get the data
    ------------------------------------------------------------------*/

    h_return = CALLPROC msa_fp_drop_table ( h_table = :h_table);

    IF h_return != 0
    THEN
        RETURN h_return;
    ENDIF;

    MESSAGE 'Selecting Data . . .';

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        IF inquiry = 14
        THEN
            /*----------------------------------------------------------
             Annual Question
            ----------------------------------------------------------*/

            q1 = :period + 3;
            q2 = :period + 6;
            q3 = :period + 9;
            q4 = :period + 12;
            yr1 = :period;

            CREATE TABLE :h_table
            AS SELECT    contributor_reference,
                         'A' AS inquiry,
                         avalue,
                         acell
            FROM         cqpv
            WHERE        contributor_inquiry = 14
            AND          question = :question
            AND          period = :yr1
            UNION
            SELECT       contributor_reference,
                         'SumQ' AS inquiry,
                         SUM(avalue) AS avalue,
                         '' AS acell
            FROM         cqpv
            WHERE        contributor_inquiry = 15
            AND          question = :question
            AND          period IN (:q1,:q2,:q3,:q4)
            GROUP BY     contributor_reference;

        ELSE
            /*----------------------------------------------------------
             Quarterly Question
            ----------------------------------------------------------*/

            q1 = :period;
            yr1 = :period / 100 * 100;

            CREATE TABLE :h_table
            AS SELECT    contributor_reference,
                         'A/4' AS inquiry,
                         avalue/4 AS avalue,
                         acell
            FROM         cqpv
            WHERE        contributor_inquiry = 14
            AND          question = :question
            AND          period = :yr1
            UNION
            SELECT       contributor_reference,
                         'Q' AS inquiry,
                         avalue,
                         acell
            FROM         cqpv
            WHERE        contributor_inquiry = 15
            AND          question = :question
            AND          period = :q1;
        ENDIF;

        h_return = CALLPROC check_inq_ing (
                  h_num_row         = BYREF(:no_contribs),
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF h_return != 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF h_return = 7
    THEN
        RETURN 7;

    ELSEIF h_return = 9
    THEN
        MESSAGE 'System error in accessing cqpv'
        WITH STYLE = POPUP;
        RETURN 9;

    ELSEIF h_return = 1
    THEN
        MESSAGE 'There is no Contributor Information for this question/period'
        WITH STYLE = POPUP;
        RESUME FIELD question;

    ENDIF;

    /*------------------------------------------------------------------
      Load up Total
    ------------------------------------------------------------------*/

    MESSAGE 'Selecting Summed Data . . .';

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        SELECT SUM(avalue) AS total
        FROM   :h_table;

        h_return = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF h_return != 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF h_return = 7
    THEN
        RETURN 7;

    ELSEIF h_return = 9
    THEN
        MESSAGE 'System error in accessing cqpv summed'
        WITH STYLE = POPUP;
        RETURN 9;

    ENDIF;

    /*------------------------------------------------------------------
      Load Screen
    ------------------------------------------------------------------*/

    MESSAGE 'Selecting to Screen . . .';

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        tf =

        SELECT   contributor_reference,
                 inquiry,
                 avalue,
                 acell,
                 (avalue * 100.0 / :total) AS percentage
        FROM     :h_table
        ORDER BY avalue DESC;

        h_return = CALLPROC check_inq_ing (
                  h_num_row         = BYREF(:h_rows),
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF h_return != 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF h_return = 7
    THEN
        RETURN 7;

    ELSEIF h_return = 9
    THEN
        MESSAGE 'System error in loading from ' + :h_table
        WITH STYLE = POPUP;
        RETURN 9;

    ELSEIF h_return = 1
    THEN
        MESSAGE 'No rows loaded from ' + :h_table
        WITH STYLE = POPUP;
        RETURN 9;
    ENDIF;

    /*------------------------------------------------------------------
      Add positions to the display
    ------------------------------------------------------------------*/

    h_counter = 1;
    h_position = 1;
    h_prev_val = 999999999;

    UNLOADTABLE tf
    {
        IF :tf.avalue != :h_prev_val
        THEN
            h_position = :h_counter;
        ENDIF;

        tf.position = :h_position;
        h_counter = :h_counter + 1;
        h_prev_val = :tf.avalue;
    };

    RESUME FIELD tf;

}

'Help', KEY FRSKEY1 =
{
    HELP_FORMS(SUBJECT = 'HELP',
               FILE = :g_help + '/' + :h_frpr_name + '.hlp');

}

'Clear', KEY FRSKEY4 =
{
    CLEAR FIELD ALL;
    h_rows = 0;
    msa_date = 'now';
    RESUME FIELD question;
}

'Print', KEY FRSKEY5 =
{
    IF :g_user_id NOT LIKE 'pr%'
    THEN
        MESSAGE 'Sorry, but this option is only available for' +
                ' PRODCOM staff'
        WITH STYLE = POPUP;
        RESUME;
    ENDIF;

    IF h_rows = 0
    THEN
        MESSAGE 'Nothing to Print'
        WITH STYLE = POPUP;
        RESUME;
    ENDIF;

    MESSAGE 'Preparing Report . . .';
    msa_date = 'now';

    h_return = CALLPROC msa_cp_callsys (
              'report ' +
              :g_database +
              ' ''(h_table = "' + :h_table + '"' +
              ',user_name = "' + :g_user_name + '"' +
              ',question = ' + VARCHAR(:question) +
              ',total = ' + VARCHAR(:total) +
              ',period = ' + VARCHAR(:period) +
              ')'' -i$REPORTS/msab_rw_quest_contrib.rw' +
              ' > report.output 2> report.output');

    IF h_return != 0
    THEN
        MESSAGE 'Error producing report'
        WITH STYLE = POPUP;
    ELSE
        /*--------------------------------------------------------------
         Remove last line - so a blank end page is not printed
        --------------------------------------------------------------*/

        h_return = CALLPROC msa_cp_callsys (
              'lines=`wc -l < msab_rw_quest_contrib.rpt`;' +
              'lines=`expr ${lines} - 1`;' +
              'head -${lines} msab_rw_quest_contrib.rpt | ' +
              'lp -o12p -d' + :g_printer +
              ' >> report.output 2>> report.output');

        IF h_return != 0
        THEN
            MESSAGE 'Error sending report to printer ' +
                    :g_printer
            WITH STYLE = POPUP;
        ELSE
            MESSAGE 'Report sent to printer ' +
                    :g_printer + ' OK'
            WITH STYLE = POPUP;
        ENDIF;
    ENDIF;
}

'Contributor Info', KEY FRSKEY6 =
{
    INQUIRE_FORMS FORM (h_field_name = FIELD);

    IF :h_field_name != 'tf'
    THEN
        MESSAGE 'Please highlight the required Contributor'
        WITH STYLE = POPUP;
        RESUME;
    ENDIF;

  INQUIRE_FORMS TABLE '' (h_rows = DATAROWS(tf));

  IF h_rows = 0
  THEN
    MESSAGE 'Please highlight a Contributor.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  h_params = VARCHAR(:period) +' ' +VARCHAR(:tf.contributor_reference);

  SELECT DBMSINFO('username') AS g_user_id;

  IF g_user_id = 'produser'
  OR g_user_id = 'prodlive'
  THEN
    MESSAGE 'DEBUG: period = {' +VARCHAR(:period) +'}' +X'0D'
          + '       conref = {' +VARCHAR(:tf.contributor_reference) +'}' +X'0D'
          + '       params = {' +VARCHAR(:h_params) +'}' 
    WITH STYLE = POPUP;
  ENDIF;

  CALL APPLICATION(exec='$IMAGES/despatch_app msaeb_fr_desp_contrib',
                   param=:h_params);

  msa_date = 'now';

}

'ContributorData', KEY FRSKEY7 =
{
    IF :g_user_id NOT LIKE 'pr%'
    THEN
        MESSAGE 'Sorry, but this option is only available for' +
                ' PRODCOM staff'
        WITH STYLE = POPUP;
        RESUME;
    ENDIF;

    INQUIRE_FORMS FORM (h_field_name = FIELD);

    IF :h_field_name != 'tf'
    THEN
        MESSAGE 'Please highlight the required Contributor'
        WITH STYLE = POPUP;
        RESUME;
    ENDIF;

    INQUIRE_FORMS TABLE '' (h_tf_rows = DATAROWS(tf));

    IF :h_tf_rows = 0
    THEN
        MESSAGE 'Please highlight the required Contributor'
        WITH STYLE = POPUP;
        RESUME;
    ENDIF;

    CALL APPLICATION (
           exec = '$IMAGES/online_cont_sel_app msafd_fr_in_contper',
           param = VARCHAR(:tf.contributor_reference) + ' ' +
                   VARCHAR(:period));
}

'End', KEY FRSKEY14 =
{
    MESSAGE 'Exiting Screen . . .';
    h_return = CALLPROC msa_fp_drop_table ( h_table = :h_table);
    RETURN 0;
}

/*----------------------------------------------------------------------
 TIMEOUT activation
----------------------------------------------------------------------*/

ON TIMEOUT =
{
    IF :g_user_id NOT LIKE 'pr%'
    THEN
        h_return = CALLPROC msa_fp_drop_table ( h_table = :h_table);
        EXIT;
    ENDIF;
}
