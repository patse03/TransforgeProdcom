INITIALIZE (

        question          = INTEGER4 NOT NULL,
        period            = INTEGER4 NOT NULL) =

DECLARE h_retries_allowed = INTEGER1 NOT NULL,
        h_retries         = INTEGER1 NOT NULL,
        h_retry_or_not    = CHAR(5) NOT NULL,
        h_frpr_name       = VARCHAR(24) NOT NULL,
        h_record          = INTEGER4 NOT NULL,
        h_base_question   = INTEGER4 NOT NULL,
        alt_question1     = INTEGER4 NOT NULL,
        alt_question2     = INTEGER4 NOT NULL,
        ret_val           = INTEGER1 NOT NULL

{
    h_retries_allowed = 3;
    h_frpr_name = 'msab_fr_agg_unit_values2';

    SET_FORMS FIELD '' (MODE(tf) = 'READ');

    MESSAGE 'Selecting Aggregate Data . . .';

    /*-s----------------------------------------------------------------
     Find alternatives for the 01 question
    ----------------------------------------------------------------e-*/

    h_base_question = :question / 10 * 10 + 1;

    ret_val = CALLPROC msab_fp_old_questions (
              question      = :h_base_question,
              alt_question1 = BYREF(:alt_question1),
              alt_question2 = BYREF(:alt_question2));

    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        tf =

        SELECT   a.question,
                 a.period,
                 1000.0 * a.total_value / b.total_value AS uv02,
                 1000.0 * a.total_value / c.total_value AS uv04
        FROM     question_period a,
                 question_period b,
                 question_period c
        WHERE    a.question IN (:h_base_question, :alt_question1, 
                                :alt_question2)
        AND      a.question + 1 = b.question
        AND      a.question + 3 = c.question
        AND      a.period = b.period
        AND      b.period = c.period
        ORDER BY period DESC;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in accessing question_period'
        WITH STYLE = POPUP;
        RETURN 9;

    ELSEIF ret_val = 1
    THEN
        MESSAGE 'No aggregate Unit Value data could be found'
        WITH STYLE = POPUP;
        RETURN 0;
    ENDIF;

    UNLOADTABLE tf (h_record = _RECORD)
    {
         IF :tf.period = :period
         THEN
             SCROLL tf TO :h_record;
             RESUME FIELD tf;
         ENDIF;
    };
}

'Help', KEY FRSKEY1 =
{
    HELP_FORMS(SUBJECT = 'HELP',
               FILE = :g_help + '/' + :h_frpr_name + '.hlp');

}

'End', KEY FRSKEY14 =
{
    RETURN 0;
}
