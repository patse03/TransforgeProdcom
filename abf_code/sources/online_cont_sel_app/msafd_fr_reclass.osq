INITIALIZE () =

DECLARE  
  h_count_period      = INTEGER4     WITH NULL,
  h_hold_ref          = VARCHAR(11)  NOT NULL WITH DEFAULT,
  h_title             = VARCHAR(63)  NOT NULL WITH DEFAULT,
  h_message           = VARCHAR(200) NOT NULL WITH DEFAULT,
  h_prompt_ref        = VARCHAR(11)  NOT NULL WITH DEFAULT,
  h_contributors      = INTEGER4     NOT NULL WITH DEFAULT,
  h_on_record         = INTEGER4     NOT NULL WITH DEFAULT,
  h_record            = INTEGER4     NOT NULL WITH DEFAULT, 
  h_retries           = INTEGER1     NOT NULL WITH DEFAULT,
  h_retries_allowed   = INTEGER1     NOT NULL WITH DEFAULT,
  h_retry_or_not      = CHAR(5)      NOT NULL WITH DEFAULT,
  h_frpr_name         = VARCHAR(24)  NOT NULL WITH DEFAULT,
  h_return	      = INTEGER4     NOT NULL WITH DEFAULT,
  h_field_name        = VARCHAR(24)  NOT NULL WITH DEFAULT,
  h_rows              = INTEGER4     NOT NULL WITH DEFAULT,
  h_prompt            = CHAR(1)      NOT NULL WITH DEFAULT,
  h_rejected	      = CHAR(1)      NOT NULL WITH DEFAULT,
  h_period	      = INTEGER4     NOT NULL WITH DEFAULT,
  h_max_period	      = INTEGER4     NOT NULL WITH DEFAULT,
  h_min_period	      = INTEGER4     NOT NULL WITH DEFAULT,
  h_scope             = INTEGER1     NOT NULL WITH DEFAULT,

  lp_load_table          = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,
  lp_load_rejects        = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,
  lp_set_form_status     = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,
  lp_full_error_check    = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,

{

  SELECT DBMSINFO('username') AS g_user_id;
  SELECT DBMSINFO('database') AS g_database;

  SET_FORMS FRS (MAPFILE='/home/prodcom/admin/prodcom.map');

  SET_FORMS FIELD '' (MODE(tf) = 'READ');

  msa_date = 'now';
  h_frpr_name = 'msafd_fr_reclass';
  h_retries_allowed   = 3;

  /*----------------------------------------------------------------------
       Access check. (Error messages handled by procedure.)
  ----------------------------------------------------------------------*/
  
  h_return = CALLPROC check_access_frames (p_frpr_name = :h_frpr_name);

  IF h_return = 1 
  THEN
    RETURN 0;
  ELSEIF h_return > 1
  THEN
    RETURN 9;
  ENDIF;
  
  /*----------------------------------------------------------------------
      Set current, max and min periods. This replaced the sql
      that was necessary for quarterly. 
  ----------------------------------------------------------------------*/

  h_period = (INTEGER(DATE_PART('year',DATE('now')))*100)-100;
  h_max_period = :h_period; 
  h_min_period = :h_period - 200;

  /*----------------------------------------------------------------------
      initial population of table field.
  ----------------------------------------------------------------------*/

  h_rejected = 'N';

  h_return = CALLPROC lp_load_table;	

  IF h_return != 0
  THEN
    /* Error message handled in local procedure */
    RETURN :h_return;
  ENDIF;

}

/**************************** KEY ACTIVATIONS *****************************/

'Find', KEY FRSKEY4 =
{
  h_message = 'Type (start of) reference and press <return>';

  IF h_hold_ref != ''
  THEN
    h_message = h_message + X'0D' 
              + 'or just press <return> to go to the next ' 
              + 'form whose reference starts with ' 
              + VARCHAR(h_hold_ref) +'.';
  ENDIF;

  h_prompt_ref = PROMPT h_message WITH STYLE = POPUP;

  IF h_prompt_ref = '' AND h_hold_ref != ''
  THEN
    h_prompt_ref = h_hold_ref;
    h_on_record = :tf._record;
  ELSE
    h_on_record = 0;
  ENDIF;

  h_hold_ref = h_prompt_ref;

  UNLOADTABLE tf (h_record = _record)
  BEGIN
    IF h_record > h_on_record
    THEN
      IF LEFT(VARCHAR(tf.contributor_reference),
              LENGTH(h_prompt_ref)) = :h_prompt_ref
      THEN
        SCROLL tf TO h_record;
        RESUME;
      ENDIF;
    ENDIF;
  END;
}

'Prev', KEY FRSKEY5 =
{
  IF h_period <= h_min_period 
  THEN

    MESSAGE 'WARNING: You can only view the previous two periods. '
          + 'If you need to view earlier data, please contact IM.'
    WITH STYLE = POPUP;

  ELSE

    h_period = h_period - 100;

    IF h_rejected = 'N'
    THEN
      h_return = CALLPROC lp_load_table;	
    ELSE 
        h_return = CALLPROC lp_load_rejects;
    ENDIF;
  ENDIF;
}

'Next', KEY FRSKEY6 =
{
  IF h_period >= h_max_period 
  THEN

    MESSAGE 'WARNING: Without a crystal ball, we cannot see into the future!'
    WITH STYLE = POPUP;

  ELSE

    h_period = h_period + 100;

    IF h_rejected = 'N' 
    THEN 
      h_return = CALLPROC lp_load_table;	
    ELSE
      h_return = CALLPROC lp_load_rejects;
    ENDIF;
  ENDIF;	
}

'Switch', KEY FRSKEY8 =
{
  IF h_rejected = 'Y'
  THEN
    h_rejected = 'N';
  ELSE
    h_rejected = 'Y';
  ENDIF;

  IF h_rejected = 'N'
  THEN
    h_return = CALLPROC lp_load_table;	
  ELSE 
    h_return = CALLPROC lp_load_rejects;
  ENDIF;
}

/*--------------------------------------------------------------------
 Reject the Reclassification
--------------------------------------------------------------------*/

'Reject', KEY FRSKEY11 =
{

  INQUIRE_FORMS FORM (h_field_name = FIELD);

  IF :h_field_name != 'tf'
  THEN
    MESSAGE 'WARNING: Please highlight the contributor you want to action.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  INQUIRE_FORMS TABLE '' (h_rows = DATAROWS(tf));

  IF :h_rows = 0
  THEN
    MESSAGE 'WARNING: Please highlight the contributor you want to action.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  IF tf.action != 'NON PROD'
  THEN
    MESSAGE 'WARNING: This option can only be used on "NON PROD" forms. '
          + 'All standard reclasses must be actioned via the normal '
          + 'take-on screens.' 
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  msa_date = 'now';

  h_prompt = '';

  WHILE h_prompt != 'y' AND h_prompt != 'n'
  DO
    h_prompt = PROMPT 'WARNING: Please confirm that you wish to reject the '
                    + 'reclassification proposal for this contributor [Y/N] :'
               WITH STYLE = POPUP;

    h_prompt = LOWERCASE(h_prompt);

  ENDWHILE;

  IF h_prompt = 'n'
  THEN
    RESUME FIELD tf;
  ENDIF;

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    UPDATE reclass_contrib
    SET    action                = 'NOT PROPOSED',
           action_date           = 'now',
           user_id               = :g_user_id
    WHERE  contributor_reference = :tf.contributor_reference
      AND  period                = :tf.period;

    h_return = CALLPROC lp_full_error_check ( p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to update rejection for contributor ' 
          + VARCHAR(:tf.contributor_reference) +' on reclass_contrib. ' 
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
        WITH STYLE = POPUP;
    RETURN :h_return;
  ENDIF;

  h_return = CALLPROC lp_set_form_status ();
  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

  h_return = CALLPROC lp_load_table();

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

}

'End', KEY FRSKEY14 =
{
    RETURN 0;
}

/************************ LOCAL PROCEDURES ******************************/

/*======================================================================
     Local procedure to populate table with active states
======================================================================*/

PROCEDURE lp_load_table =

DECLARE    lp_return          = INTEGER4 NOT NULL WITH DEFAULT,

{
  MESSAGE 'Selecting Reclassifications . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    /*---------------------------------------------------
              Scope 3
    ----------------------------------------------------*/

    IF :g_user_level = 5
    OR :g_user_class = 'D'
    THEN
      h_scope = 3;
      tf = SELECT    contributor_reference,
                     period,
                     current_ind,
                     proposed_ind,
                     action,
                     action_date
           FROM      reclass_contrib
	   WHERE     period = :h_period
	     AND     action NOT IN ('REJECTED','NOT PROPOSED')
           ORDER BY  current_ind,
                     contributor_reference,
                     period;

    /*---------------------------------------------------
             Scope 2
    ----------------------------------------------------*/

    ELSEIF :g_access_code = 'I4'
    THEN

      h_scope = 2;

      tf = 

      SELECT contributor_reference,
             period,
             current_ind,
             proposed_ind,
             action,
             action_date
      FROM   reclass_contrib
      WHERE  period = :h_period
        AND  action NOT IN ('REJECTED','NOT PROPOSED')
        AND  ((current_ind/10)*10) IN
             ( SELECT DISTINCT b.industry
               FROM   analyst_coordinator_manager a,
                      industry_analysts b
               WHERE  a.analyst_id     = b.user_id
                 AND  ( a.coordinator_id = :g_user_id OR
                        a.coordinator_id =
                        ( SELECT c.id_two
                          FROM   job_share c
                          WHERE  c.id_one  = :g_user_id)))
        ORDER BY current_ind,
                 contributor_reference,
                 period;

    /*---------------------------------------------------
              Scope 1
    ----------------------------------------------------*/

    ELSEIF :g_access_code = 'I3'
    THEN
      h_scope = 1;
      tf = SELECT    contributor_reference,
                     period,
                     current_ind,
                     proposed_ind,
                     action,
                     action_date
           FROM      reclass_contrib
           WHERE     ((current_ind/10)*10) IN 
                               ( SELECT industry
                                 FROM   industry_analysts
                                 WHERE  user_id = :g_user_id)
             AND     contributor_reference >= 
                               ( SELECT low_ref 
                                 FROM   industry_analysts
                                 WHERE  user_id = :g_user_id
                                   AND  industry = ((current_ind/10)*10))
              AND     contributor_reference <= 
                              ( SELECT high_ref 
                                FROM   industry_analysts
                                WHERE  user_id = :g_user_id
                                  AND  industry = ((current_ind/10)*10))
              AND     period = :h_period
              AND     action IN ('NON PROD','WAITING')
         ORDER BY     current_ind,
                      contributor_reference,
                      period;

    ENDIF;

    lp_return = CALLPROC check_inq_ing 
              ( h_num_row         = BYREF(:h_contributors),
                h_num_row_ck      = 1,
                h_commit          = 'Y',
                h_rollback        = 'N',
                h_retries         = :h_retries,
                h_retries_allowed = :h_retries_allowed,
                h_frpr_name       = :h_frpr_name);

    IF lp_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF lp_return > 1
  THEN
    MESSAGE 'ERROR: Failed to populate table field with actives for scope '
          + VARCHAR(:h_scope) + '. Error code 9. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  h_title = VARCHAR(:h_contributors)
          +' CONTRIBUTORS PROPOSED FOR RECLASSIFICATION';
  s_title = SHIFT(:h_title, (((63-LENGTH(h_title))/2)*1));

}

/*======================================================================
     Local procedure to populate table with rejected states
======================================================================*/

PROCEDURE lp_load_rejects =

DECLARE    lp_return          = INTEGER4 NOT NULL WITH DEFAULT,

{
  MESSAGE 'Selecting Reclassifications . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    /*---------------------------------------------------
              Scope 3
    ----------------------------------------------------*/

    IF :g_user_level = 5
    OR :g_user_class = 'D'
    THEN
      h_scope = 3;
      tf = SELECT    contributor_reference,
                     period,
                     current_ind,
                     proposed_ind,
                     action,
                     action_date
           FROM      reclass_contrib
           WHERE     period = :h_period
	     AND     action IN ('REJECTED','NOT PROPOSED')
           ORDER BY  current_ind,
                     contributor_reference,
                     period;

    /*---------------------------------------------------
             Scope 2
    ----------------------------------------------------*/

    ELSEIF :g_access_code = 'I4'
    THEN
      h_scope = 2;
      tf = SELECT    contributor_reference,
                     period,
                     current_ind,
                     proposed_ind,
                     action,
                     action_date
           FROM      reclass_contrib
           WHERE     ((current_ind/10)*10) IN
                               ( SELECT b.industry
                                 FROM   analyst_coordinator_manager a,
                                        industry_staff b
                                 WHERE  a.coordinator_id = :g_user_id
                                   AND  a.analyst_id     = b.user_id)
	     AND period = :h_period
	     AND action IN ('REJECTED','NOT PROPOSED')
        ORDER BY current_ind,
                 contributor_reference,
                 period;

   /*---------------------------------------------------
              Scope 1
   ----------------------------------------------------*/

    ELSEIF :g_access_code = 'I3'
    THEN
      MESSAGE 'WARNING: This action is only available to management.'
      WITH STYLE = POPUP;
      h_rejected = 'N';
      RETURN 0;
    ENDIF;

    lp_return = CALLPROC check_inq_ing (
              h_num_row         = BYREF(:h_contributors),
              h_num_row_ck      = 1,
              h_commit          = 'Y',
              h_rollback        = 'N',
              h_retries         = :h_retries,
              h_retries_allowed = :h_retries_allowed,
              h_frpr_name       = :h_frpr_name);

    IF lp_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF lp_return > 1
  THEN
    MESSAGE 'ERROR: Failed to populate table field with rejects for scope '
          + VARCHAR(:h_scope) + '. Error code 9. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  h_title = VARCHAR(:h_contributors)
          +' CONTRIBUTORS WITH REJECTED PROPOSALS';
  s_title = SHIFT(:h_title, (((63-LENGTH(h_title))/2)*1));

}

/*==========================================================================
    Local procedure to update status on contributor period.
==========================================================================*/
PROCEDURE lp_set_form_status () =

DECLARE   lp_return = INTEGER2 NOT NULL WITH DEFAULT,

{

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    UPDATE contributor_period a
    FROM   inquiry_period b
    SET    correct_date            = 'today',
           corr_week_no            = b.week_no,
           form_status             = 4
    WHERE  a.contributor_reference = :tf.contributor_reference
    AND    a.period                = :tf.period
    AND    a.period                = b.period;

    lp_return = CALLPROC lp_full_error_check ( p_num_row_ck = 1);

    IF lp_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF lp_return = 7
  THEN
    RETURN 7;

  ELSEIF lp_return > 1
  THEN
    MESSAGE 'ERROR: Failed to update form_status for contributor ' 
          + VARCHAR(:tf.contributor_reference) +' on contributor_period. ' 
          + 'Error code ' +VARCHAR(:lp_return) +'. '
          + 'Please contact IM immediately.'
        WITH STYLE = POPUP;
    RETURN :lp_return;
  ENDIF;


  /*------------------------------------------------------------------
    If this is the first time the form was cleared, mark it.
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    UPDATE contributor_period
    SET    user_id = :g_user_id
    WHERE  contributor_reference = :tf.contributor_reference
      AND  period = :tf.period
      AND  user_id = '';

    lp_return = CALLPROC lp_full_error_check ( p_num_row_ck = 1);

    IF lp_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF lp_return = 7
  THEN
    RETURN 7;

  ELSEIF lp_return > 1
  THEN
    MESSAGE 'ERROR: Failed to update user_id for contributor ' 
          + VARCHAR(:tf.contributor_reference) +' on contributor_period. ' 
          + 'Error code ' +VARCHAR(:lp_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;

  ENDIF;

  RETURN 0;
}


/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing (
                  h_num_row_ck = :p_num_row_ck,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}

