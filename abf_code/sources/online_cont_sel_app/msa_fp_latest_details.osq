/*----------------------------------------------------------------------
 Finds details for a Contributor for the most recent period it was
 selected for (which may not be the latest data period).

 Returns 1 if contributor was never selected.

 Assumes contributor reference validated against contributor table
 before call to this procedure. 
----------------------------------------------------------------------*/

PROCEDURE msa_fp_latest_details (

  p_contributor_reference = CHAR(11)    NOT NULL WITH DEFAULT,
  p_enterprise            = CHAR(10)    NOT NULL WITH DEFAULT,
  p_contributor_industry  = INTEGER4    NOT NULL WITH DEFAULT,
  p_region                = CHAR(2)     NOT NULL WITH DEFAULT,
  p_output_category       = CHAR(1)     NOT NULL WITH DEFAULT,
  p_inquiry               = INTEGER1    NOT NULL WITH DEFAULT,
  p_keyresp               = INTEGER1    NOT NULL WITH DEFAULT,
  p_legal_status          = INTEGER1    NOT NULL WITH DEFAULT,
  p_currency              = CHAR(1)     NOT NULL WITH DEFAULT,
  p_period                = INTEGER4    NOT NULL WITH DEFAULT) =

DECLARE 

  h_retries_allowed       = INTEGER1    NOT NULL WITH DEFAULT,
  h_retries               = INTEGER1    NOT NULL WITH DEFAULT,
  h_retry_or_not          = CHAR(5)     NOT NULL WITH DEFAULT,
  h_frpr_name             = VARCHAR(24) NOT NULL WITH DEFAULT,
  h_return                = INTEGER1    NOT NULL WITH DEFAULT,

  lp_full_error_check = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,

{

  /*------------------------------------------------------------------
    If contributor reference not received, call foul!
  ------------------------------------------------------------------*/

  IF p_contributor_reference = ''
  THEN
    MESSAGE 'ERROR: Contributor reference parameter not passed to '
          + 'procedure msa_fp_get_latest_details. '
          + 'Please contact IM immediately.'  
    WITH STYLE = POPUP;      
    RETURN 9;
  ENDIF;
 
  h_frpr_name = 'msa_fp_latest_details';
  h_retries_allowed = 3;

  /*------------------------------------------------------------------
    Because you're selecting into simple fields (not table fields), 
    the order descending ensures you only get the latest selected 
    period's details back, even though more than one row may be found.
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT region               AS p_region,
           output_category      AS p_output_category,
           contributor_industry AS p_contributor_industry,
           period               AS p_period,
           enterprise           AS p_enterprise,
           keyresp              AS p_keyresp,
           legal_status         AS p_legal_status,
           currency             AS p_currency
    FROM   contributor_period
    WHERE  contributor_reference = :p_contributor_reference
    ORDER BY period DESC;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 1
  THEN
    RETURN 1;
  ELSEIF h_return > 1 
  THEN
    MESSAGE 'ERROR: Failed to select from contributor_period table. '
          + 'Error code ' +VARCHAR(:h_return) + '. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  RETURN 0;

}

/************************* LOCAL PROCEDURES ****************************/


/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing 
            ( h_num_row_ck = :p_num_row_ck,
              h_commit          = 'Y',
              h_rollback        = 'N',
              h_retries         = :h_retries,
              h_retries_allowed = :h_retries_allowed,
              h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}

