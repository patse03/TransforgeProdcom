/*****************************************************************************

    Frame to create contributor local units.

    JUNE 2013 - DF - Reworked in line with new procedures and standards.

*****************************************************************************/

INITIALIZE () =

DECLARE 
  h_retries_allowed       = INTEGER1     NOT NULL,
  h_retries               = INTEGER1     NOT NULL,
  h_retry_or_not          = CHAR(5)      NOT NULL,
  h_frpr_name             = VARCHAR(24)  NOT NULL,
  h_dummy                 = CHAR(11)     NOT NULL,
  h_region                = CHAR(2)      NOT NULL,
  h_keyresp               = INTEGER1     NOT NULL,
  h_output_category       = CHAR(1)      NOT NULL,
  h_contributor_reference = CHAR(11)     NOT NULL,
  h_reg_emp               = INTEGER4     NOT NULL,
  h_sum_regemp            = INTEGER4     NOT NULL,
  h_min_period            = INTEGER4     NOT NULL,
  h_structure             = CHAR(1)      NOT NULL,
  h_yesno                 = CHAR(1)      NOT NULL,
  h_return                 = INTEGER1     NOT NULL,
  h_inquiry               = INTEGER1     NOT NULL,
  h_display               = INTEGER1     NOT NULL,
  h_param_list            = VARCHAR(100) NOT NULL,
  h_param1                = CHAR(11)     NOT NULL,
  h_param2                = CHAR(10)     NOT NULL,
  h_varchar_variable      = VARCHAR(100) NOT NULL,
  h_integer_variable      = INTEGER2     NOT NULL,

  lp_check_reference      = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,
  lp_full_error_check     = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,

{
  msa_date = 'now';
  h_retries_allowed = 3;
  h_frpr_name = 'msafd_fr_cr_cont_lu';

  SET_FORMS FRS (MAPFILE='/home/prodcom/admin/prodcom.map');

  s_enforcement = 'UNDER ENFORCEMENT';
  s_key         = 'KEY';

  SET_FORMS FIELD '' (INVISIBLE  (s_enforcement) = 1,
                      INVISIBLE  (s_country) = 1,
                      INVISIBLE  (s_key) = 1,

                      DISPLAYONLY(s_period) = 0,
                      UNDERLINE  (s_period) = 1,
                      REVERSE    (s_period) = 0,

                      DISPLAYONLY(s_contributor_reference) = 0,
                      UNDERLINE  (s_contributor_reference) = 1,
                      REVERSE    (s_contributor_reference) = 0,

                      DISPLAYONLY(s_lu_reference) = 1,
                      UNDERLINE  (s_lu_reference) = 0,
                      REVERSE    (s_lu_reference) = 1,

                      DISPLAYONLY(s_lu_name1) = 1,
                      UNDERLINE  (s_lu_name1) = 0,
                      REVERSE    (s_lu_name1) = 1,

                      DISPLAYONLY(s_lu_name2) = 1,
                      UNDERLINE  (s_lu_name2) = 0,
                      REVERSE    (s_lu_name2) = 1,

                      DISPLAYONLY(s_lu_name3) = 1,
                      UNDERLINE  (s_lu_name3) = 0,
                      REVERSE    (s_lu_name3) = 1,

                      DISPLAYONLY(s_lu_addr1) = 1,
                      UNDERLINE  (s_lu_addr1) = 0,
                      REVERSE    (s_lu_addr1) = 1,

                      DISPLAYONLY(s_lu_addr2) = 1,
                      UNDERLINE  (s_lu_addr2) = 0,
                      REVERSE    (s_lu_addr2) = 1,

                      DISPLAYONLY(s_lu_addr3) = 1,
                      UNDERLINE  (s_lu_addr3) = 0,
                      REVERSE    (s_lu_addr3) = 1,

                      DISPLAYONLY(s_lu_addr4) = 1,
                      UNDERLINE  (s_lu_addr4) = 0,
                      REVERSE    (s_lu_addr4) = 1,

                      DISPLAYONLY(s_lu_addr5) = 1,
                      UNDERLINE  (s_lu_addr5) = 0,
                      REVERSE    (s_lu_addr5) = 1,

                      DISPLAYONLY(s_lu_postcode) = 1,
                      UNDERLINE  (s_lu_postcode) = 0,
                      REVERSE    (s_lu_postcode) = 1,

                      DISPLAYONLY(s_lu_reg_emp) = 1,
                      UNDERLINE  (s_lu_reg_emp) = 0,
                      REVERSE    (s_lu_reg_emp) = 1,

                      DISPLAYONLY(s_lu_region) = 1,
                      UNDERLINE  (s_lu_region) = 0,
                      REVERSE    (s_lu_region) = 1);

  /*----------------------------------------------------------------------
       Access check. (Error messages handled by procedure.)
  ----------------------------------------------------------------------*/
  
  h_return = CALLPROC check_access_frames (p_frpr_name = :h_frpr_name);

  IF h_return = 1 
  THEN
    RETURN 0;
  ELSEIF h_return > 1
  THEN
    RETURN 9;
  ENDIF;
  
  /*----------------------------------------------------------------------
       Get minimum acceptable period from cqpv.  
  ----------------------------------------------------------------------*/

  MESSAGE 'Preparing . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT MIN(period) AS :h_min_period
    FROM   cqpv; 

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to select minimum period from CQPV table. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*----------------------------------------------------------------------
       Load passed parameters when arrived at from other applications.
  ----------------------------------------------------------------------*/

  h_param_list = CALLPROC CommandLineParameters ();

  h_varchar_variable = SQUEEZE(h_param_list);
  h_integer_variable = LOCATE(h_varchar_variable, ' ');
  h_param1           = LEFT(h_varchar_variable, h_integer_variable-1);

  h_varchar_variable = SHIFT (h_varchar_variable, - h_integer_variable);
  h_integer_variable = LOCATE (h_varchar_variable, ' ');
  h_param2           = LEFT (h_varchar_variable,h_integer_variable - 1);

  IF :h_param1 != ''
  THEN
    s_contributor_reference = :h_param1;
    s_period                = INT4(:h_param2);
  ENDIF;

  IF s_period != 0 AND s_contributor_reference != ''
  THEN

    /*....................................................................
       If both parameters present, move to validation of contributor 
       reference and period.
    ....................................................................*/
 
    SET_FORMS FIELD '' (DISPLAYONLY(s_period) = 1,
                        UNDERLINE  (s_period) = 0,
                        REVERSE    (s_period) = 1);

    h_return = CALLPROC lp_check_reference ();

    IF h_return != 0
    THEN
      /* If parameters are not good, return to calling frame */
      RETURN h_return;
    ENDIF;

  ELSE

    /*....................................................................
       If any parameters are missing, clear any partial parameters and
       start frame as normal.
    ....................................................................*/
 
    CLEAR FIELD  s_contributor_reference;
    CLEAR FIELD  s_period;
    RESUME FIELD s_period;

  ENDIF;

}

FIELD s_period =
{

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT period AS s_period
    FROM   inquiry_period
    WHERE  period = :s_period;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 1
  THEN
    MESSAGE 'WARNING: This period does not exist in the ProdCom system.'
    WITH STYLE = POPUP;
    CLEAR FIELD  s_period;
    RESUME FIELD s_period;
  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to validate inquiry period. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN :h_return;
  ENDIF;

  IF :s_period < :h_min_period
  THEN
    MESSAGE 'WARNING: The earliest data period on the ProdCom system is '
          + VARCHAR(:h_min_period) + '. The period entered is earlier than '
          + 'that and so cannot be accepted.'
    WITH STYLE = POPUP;
    CLEAR FIELD  s_period;
    RESUME FIELD s_period;
  ENDIF;

  SET_FORMS FIELD '' (DISPLAYONLY(s_period) = 1,
                      UNDERLINE  (s_period) = 0,
                      REVERSE    (s_period) = 1);

  RESUME FIELD s_contributor_reference;

}

FIELD s_contributor_reference =
{

  h_return = CALLPROC lp_check_reference ();

  IF h_return = 1
  THEN
    RESUME FIELD s_contributor_reference;
  ELSEIF h_return > 1
  THEN
    RETURN :h_return;
  ENDIF;

}

FIELD s_lu_reference =
{

  /*-------------------------------------------------------------------------
      Physical validation of lu ref pattern.
  -------------------------------------------------------------------------*/

  IF s_lu_reference NOT LIKE 
     '\[0-9\]\[0-9\]\[0-9\]\[0-9\]\[0-9\]\[0-9\]\[0-9\]\[0-9\]' escape '\'
  THEN
    MESSAGE 'WARNING: The Local Unit Reference can only be an eight digit code.'
    WITH STYLE = POPUP;
    RESUME FIELD s_lu_reference;
  ENDIF;

  MESSAGE 'Checking LU Reference . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT contributor_reference AS h_dummy
    FROM   contributor_luaddress
    WHERE  period       = :s_period
      AND  lu_reference = :s_lu_reference;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 0);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 1
  THEN
    MESSAGE 'WARNING: This local unit reference already exists '
          + 'for period ' +VARCHAR(:s_period) +'.' 
    WITH STYLE = POPUP;
    RESUME FIELD s_lu_reference;
  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to validate local unit reference number. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN :h_return;
  ENDIF;

  SET_FORMS FIELD '' (DISPLAYONLY(s_lu_reference) = 1,
                      UNDERLINE  (s_lu_reference) = 0,
                      REVERSE    (s_lu_reference) = 1);

  RESUME FIELD s_lu_name1;
}

FIELD s_lu_reg_emp =
{
  IF s_lu_reg_emp < 1
  THEN

    h_yesno = '';

    WHILE h_yesno != 'Y' AND h_yesno != 'N'
    DO
      h_yesno = PROMPT 'WARNING: With the exception of "holding" units, '
                     + 'no local units can have zero employment. '
                     + 'Have you confirmed this is a holding unit? [Y/N]: '
                WITH STYLE = POPUP;

      h_yesno = UPPER(h_yesno);

    ENDWHILE;

    IF h_yesno = 'N'
    THEN
      RESUME FIELD s_lu_reg_emp;
    ENDIF;

    s_lu_reg_emp = 0;

  ENDIF;

  SET_FORMS FIELD '' (DISPLAYONLY(s_lu_reg_emp) = 1,
                      UNDERLINE  (s_lu_reg_emp) = 0,
                      REVERSE    (s_lu_reg_emp) = 1);


  RESUME FIELD s_lu_region;

}

FIELD s_lu_region =
{
  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT region AS s_lu_region
    FROM   region
    WHERE  region = :s_lu_region;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 1
  THEN
    MESSAGE 'WARNING: That is not a valid Region Code.'
    WITH STYLE = POPUP;
    RESUME FIELD s_lu_region;
  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to validate region code. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  SET_FORMS FIELD '' (DISPLAYONLY(s_lu_region) = 1,
                      UNDERLINE  (s_lu_region) = 0,
                      REVERSE    (s_lu_region) = 1);

  RESUME FIELD s_lu_name1;

}

/*************************** KEY ACTIVATIONS ******************************/

'Save', KEY FRSKEY4 =
{
  /*--------------------------------------------------------------------------
     Check the basics are present. Region and Reg Emp have been locked 
     after field validation so no need to revalidate, just check if locked.
  --------------------------------------------------------------------------*/

  INQUIRE_FORMS FIELD '' (h_display = DISPLAYONLY(s_period));

  IF :h_display = 0
  THEN
    MESSAGE 'WARNING: Please enter a valid period.'
    WITH STYLE = POPUP;
    RESUME FIELD s_period;
  ENDIF;

  INQUIRE_FORMS FIELD '' (h_display = DISPLAYONLY(s_contributor_reference));

  IF :h_display = 0
  THEN
    MESSAGE 'WARNING: Please complete the Contributor Reference.'
    WITH STYLE = POPUP;
    RESUME FIELD s_contributor_reference;
  ENDIF;

  INQUIRE_FORMS FIELD '' (h_display = DISPLAYONLY(s_lu_reference));

  IF :h_display = 0
  THEN
    MESSAGE 'WARNING: Please complete the Local Unit Reference.'
    WITH STYLE = POPUP;
    RESUME FIELD s_lu_reference;
  ENDIF;

  IF s_lu_name1 = ''
  THEN
    MESSAGE 'WARNING: Please enter the Local Unit name.'
    WITH STYLE = POPUP;
    RESUME FIELD s_lu_name1;
  ENDIF;

  IF s_lu_addr1 = ''
  THEN
    MESSAGE 'WARNING: Please enter the Local Unit address.'
    WITH STYLE = POPUP;
    RESUME FIELD s_lu_addr1;
  ENDIF;

  INQUIRE_FORMS FIELD '' (h_display = DISPLAYONLY(s_lu_reg_emp));

  IF :h_display = 0
  THEN
    MESSAGE 'WARNING: Please enter an employment figure for the Local Unit.'
    WITH STYLE = POPUP;
    RESUME FIELD s_lu_reg_emp;
  ENDIF;

  INQUIRE_FORMS FIELD '' (h_display = DISPLAYONLY(s_lu_region));

  IF :h_display = 0
  THEN
    MESSAGE 'WARNING: Please enter a region code for the Local Unit.'
    WITH STYLE = POPUP;
    RESUME FIELD s_lu_region;
  ENDIF;

 /*-------------------------------------------------------------------
    Insert into contributor_luaddress
 -------------------------------------------------------------------*/

  MESSAGE 'Saving Local Unit Details . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    INSERT INTO contributor_luaddress
              ( contributor_reference,
                lu_reference,
                period,
                lu_name1,
                lu_name2,
                lu_name3,
                lu_addr1,
                lu_addr2,
                lu_addr3,
                lu_addr4,
                lu_addr5,
                lu_postcode,
                register_emp,
                lu_region)
    VALUES    ( :s_contributor_reference,
                :s_lu_reference,
                :s_period,
                :s_lu_name1,
                :s_lu_name2,
                :s_lu_name3,
                :s_lu_addr1,
                :s_lu_addr2,
                :s_lu_addr3,
                :s_lu_addr4,
                :s_lu_addr5,
                :s_lu_postcode,
                :s_lu_reg_emp,
                :s_lu_region);

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to save Local Unit details. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

 /*-------------------------------------------------------------------
    Find sum of Local Units' Employments
 -------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT SUM(register_emp) AS h_sum_regemp
    FROM   contributor_luaddress
    WHERE  contributor_reference = :s_contributor_reference
      AND  period                = :s_period;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to total Local Unit employment for contributor. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*-------------------------------------------------------------------
      Update contributor_period's register_emp
  -------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    UPDATE contributor_period
    SET    register_emp = :h_sum_regemp,
           lu_count = lu_count + 1
    WHERE  contributor_reference = :s_contributor_reference
      AND  period                = :s_period;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to update with new total employment for period. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  MESSAGE 'NOTE: Local Unit details created successfully.' 
  WITH STYLE = POPUP;

  RETURN 0;

}


'Clear', KEY FRSKEY12 =
{
  CLEAR FIELD ALL;

  msa_date = 'now';

  s_enforcement = 'UNDER ENFORCEMENT';
  s_key         = 'KEY';

  SET_FORMS FIELD '' (INVISIBLE  (s_enforcement) = 1,
                      INVISIBLE  (s_country) = 1,
                      INVISIBLE  (s_key) = 1,

                      DISPLAYONLY(s_period) = 0,
                      UNDERLINE  (s_period) = 1,
                      REVERSE    (s_period) = 0,

                      DISPLAYONLY(s_contributor_reference) = 0,
                      UNDERLINE  (s_contributor_reference) = 1,
                      REVERSE    (s_contributor_reference) = 0,

                      DISPLAYONLY(s_lu_reference) = 1,
                      UNDERLINE  (s_lu_reference) = 0,
                      REVERSE    (s_lu_reference) = 1,

                      DISPLAYONLY(s_lu_name1) = 1,
                      UNDERLINE  (s_lu_name1) = 0,
                      REVERSE    (s_lu_name1) = 1,

                      DISPLAYONLY(s_lu_name2) = 1,
                      UNDERLINE  (s_lu_name2) = 0,
                      REVERSE    (s_lu_name2) = 1,

                      DISPLAYONLY(s_lu_name3) = 1,
                      UNDERLINE  (s_lu_name3) = 0,
                      REVERSE    (s_lu_name3) = 1,

                      DISPLAYONLY(s_lu_addr1) = 1,
                      UNDERLINE  (s_lu_addr1) = 0,
                      REVERSE    (s_lu_addr1) = 1,

                      DISPLAYONLY(s_lu_addr2) = 1,
                      UNDERLINE  (s_lu_addr2) = 0,
                      REVERSE    (s_lu_addr2) = 1,

                      DISPLAYONLY(s_lu_addr3) = 1,
                      UNDERLINE  (s_lu_addr3) = 0,
                      REVERSE    (s_lu_addr3) = 1,

                      DISPLAYONLY(s_lu_addr4) = 1,
                      UNDERLINE  (s_lu_addr4) = 0,
                      REVERSE    (s_lu_addr4) = 1,

                      DISPLAYONLY(s_lu_addr5) = 1,
                      UNDERLINE  (s_lu_addr5) = 0,
                      REVERSE    (s_lu_addr5) = 1,

                      DISPLAYONLY(s_lu_postcode) = 1,
                      UNDERLINE  (s_lu_postcode) = 0,
                      REVERSE    (s_lu_postcode) = 1,

                      DISPLAYONLY(s_lu_reg_emp) = 1,
                      UNDERLINE  (s_lu_reg_emp) = 0,
                      REVERSE    (s_lu_reg_emp) = 1,

                      DISPLAYONLY(s_lu_region) = 1,
                      UNDERLINE  (s_lu_region) = 0,
                      REVERSE    (s_lu_region) = 1);

  RESUME FIELD s_period;

}


'End', KEY FRSKEY14 =
{
  MESSAGE 'NOTE: No Local Unit was created.' 
  WITH STYLE = POPUP;

  RETURN 0;
}

/*************************** LOCAL PROCEDURES ********************************/

/*===========================================================================
  Local procedure to check contributor reference and suitability for
  creating local units in this period.
===========================================================================*/

PROCEDURE lp_check_reference () =

DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT,

{

  MESSAGE 'Checking Reference . . .';

  
  /*----------------------------------------------------------------------
     Make sure reference is local unit list reporter.
  ----------------------------------------------------------------------*/

  IF s_contributor_reference NOT LIKE '500%'
  THEN
    MESSAGE 'WARNING: This contributor reference does not support '
          + 'local unit creation. Local unit list reporting references '
          + 'need to start with "500" rather than "499".'
    WITH STYLE = POPUP;
    RETURN 1;	
  ENDIF;

  /*----------------------------------------------------------------------
     Get contributor name and validate existance. 
  ----------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT add_name1 AS s_add_name1,
           add_name2 AS s_add_name2,
           add_name3 AS s_add_name3
    FROM   contributor
    WHERE  contributor_reference = :s_contributor_reference;

    lp_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF lp_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF lp_return = 1
  THEN
    MESSAGE 'WARNING: This contributor does not exist in the ProdCom system.'
    WITH STYLE = POPUP;
    RETURN 1;
  ELSEIF lp_return > 1
  THEN
    MESSAGE 'ERROR: Failed to validate contributor reference. '
          + 'Error code ' +VARCHAR(:lp_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN :lp_return;
  ENDIF;

  /*----------------------------------------------------------------------
     Get region and output category if possible.
  ----------------------------------------------------------------------*/

  lp_return = CALLPROC msa_fp_latest_details 
            ( p_contributor_reference = :s_contributor_reference,
              p_region                = BYREF(:h_region),
              p_output_category       = BYREF(:h_output_category));

  IF lp_return > 1
  THEN
    /* Error message handled in external procedure */
    RETURN lp_return;
  ENDIF;

  /*------------------------------------------------------------------
     If appropriate, use region code to get country code.
  ------------------------------------------------------------------*/

  IF h_region != ''
  THEN 

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      SELECT country AS s_country
      FROM   region
      WHERE  region = :h_region;

      lp_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF lp_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF lp_return != 0
    THEN
      MESSAGE 'ERROR: Failed to select country code using region code. '
            + 'Error code ' +VARCHAR(:lp_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN :lp_return;
    ENDIF;

  ENDIF;

  /*--------------------------------------------------------------------------
     Get periodic data whilst checking contributor was selected in period.
  --------------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT contributor_industry AS s_industry, 
           structure            AS h_structure,
           keyresp              AS h_keyresp,
           register_emp         AS h_reg_emp
    FROM   contributor_period
    WHERE  contributor_reference = :s_contributor_reference
      AND  period                = :s_period;

    lp_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF lp_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF lp_return = 1
  THEN
    MESSAGE 'WARNING: This contributor was not selected for this period.'
    WITH STYLE = POPUP;
    RETURN 1;
  ELSEIF lp_return > 1
  THEN
    MESSAGE 'ERROR: Failed to select contributor periodic data. '
          + 'Error code ' +VARCHAR(:lp_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN :lp_return;
  ENDIF;

  /*----------------------------------------------------------------------
     Set screamer fields.
  ----------------------------------------------------------------------*/

  IF :h_output_category = 'Y'
  THEN
    SET_FORMS FIELD '' (INVISIBLE(s_enforcement) = 0);
  ELSE
    SET_FORMS FIELD '' (INVISIBLE(s_enforcement) = 1);
  ENDIF;

  IF s_country != ''
  THEN
    SET_FORMS FIELD '' (INVISIBLE(s_country) = 0);
  ELSE
    SET_FORMS FIELD '' (INVISIBLE(s_country) = 1);
  ENDIF;

  IF :h_keyresp = 1
  THEN
    SET_FORMS FIELD '' (INVISIBLE(s_key) = 0);
  ELSE
    SET_FORMS FIELD '' (INVISIBLE(s_key) = 1);
  ENDIF;

  /*----------------------------------------------------------------------
     Lock contributor and period fields and enable periodic fields for
     local unit.
  ----------------------------------------------------------------------*/

  SET_FORMS FIELD '' (DISPLAYONLY(s_period) = 1,
                      UNDERLINE  (s_period) = 0,
                      REVERSE    (s_period) = 1,

                      DISPLAYONLY(s_contributor_reference) = 1,
                      UNDERLINE  (s_contributor_reference) = 0,
                      REVERSE    (s_contributor_reference) = 1,

                      DISPLAYONLY(s_lu_reference) = 0,
                      UNDERLINE  (s_lu_reference) = 1,
                      REVERSE    (s_lu_reference) = 0,

                      DISPLAYONLY(s_lu_name1) = 0,
                      UNDERLINE  (s_lu_name1) = 1,
                      REVERSE    (s_lu_name1) = 0,

                      DISPLAYONLY(s_lu_name2) = 0,
                      UNDERLINE  (s_lu_name2) = 1,
                      REVERSE    (s_lu_name2) = 0,

                      DISPLAYONLY(s_lu_name3) = 0,
                      UNDERLINE  (s_lu_name3) = 1,
                      REVERSE    (s_lu_name3) = 0,

                      DISPLAYONLY(s_lu_addr1) = 0,
                      UNDERLINE  (s_lu_addr1) = 1,
                      REVERSE    (s_lu_addr1) = 0,

                      DISPLAYONLY(s_lu_addr2) = 0,
                      UNDERLINE  (s_lu_addr2) = 1,
                      REVERSE    (s_lu_addr2) = 0,

                      DISPLAYONLY(s_lu_addr3) = 0,
                      UNDERLINE  (s_lu_addr3) = 1,
                      REVERSE    (s_lu_addr3) = 0,

                      DISPLAYONLY(s_lu_addr4) = 0,
                      UNDERLINE  (s_lu_addr4) = 1,
                      REVERSE    (s_lu_addr4) = 0,

                      DISPLAYONLY(s_lu_addr5) = 0,
                      UNDERLINE  (s_lu_addr5) = 1,
                      REVERSE    (s_lu_addr5) = 0,

                      DISPLAYONLY(s_lu_postcode) = 0,
                      UNDERLINE  (s_lu_postcode) = 1,
                      REVERSE    (s_lu_postcode) = 0,

                      DISPLAYONLY(s_lu_reg_emp) = 0,
                      UNDERLINE  (s_lu_reg_emp) = 1,
                      REVERSE    (s_lu_reg_emp) = 0,

                      DISPLAYONLY(s_lu_region) = 0,
                      UNDERLINE  (s_lu_region) = 1,
                      REVERSE    (s_lu_region) = 0);


  RETURN 0;

}


/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing 
            ( h_num_row_ck = :p_num_row_ck,
              h_commit          = 'Y',
              h_rollback        = 'N',
              h_retries         = :h_retries,
              h_retries_allowed = :h_retries_allowed,
              h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}

