/*----------------------------------------------------------------------
                 msa_fp_industry_responsibility

 Checks whether a user_id owns an industry or not.

 0 = access
 1 = no access
 9 = error
----------------------------------------------------------------------*/

PROCEDURE msa_fp_industry_responsibility 
        ( p_industry        = INTEGER4 NOT NULL,
          p_reference       = CHAR(11) NOT NULL) =

DECLARE 
  h_return          = INTEGER4 NOT NULL,
  h_retries         = INTEGER1 NOT NULL,
  h_inquiry         = INTEGER1 NOT NULL,
  h_user_inquiry    = INTEGER1 NOT NULL,
  h_test_industry   = INTEGER4 NOT NULL,
  h_dummy           = VARCHAR(4) NOT NULL,
  h_owns_industry   = CHAR(1) NOT NULL,
  h_access_level    = INTEGER1 NOT NULL,
  h_retries_allowed = INTEGER1 NOT NULL,
  h_frpr_name       = CHAR(32) NOT NULL,
  h_retry_or_not    = CHAR(5)  NOT NULL,
 
  lp_full_error_check   = PROCEDURE RETURNING INTEGER NOT NULL,
  lp_remove_temp_tables = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,

{
  h_frpr_name = 'msa_fp_industry_responsibility';
  h_retries_allowed   = 3;

  SELECT DBMSINFO('username') AS g_user_id;
  SELECT DBMSINFO('database') AS g_database;

  SET_FORMS FRS (MAPFILE='/home/prodcom/admin/prodcom.map');

  /*----------------------------------------------------------------------
      Drop temp tables.
  ----------------------------------------------------------------------*/

  h_return = CALLPROC lp_remove_temp_tables ();

  IF h_return != 0
  THEN
    RETURN 9;
  ENDIF;

  /*----------------------------------------------------------------------
       If Access level 5, Return 0.  
  -----------------------------------------------------------------------*/

   IF g_user_level = 5 
   OR g_user_class = 'D'
   THEN
    RETURN 0;
   ENDIF;

  /*----------------------------------------------------------------------
       This is mainly a RAP team application, so all RAP staff 
       with edit access need access to full compliment.
  -----------------------------------------------------------------------*/

   IF  g_user_class = 'R'
   AND g_user_level > 2
   THEN
    RETURN 0;
   ENDIF;

  /*----------------------------------------------------------------------
       If g_access_code = I3 then check industry analysts.
  -----------------------------------------------------------------------*/

  IF g_access_code = 'I3'
  THEN

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      SELECT ext as h_dummy
      FROM   industry_analysts
      WHERE  industry = :p_industry
        AND  :p_reference >= low_ref
        AND  :p_reference <= high_ref
        AND  user_id = :g_user_id; 

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return = 1
    THEN
      MESSAGE 'WARNING: That is not an industry that you are responsible for.'
      WITH STYLE = POPUP;
      h_return = CALLPROC lp_remove_temp_tables ();
      RETURN 1;
    
    ELSEIF h_return > 1
    THEN  
      MESSAGE 'ERROR: Failed to select analyst for contributor '
            + VARCHAR(:p_reference) + ' in industry '
            + VARCHAR(:p_industry) + '. '
            + 'Error code ' +VARCHAR(:h_return) + '. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      h_return = CALLPROC lp_remove_temp_tables ();
      RETURN 9;

    ENDIF;

    h_return = CALLPROC lp_remove_temp_tables ();

    RETURN 0;

  ENDIF; /* End of I3 */

  /*----------------------------------------------------------------------
       If g_access_code = I4 then check if industry belongs to own I3.
  -----------------------------------------------------------------------*/

  IF g_access_code = 'I4'
  THEN

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      CREATE TABLE tt_coord_ind
      AS
      SELECT DISTINCT b.industry AS industry
      FROM   analyst_coordinator_manager a,
             industry_analysts b
      WHERE  a.analyst_id       = b.user_id
        AND  b.industry         = :p_industry
        AND  ( a.coordinator_id = :g_user_id OR
               a.coordinator_id = ( SELECT c.id_two
                                    FROM   job_share c
                                    WHERE  c.id_one  = :g_user_id));

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return = 1
    THEN
      MESSAGE 'WARNING: That is not an industry that your team are '
            + 'responsible for.'
      WITH STYLE = POPUP;
      h_return = CALLPROC lp_remove_temp_tables ();
      RETURN 1;

    ELSEIF h_return > 1
    THEN  
      MESSAGE 'ERROR: Failed to select industries for coordinator '
            + VARCHAR(:g_user_id) + '. '
            + 'Error code ' +VARCHAR(:h_return) + '. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      h_return = CALLPROC lp_remove_temp_tables ();
      RETURN 9;
    ENDIF;

    h_return = CALLPROC lp_remove_temp_tables ();

    RETURN 0;

  ENDIF; /* End of I4 */

  /*---------------------------------------------------------------------
         If not already granted access, refuse access.
  ---------------------------------------------------------------------*/

  MESSAGE 'WARNING: You are not responsible for the maintenance of that '
        + 'contributor reference / industry allocation.'
  WITH STYLE = POPUP;

  h_return = CALLPROC lp_remove_temp_tables ();

  RETURN 1;


}

/************************** LOCAL PROCEDURES ****************************/


/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing (
                  h_num_row_ck = :p_num_row_ck,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}


/*=======================================================================
      Drop temp tables.
=======================================================================*/

PROCEDURE lp_remove_temp_tables () =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC msa_fp_drop_table (p_table = 'tt_coord_ind');

  IF lp_return != 0
  THEN
    MESSAGE 'ERROR: Failed to drop temporary coordinator industry table. '
          + 'Error code ' +VARCHAR(:lp_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN :lp_return;
  ENDIF;

  RETURN 0;

}

