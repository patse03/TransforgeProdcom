INITIALIZE () =

DECLARE 
  h_retries_allowed   = INTEGER1     NOT NULL WITH DEFAULT,
  h_retries           = INTEGER1     NOT NULL WITH DEFAULT,
  h_retry_or_not      = CHAR(5)      NOT NULL WITH DEFAULT,
  h_frpr_name         = VARCHAR(24)  NOT NULL WITH DEFAULT,
  h_reference         = CHAR(11)     NOT NULL WITH DEFAULT,
  h_hold_ref          = CHAR(11)     NOT NULL WITH DEFAULT,
  h_prompt_ref        = CHAR(11)     NOT NULL WITH DEFAULT,
  h_num_rows          = INTEGER4     NOT NULL WITH DEFAULT,
  h_record            = INTEGER4     NOT NULL WITH DEFAULT,
  h_on_record         = INTEGER4     NOT NULL WITH DEFAULT,
  h_yesno             = CHAR(1)      NOT NULL WITH DEFAULT,
  h_field_name        = VARCHAR(24)  NOT NULL WITH DEFAULT,
  h_message           = VARCHAR(200) NOT NULL WITH DEFAULT,
  h_rows              = INTEGER4     NOT NULL WITH DEFAULT,
  h_return            = INTEGER1     NOT NULL WITH DEFAULT,

  lp_load_table       = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,
  lp_full_error_check = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,

{
  h_retries_allowed = 3;
  h_frpr_name = 'msafd_fr_reref_contribs';
  msa_date = 'now';

  SET_FORMS FIELD '' (MODE(tf) = 'READ');

  SET_FORMS FRS (MAPFILE='/home/prodcom/admin/prodcom.map');

  SELECT DBMSINFO('username') AS g_user_id;
  SELECT DBMSINFO('database') AS g_database;


  /*----------------------------------------------------------------------
       Access check. (Error messages handled by procedure.)
  ----------------------------------------------------------------------*/
  
  h_return = CALLPROC check_access_frames (p_frpr_name = :h_frpr_name);

  IF h_return = 1 
  THEN
    RETURN 0;
  ELSEIF h_return > 1
  THEN
    RETURN 9;
  ENDIF;
  
  h_return = CALLPROC lp_load_table ();

  IF h_return != 0
  THEN
    /* Error message handled in local procedure */
    RETURN h_return;
  ENDIF;

}
/**************************** KEY ACTIVATIONS *****************************/

'Insert', KEY FRSKEY4  =
{
  /*--------------------------------------------------------------------------
      New entry so validation not possible yet. Goes straight to subframe.
  --------------------------------------------------------------------------*/

  h_reference = '';

  h_return = CALLFRAME msafd_fr_reref_ins 
           ( s_contributor_reference = BYREF(:h_reference),
             p_insert_or_amend       = 'I');

  IF h_return < 2
  THEN
    RESUME;
  ELSE
    /* Error message handled in external procedure */
    RETURN :h_return;
  ENDIF;
    
  /*--------------------------------------------------------------------------
      Reloads data table and scrolls to new rows.
  --------------------------------------------------------------------------*/

  h_return = CALLPROC lp_load_table ();

  IF h_return != 0
  THEN
    /* Error message handled in external procedure */
    RETURN h_return;
  ENDIF;

  UNLOADTABLE tf (h_record = _record)
  BEGIN
    IF tf.contributor_reference = h_reference
    THEN
      SCROLL tf TO h_record;
      ENDLOOP;
    ENDIF;
  END;

}

'Amend', KEY FRSKEY5 =
{
  /*--------------------------------------------------------------------------
      Ensures contributor reference is selected to send to subframe.
  --------------------------------------------------------------------------*/

  INQUIRE_FORMS FORM (h_field_name = FIELD);

  IF :h_field_name != 'tf'
  THEN
    MESSAGE 'WARNING: Please highlight the contributor rereference '
          + 'you wish to amend.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  INQUIRE_FORMS TABLE '' (h_rows = DATAROWS(tf));

  IF :h_rows = 0
  THEN
    MESSAGE 'WARNING: Please highlight the contributor rereference '
          + 'you wish to amend.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;
  
  /*--------------------------------------------------------------------------
      Checks users authority to change rerefs.
  --------------------------------------------------------------------------*/

  h_return = CALLPROC msa_fp_industry_responsibility
           ( p_industry  = :tf.contributor_industry,
             p_reference = :tf.contributor_reference);

  IF h_return = 1
  THEN
    /* Error message handled in external procedure */
    RESUME;
  ELSEIF h_return > 1
  THEN
    /* Error message handled in external procedure */
    RETURN 9;
  ENDIF;

  /*--------------------------------------------------------------------------
      Passes selected contributor reference to subframe for amendment. 
  --------------------------------------------------------------------------*/

  h_reference = :tf.contributor_reference;

  h_return = CALLFRAME msafd_fr_reref_ins 
           ( s_contributor_reference = BYREF(:h_reference),
             p_insert_or_amend       = 'A');

  IF h_return = 1
  THEN
    /* Error message handled in external procedure */
    RESUME;
  ELSEIF h_return > 1
  THEN
    /* Error message handled in external procedure */
    RETURN 9;
  ENDIF;

  /*--------------------------------------------------------------------------
      Reloads data table and scrolls to amended rows.
  --------------------------------------------------------------------------*/

  h_return = CALLPROC lp_load_table ();

  IF h_return != 0
  THEN
    /* Error message handled in external procedure */
    RETURN h_return;
  ENDIF;

  UNLOADTABLE tf (h_record = _record)
  BEGIN

    IF tf.contributor_reference = h_reference
    THEN
      SCROLL tf TO h_record;
      ENDLOOP;
    ENDIF;

  END;

}

'Contact', KEY FRSKEY8 =
{
  /*--------------------------------------------------------------------------
    Ensures contributor reference is selected to send to external procedure.
  --------------------------------------------------------------------------*/

  INQUIRE_FORMS FORM (h_field_name = FIELD);

  IF :h_field_name != 'tf'
  THEN
    MESSAGE 'WARNING: Please highlight the contributor rereference '
          + 'you wish to amend.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  INQUIRE_FORMS TABLE '' (h_rows = DATAROWS(tf));

  IF :h_rows = 0
  THEN
    MESSAGE 'WARNING: Please highlight the contributor rereference '
          + 'you wish to amend.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  /*--------------------------------------------------------------------------
     Calls external procedure.
  --------------------------------------------------------------------------*/

  CALL APPLICATION(exec  = '$IMAGES/communicate',
                   param = VARCHAR(:tf.contributor_reference));

}

'Find', KEY FRSKEY9 =
{
  /*--------------------------------------------------------------------------
     Construct message for display.
  --------------------------------------------------------------------------*/

  h_message = 'Please enter the first few digits of the reference';

  IF h_hold_ref != ''
  THEN
    h_message = h_message + ', or just hit <return> to go to the next' 
               + ' form whose reference starts with ' 
               + VARCHAR(h_hold_ref) + '.';
   ELSE
     h_message = h_message + '.';
  ENDIF;

  h_prompt_ref = PROMPT h_message WITH STYLE = POPUP;

  /*--------------------------------------------------------------------------
     Uses held value if no input at prompt.
  --------------------------------------------------------------------------*/

  IF h_prompt_ref = '' 
  AND h_hold_ref != ''
  THEN
    h_prompt_ref = h_hold_ref;
    h_on_record = :tf._record;
  ELSE
    h_on_record = 0;
  ENDIF;

  h_hold_ref = h_prompt_ref;

  /*--------------------------------------------------------------------------
     Finds next matching string set on table field.
  --------------------------------------------------------------------------*/

  UNLOADTABLE tf (h_record = _record)
  BEGIN

    IF h_record > h_on_record
    THEN

      IF LEFT(VARCHAR(tf.contributor_reference),LENGTH(h_prompt_ref)) 
         = :h_prompt_ref
      THEN
        SCROLL tf TO h_record;
        RESUME;
      ENDIF;

    ENDIF;

  END;

}

'Delete', KEY FRSKEY11 =
{
  /*--------------------------------------------------------------------------
    Ensures contributor reference is selected to send to external procedure.
  --------------------------------------------------------------------------*/

  INQUIRE_FORMS FORM (h_field_name = FIELD);

  IF :h_field_name != 'tf'
  THEN
    MESSAGE 'WARNING: Please highlight the contributor rereference '
          + 'you wish to amend.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  INQUIRE_FORMS TABLE '' (h_rows = DATAROWS(tf));

  IF :h_rows = 0
  THEN
    MESSAGE 'WARNING: Please highlight the contributor rereference '
          + 'you wish to amend.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  /*--------------------------------------------------------------------------
      Checks users authority to change rerefs.
  --------------------------------------------------------------------------*/

  h_return = CALLPROC msa_fp_industry_responsibility
           ( p_industry  = :tf.contributor_industry,
             p_reference = :tf.contributor_reference);

  IF h_return = 1
  THEN
    /* Error message handled in external procedure */
    RESUME;
  ELSEIF h_return > 1
  THEN
    /* Error message handled in external procedure */
    RETURN 9;
  ENDIF;

  /*--------------------------------------------------------------------------
      Prompts for confirmation of delete.
  --------------------------------------------------------------------------*/

  h_yesno = '';

  WHILE h_yesno != 'Y' AND h_yesno != 'N'
  DO
    h_yesno = PROMPT 'WARNING: Do you really wish to delete '
                   + 'this entry? [Y/N]:' 
              WITH STYLE = POPUP;
    h_yesno = UPPER(:h_yesno);
  ENDWHILE;

  IF h_yesno = 'N'
  THEN
    RESUME;
  ENDIF;

  /*--------------------------------------------------------------------------
      Actions delete.
  --------------------------------------------------------------------------*/

  MESSAGE 'Deleting Contributor . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    DELETE FROM reref_contributors
    WHERE       contributor_reference = :tf.contributor_reference
    AND         period                = :tf.period;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to delete contributor rereference from table. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*--------------------------------------------------------------------------
      Reloads data table and scrolls previous position. 
  --------------------------------------------------------------------------*/

  h_record = :tf._record;

  h_return = CALLPROC lp_load_table ();

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

  IF h_record > s_contributors
  THEN
    h_record = s_contributors;
  ENDIF;

  SCROLL tf TO h_record;

  /*--------------------------------------------------------------------------
     If delete completes, prompt user to make written note elsewhere.
  --------------------------------------------------------------------------*/

  MESSAGE 'NOTE: Please make a note of this deletion in '
        + 'the contributor comments database.'
  WITH STYLE = POPUP;

}

'End', KEY FRSKEY14 =
{
  RETURN 0;
}

/*************************** LOCAL PROCEDURES **************************/

/*==========================================================================
   Local procedure to load data to table field.
==========================================================================*/

PROCEDURE lp_load_table () =
{
  MESSAGE 'Selecting Data . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    tf =

    SELECT   contributor_reference,
             contributor_industry,
             period,
             time,
             reason
    FROM     reref_contributors
    ORDER BY contributor_industry,
             contributor_reference,
             period;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  s_contributors = :h_num_rows;

  IF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to select from refererenced contributors table. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  REDISPLAY;

  RETURN 0;

}


/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing 
            ( h_num_row_ck = :p_num_row_ck,
              h_num_row         = BYREF(:h_num_rows),
              h_commit          = 'Y',
              h_rollback        = 'N',
              h_retries         = :h_retries,
              h_retries_allowed = :h_retries_allowed,
              h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}

