/*****************************************************************************

    This frame allows the user to view the deselect details held for a
    contributor.

    June 2013 - DF - Reworked to comply with new procedures and standards.

*****************************************************************************/

INITIALIZE () =

DECLARE
  h_return          = INTEGER4    NOT NULL WITH DEFAULT,
  h_output_category = CHAR(1)     NOT NULL WITH DEFAULT,
  h_dummy           = CHAR(11)    NOT NULL WITH DEFAULT,
  h_retries         = INTEGER1    NOT NULL WITH DEFAULT,
  h_retries_allowed = INTEGER1    NOT NULL WITH DEFAULT,
  h_display         = INTEGER1    NOT NULL WITH DEFAULT,
  h_max_rows        = INTEGER4    NOT NULL WITH DEFAULT,
  h_num_rows        = INTEGER4    NOT NULL WITH DEFAULT,
  h_counter         = INTEGER4    NOT NULL WITH DEFAULT,
  h_period          = INTEGER4    NOT NULL WITH DEFAULT,
  h_retry_or_not    = CHAR(5)     NOT NULL WITH DEFAULT,
  h_frpr_name       = VARCHAR(24) NOT NULL WITH DEFAULT,
  h_user_id         = VARCHAR(8)  NOT NULL WITH DEFAULT,

  lp_load_data        = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,
  lp_full_error_check = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,

{

  h_frpr_name         = 'msafd_fr_deselect_hist';
  h_retries_allowed   = 3;

  msa_date            = 'now';

  SET_FORMS FRS (MAPFILE='/home/prodcom/admin/prodcom.map');

  SET_FORMS FIELD '' (DISPLAYONLY(s_contributor_reference) = 0,
                      UNDERLINE  (s_contributor_reference) = 1,
                      REVERSE    (s_contributor_reference) = 0);

  /*----------------------------------------------------------------------
       Access check. (Error messages handled by procedure.)
  ----------------------------------------------------------------------*/
  
  h_return = CALLPROC check_access_frames (p_frpr_name = :h_frpr_name);

  IF h_return = 1 
  THEN
    RETURN 0;
  ELSEIF h_return > 1
  THEN
    RETURN 9;
  ENDIF;
  
}

/************************** FIELD ACTIVATIONS *******************************/

FIELD s_contributor_reference =
{
  MESSAGE 'Checking Contributor . . .';

  /*------------------------------------------------------------------------
      Basic validation for contributor reference.
  -------------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT add_name1    AS s_add_name1,
           add_name2    AS s_add_name2,
           add_name3    AS s_add_name3
    FROM   contributor
    WHERE  contributor_reference = :s_contributor_reference;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 1
  THEN
    MESSAGE 'WARNING: This contributor does not exist on the ProdCom system. '
    wITH STYLE = POPUP;
    RESUME FIELD s_contributor_reference;
  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to select contributor details. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN:h_return;
  ENDIF;

  REDISPLAY;

  /*------------------------------------------------------------------
    Create period array for contributor.
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    g_year_array =

    SELECT   period
    FROM     removed_contrib_period
    WHERE    contributor_reference = :s_contributor_reference
    ORDER BY period ASC;
    
    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    h_max_rows = :h_num_rows;

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 1
  THEN
    MESSAGE 'WARNING: This Contributor has never been deselected.'
    WITH STYLE = POPUP;
    CLEAR FIELD ALL;
    msa_date = 'now';
    RESUME FIELD s_contributor_reference;
  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to create period array for contributor. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
    Lock contributor reference field.
  ------------------------------------------------------------------*/

  SET_FORMS FIELD '' (DISPLAYONLY(s_contributor_reference) = 1,
                      UNDERLINE  (s_contributor_reference) = 0,
                      REVERSE    (s_contributor_reference) = 1);

  /*------------------------------------------------------------------
    Load data to screen.  
  ------------------------------------------------------------------*/

  h_counter = :h_max_rows;

  h_return = CALLPROC lp_load_data ();

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

}

/**************************** KEY ACTIVATIONS ******************************/

/*-------------------------------------------------------------------------
    KEY 5: Prev Period
-------------------------------------------------------------------------*/

'Prev', KEY FRSKEY5 =
{
  INQUIRE_FORMS FIELD '' (h_display = DISPLAYONLY(s_contributor_reference));

  IF :h_display = 0
  THEN
    MESSAGE 'WARNING: Please enter a valid contributor reference.'
    WITH STYLE = POPUP;
    RESUME FIELD s_contributor_reference;
  ENDIF;

  IF :h_counter = 1
  THEN
    MESSAGE 'WARNING: This is the earliest deselection for this contributor.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  h_counter = :h_counter - 1;

  h_return = CALLPROC lp_load_data ();

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

}

/*-------------------------------------------------------------------------
    KEY 6: Next Period
-------------------------------------------------------------------------*/

'Next', KEY FRSKEY6 =
{

  INQUIRE_FORMS FIELD '' (h_display = DISPLAYONLY(s_contributor_reference));

  IF :h_display = 0
  THEN
    MESSAGE 'WARNING: Please enter a valid contributor reference.'
    WITH STYLE = POPUP;
    RESUME FIELD s_contributor_reference;
  ENDIF;

  IF :h_counter = :h_max_rows
  THEN
    MESSAGE 'WARNING: This is the latest period for this contributor.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  h_counter = :h_counter + 1;

  h_return = CALLPROC lp_load_data ();

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

}

/*-------------------------------------------------------------------------
    KEY 9: Local Units
-------------------------------------------------------------------------*/

'LUs', KEY FRSKEY9 =
{

  INQUIRE_FORMS FIELD '' (h_display = DISPLAYONLY(s_contributor_reference));

  IF :h_display = 0
  THEN
    MESSAGE 'WARNING: Please enter a valid contributor reference.'
    WITH STYLE = POPUP;
    RESUME FIELD s_contributor_reference;
  ENDIF;

  IF s_lu_count = 0
  THEN
    MESSAGE 'WARNING: This Contributor has no Local Units deselected in '
          + VARCHAR(:h_period)
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  h_return = CALLFRAME msafd_fr_in_del_lu 
           ( s_contributor_reference = :s_contributor_reference,
             s_period                = :h_period);

  IF h_return != 0
  THEN
    /* Error message handled by external procedure */
    RETURN :h_return;
  ENDIF;

}

'Clear', KEY FRSKEY12 = 
{

  CLEAR FIELD ALL;

  msa_date            = 'now';

  SET_FORMS FIELD '' (DISPLAYONLY(s_contributor_reference) = 0,
                      UNDERLINE  (s_contributor_reference) = 1,
                      REVERSE    (s_contributor_reference) = 0);

  RESUME FIELD s_contributor_reference;

}

'End', KEY FRSKEY14 =
{
  RETURN 0;
}

/*************************** LOCAL PROCEDURES *******************************/

/*===========================================================================
   Local procedure to load data from specified deselection to screen.
===========================================================================*/

PROCEDURE lp_load_data () =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  h_period = :g_year_array[:h_counter].period;

  s_message = 'Period ' + VARCHAR(:h_period) + ': ' 
            + VARCHAR(:h_counter) + ' of ' + VARCHAR(:h_max_rows) +'.';

  MESSAGE 'Loading ' + VARCHAR(:h_period) + ' Deselection data . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT contributor_industry  AS s_industry,
           register_emp          AS s_reg_emp,
           date_removed          AS s_date_removed,
           UPPER(source)         AS s_source,
           date_received         AS s_date_received,
           UPPER(amendment_type) AS s_amendment,
           UPPER(reason_removed) AS s_reason_removed,
           UPPER(scope_reason1)  AS s_reason1,
           UPPER(scope_reason2)  AS s_reason2,
           UPPER(scope_reason3)  AS s_reason3,
           UPPER(scope_reason4)  AS s_reason4,
           UPPER(scope_reason5)  AS s_reason5,
           UPPER(scope_reason6)  AS s_reason6,
           UPPER(scope_reason7)  AS s_reason7,
           UPPER(scope_reason8)  AS s_reason8,
           UPPER(scope_reason9)  AS s_reason9,
           UPPER(scope_reason10) AS s_reason10,
           receipt_date          AS s_receipt_date,
           user_id               AS h_user_id
    FROM   removed_contrib_period
    WHERE  contributor_reference = :s_contributor_reference
      AND  period                = :h_period;

    lp_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF lp_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF lp_return != 0
  THEN
    MESSAGE 'ERROR: Failed to load deselection data. '
          + 'Error code ' +VARCHAR(:lp_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
     Get actioning user from dsl_actioning_users ore construct
     substitute text if not available.
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT user_name  AS s_user_name
    FROM   dsl_actioning_users
    WHERE  contributor_reference = :s_contributor_reference
      AND  period                = :h_period;

    lp_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF lp_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF lp_return = 1
  THEN
    s_user_name = 'UNKNOWN [' +UPPER(SQUEEZE(:h_user_id)) +']';
  ELSEIF lp_return > 1
  THEN
    MESSAGE 'ERROR: Failed to load deselectiing user name. '
          + 'Error code ' +VARCHAR(:lp_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
     Count local units
  ------------------------------------------------------------------*/

  s_lu_count = 0;

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT COUNT(lu_reference) AS s_lu_count
    FROM   removed_lu
    WHERE  contributor_reference = :s_contributor_reference
      AND  period                = :h_period;

    lp_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF lp_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF lp_return != 0
  THEN
    MESSAGE 'ERROR: Failed to count deselected local units. '
          + 'Error code ' +VARCHAR(:lp_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  RETURN 0;

}


/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing 
            ( h_num_row_ck = :p_num_row_ck,
              h_num_row         = BYREF(:h_num_rows),
              h_commit          = 'Y',
              h_rollback        = 'N',
              h_retries         = :h_retries,
              h_retries_allowed = :h_retries_allowed,
              h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}

