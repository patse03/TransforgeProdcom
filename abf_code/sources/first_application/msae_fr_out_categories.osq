
INITIALIZE () =

DECLARE 
  h_retries_allowed   = INTEGER1    NOT NULL WITH DEFAULT,
  h_retries           = INTEGER1    NOT NULL WITH DEFAULT,
  h_retry_or_not      = CHAR(5)     NOT NULL WITH DEFAULT,
  h_frpr_name         = VARCHAR(24) NOT NULL WITH DEFAULT,
  h_tmp_table         = VARCHAR(24) NOT NULL WITH DEFAULT,
  h_ref_table         = VARCHAR(24) NOT NULL WITH DEFAULT,
  h_output_category   = CHAR(1)     NOT NULL WITH DEFAULT,
  h_count             = INTEGER4    NOT NULL WITH DEFAULT,
  h_total             = INTEGER4    NOT NULL WITH DEFAULT,
  h_return            = INTEGER1    NOT NULL WITH DEFAULT,
  h_return2           = INTEGER1    NOT NULL WITH DEFAULT,

  lp_error_check      = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,
  lp_full_error_check = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,

{

  msa_date = 'now';
  h_frpr_name = 'msae_fr_out_categories';
  h_retries_allowed = 3;
  h_tmp_table = 'tt_out_cat_counts';
  h_ref_table = 'tt_contrib_period';

  SET_FORMS FIELD '' (MODE(tf) = 'READ');

  SELECT DBMSINFO('database') AS g_database;
  SELECT DBMSINFO('username') AS g_user_id;

  SET_FORMS FRS (MAPFILE='/home/prodcom/admin/prodcom.map');

  /*----------------------------------------------------------------------
       Access check. (Error messages handled by procedure.)
  ----------------------------------------------------------------------*/
  
  h_return = CALLPROC check_access_frames (p_frpr_name = :h_frpr_name);

  IF h_return = 1 
  THEN
    RETURN 0;
  ELSEIF h_return > 1
  THEN
    RETURN 9;
  ENDIF;
  
  /*----------------------------------------------------------------------
       Get default period.
  ----------------------------------------------------------------------*/
  

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT span_end AS s_period
    FROM   inquiry
    WHERE  inquiry = 14;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return != 0
  THEN
    MESSAGE 'SERROR: Failed to select span end from inquiry table. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  RESUME FIELD s_period;

}

FIELD s_period =
{

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT period AS s_period
    FROM   inquiry_period
    WHERE  period = :s_period
      AND  inquiry = 14;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 1
  THEN
    MESSAGE 'WARNING: That is not a valid ProdCom period. '
          + 'Please try again...'
    WITH STYLE = POPUP;
    RESUME FIELD s_period;
  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to validate period on inquiry period table. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
    Drop then create temp table.
  ------------------------------------------------------------------*/

  MESSAGE 'Selecting Data . . .';

  h_return = CALLPROC msa_fp_drop_table (h_table = :h_tmp_table);

  IF h_return != 0
  THEN
    /* Error message handled by external procedure */
    RETURN h_return;
  ENDIF;

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    CREATE TABLE :h_tmp_table
    AS 
    SELECT output_category,
           description,
           INT4(0) AS contrib_total
    FROM   output_category
    WHERE  output_category IN 
           ('A','C','F','G','H','J','K','M','O','R','T','W','X','Y');

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to create ' + :h_tmp_table +'. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
    Drop then create ref table.
  ------------------------------------------------------------------*/

  h_return = CALLPROC msa_fp_drop_table (h_table = :h_ref_table);

  IF h_return != 0
  THEN
    /* Error message handled by external procedure */
    RETURN h_return;
  ENDIF;

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    CREATE TABLE :h_ref_table
    AS 
    SELECT contributor_reference,
           output_category
    FROM   contributor_period
    WHERE  period = :s_period;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to create ' + :h_ref_table +'. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
    Count from ref table
  ------------------------------------------------------------------*/

  MESSAGE 'Counting Output Categories . . .';

  h_total = 0;

  SELECT DISTINCT output_category AS h_output_category 
  FROM   :h_tmp_table 
  BEGIN

    h_count = 0;

    /*....................................................................
        Count current category.
    ....................................................................*/
   
    SELECT COUNT(contributor_reference) AS h_count
    FROM   :h_ref_table
    WHERE  output_category = :h_output_category;

    h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

    IF h_return > 1
    THEN
      MESSAGE 'ERROR: Failed to count category' + :h_output_category +'. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN 9;
    ENDIF;

    /*....................................................................
        Update current category on temp table with count.
    ....................................................................*/
   
    UPDATE :h_tmp_table
    SET    contrib_total   = :h_count
    WHERE  output_category = :h_output_category;

    h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

    IF h_return != 0
    THEN
      MESSAGE 'ERROR: Failed to update category' + :h_output_category +' '
            + 'with total count. Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN 9;
    ENDIF;

    h_total = h_total + h_count;

  END;  /* Select loop */

  h_return2 = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return2 != 0
  THEN
    MESSAGE 'ERROR: Failed to loop on categories from ' + :h_tmp_table +'. '
          + 'Error code ' +VARCHAR(:h_return2) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  s_output_total = :h_total;

  /*------------------------------------------------------------------
      Select to Screen
  ------------------------------------------------------------------*/

  tf =

  SELECT   description,
           output_category,
           contrib_total
  FROM     :h_tmp_table
  ORDER BY output_category;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to load data to screen. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  RESUME FIELD tf;

}

/********************* KEY ACTIVATIONS **************************/

'Print', KEY FRSKEY4 =
{
  MESSAGE 'Preparing Report . . .';
  msa_date = 'now';

  h_return = CALLPROC msa_cp_callsys 
           ( 'report ' 
           + :g_database 
           + ' ''(h_table = "' + :h_tmp_table + '"' 
           + ',user_name = "' + :g_user_name + '"' 
           + ',inquiry = 14'
           + ',period = ' + VARCHAR(:s_period) 
           + ')'' -i$REPORTS/msae_rw_out_categories.rw' 
           + ' > report.output 2> report.output');

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to produce report. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
  ELSE
    /*--------------------------------------------------------------
         Remove last line - so a blank end page is not printed
    --------------------------------------------------------------*/

    h_return = CALLPROC msa_cp_callsys 
             ( 'lines=`wc -l < msae_rw_out_categories.rpt`;' 
             + 'lines=`expr ${lines} - 1`;' 
             + 'head -${lines} msae_rw_out_categories.rpt | ' 
             + 'lp -o12p -d' + :g_printer 
             + ' >> report.output 2>> report.output');

    IF h_return != 0
    THEN
      MESSAGE 'ERROR: Failed to send report to printer ' +:g_printer +'. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
    ELSE
      MESSAGE 'NOTE: Report successfully sent to printer ' +:g_printer + '. '
      WITH STYLE = POPUP;
    ENDIF;

  ENDIF;
}

'End' , KEY FRSKEY14 =
{
  MESSAGE 'Exiting Screen . . .';

  h_return = CALLPROC msa_fp_drop_table ( h_table = :h_tmp_table);

  RETURN 0;
}

/************************** LOCAL PROCEDURES *******************************/


/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing 
            ( h_num_row_ck      = :p_num_row_ck,
              h_commit          = 'Y',
              h_rollback        = 'N',
              h_retries         = :h_retries,
              h_retries_allowed = :h_retries_allowed,
              h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}

/*=======================================================================
    Local procedure to check sql for errors during sections of code that
    utilise personal temp tables. Committed, no rollback.
=======================================================================*/

PROCEDURE lp_error_check (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing 
            ( h_num_row_ck = :p_num_row_ck,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

  RETURN IFNULL(:lp_return,9);

}

