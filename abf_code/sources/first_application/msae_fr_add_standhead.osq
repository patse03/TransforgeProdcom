INITIALIZE () =

DECLARE h_retries_allowed      = INTEGER1    NOT NULL,
        h_retries              = INTEGER1    NOT NULL,
        h_idbr                 = CHAR(11)    NOT NULL,
        h_dummy                = CHAR(11)    NOT NULL,
        h_dummy_id             = VARCHAR(8)  NOT NULL,
        h_retry_or_not         = CHAR(5)     NOT NULL,
        h_inquiry              = INTEGER1    NOT NULL,
        h_annual_period        = INTEGER4    NOT NULL,
        h_max_period           = INTEGER4    NOT NULL,
        h_industry_cycle_point = CHAR(1)     NOT NULL,
        h_access               = CHAR(1)     NOT NULL,
        h_count                = INTEGER4    NOT NULL,
        h_frpr_name            = VARCHAR(24) NOT NULL,
        h_return               = INTEGER1    NOT NULL,

        lp_full_error_check    = PROCEDURE RETURNING INTEGER,

{
  SELECT DBMSINFO('username') AS g_user_id;
  SELECT DBMSINFO('database') AS g_database;

  SET_FORMS FRS (MAPFILE='/home/prodcom/admin/prodcom.map');

  msa_date = 'now';
  h_retries_allowed = 3;
  h_frpr_name = 'msae_fr_rec_standhead';

  SET_FORMS FIELD '' (INVISIBLE(add_name1) = 1,
                      INVISIBLE(contributor_industry) = 1);

  /*----------------------------------------------------------------------
       Access check. (Error messages handled by procedure.)
  ----------------------------------------------------------------------*/
  
  h_return = CALLPROC check_access_frames (p_frpr_name = :h_frpr_name);

  IF h_return = 1 
  THEN
    RETURN 0;
  ELSEIF h_return > 1
  THEN
    RETURN 9;
  ENDIF;
  
}

FIELD contributor_reference =
{
  MESSAGE 'Checking Contributor . . .';

  h_return = CALLPROC msa_fp_get_ref 
           ( h_idbr                = BYREF(:h_idbr),
             h_dummy               = BYREF(:h_dummy),
             contributor_reference = :contributor_reference);

  IF h_return = 1
  THEN
    RESUME FIELD contributor_reference;
  ELSEIF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

  contributor_reference = :h_idbr;

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT add_name1
    FROM   contributor
    WHERE  contributor_reference = :contributor_reference;

    h_return = CALLPROC lp_full_error_check(p_num_row_ck  = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'ERROR: Failed to access the contributor table. '
          + 'Error code 9. Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    MESSAGE 'WARNING: This Contributor does not exist. Please try again... '
    WITH STYLE = POPUP;
    RESUME FIELD contributor_reference;
  ENDIF;

  SET_FORMS FIELD '' (INVISIBLE(add_name1) = 0);
  RESUME FIELD period;

}

FIELD period =
{

  MESSAGE 'Checking Period . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT contributor_industry,
           inquiry AS h_inquiry
    FROM   contributor_period
    WHERE  contributor_reference = :contributor_reference
    AND    period = :period;

    h_return = CALLPROC lp_full_error_check(p_num_row_ck  = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'ERROR: Failed to access the contributor period table. '
          + 'Error code 9. Please contact IM immediately.'
    WITH STYLE = POPUP;
        RETURN 9;

  ELSEIF h_return = 1
  THEN
    MESSAGE 'WARNING: This Contributor has not been selected for '
          + VARCHAR(:period) +'.'
    WITH STYLE = POPUP;
    RESUME FIELD period;
  ENDIF;

  h_annual_period = :period / 100 * 100;

  SET_FORMS FIELD '' (INVISIBLE(contributor_industry) = 0);
  REDISPLAY;

  /*------------------------------------------------------------------
     Check on cqpv to see if the standard headings already exist
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT COUNT(*) AS h_count
    FROM   cqpv
    WHERE  contributor_reference = :contributor_reference
      AND  period = :period
      AND  quest_order NOT IN (1,12);

    h_return = CALLPROC lp_full_error_check(p_num_row_ck  = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'ERROR: Failed to access the CQPV table. '
          + 'Error code 9. Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;

  ENDIF;

  IF h_count != 0
  THEN
    MESSAGE 'WARNING: There are already ' + VARCHAR(:h_count) 
          + ' standard heading questions for Contributor ' 
          + :contributor_reference + ' for Period ' 
          + VARCHAR(:period) + '.'
    WITH STYLE = POPUP;

    CLEAR FIELD ALL;
    msa_date = 'now';
    SET_FORMS FIELD '' (INVISIBLE(add_name1) = 1,
                        INVISIBLE(contributor_industry) = 1);
    RESUME FIELD contributor_reference;
  ENDIF;

  /*------------------------------------------------------------------
     Check on industry to see what cycle_point we're at
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT industry_cycle_point AS h_industry_cycle_point
    FROM   industry
    WHERE  industry = :contributor_industry;

    h_return = CALLPROC lp_full_error_check(p_num_row_ck  = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'ERROR: Failed to access the Industry table. '
          + 'Error code 9. Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    MESSAGE 'ERROR: This Industry was not found on the Industry table.'
    WITH STYLE = POPUP;
    RETURN 9;

  ENDIF;

  /*------------------------------------------------------------------
     Find latest period
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT IFNULL(MAX(period),0) AS h_max_period
    FROM   inquiry_period
    WHERE  inquiry = :h_inquiry;

    h_return = CALLPROC lp_full_error_check(p_num_row_ck  = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'ERROR: Failed to access the Inquiry Period table. '
          + 'Error code 9. Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    MESSAGE 'ERROR: No rows found on the Inquiry Period table. '
          + 'Error code 1. Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;

  ENDIF;

  /*------------------------------------------------------------------
     Only compare cycle points if it's the latest period
  ------------------------------------------------------------------*/

  IF h_max_period = period
  THEN

    IF  :h_industry_cycle_point != 'Q' 
    AND :h_industry_cycle_point != 'F'
    THEN
      MESSAGE 'WARNING: Question selection has not yet run for this industry, ' 
            + 'therefore standard heading questions may not be added.'
      WITH STYLE = POPUP;
      CLEAR FIELD ALL;
      msa_date = 'now';
      SET_FORMS FIELD '' (INVISIBLE(add_name1) = 1,
                          INVISIBLE(contributor_industry) = 1);
      RESUME FIELD contributor_reference;
    ENDIF;

  ENDIF;

  /*------------------------------------------------------------------
     Create table of headings
  ------------------------------------------------------------------*/

  MESSAGE 'Creating Standard Headings . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    INSERT INTO cqpv
    SELECT      :contributor_reference AS contributor_reference,
                quest_order,
                question,
                :period AS period,
                :h_inquiry AS contributor_inquiry,
                :contributor_industry AS contributor_industry,
                question_iNdustry,
                'N' AS acell,
                0 AS avalue,
                ' ' AS acell_type,
                0 AS aconstruction_type,
                0 AS evalue,
                'N' AS fcell,
                0 AS fvalue,
                ' ' AS fcell_type,
                0 AS fconstruction_type,
                ' ' AS confirmation_code,
                ' ' AS confirmation_date,
                'N' AS atypical
    FROM        question_library
    WHERE       question_industry = :contributor_industry
    AND         quest_order NOT IN (1,12)
    AND         period = :h_annual_period;

    h_return = CALLPROC lp_full_error_check(p_num_row_ck  = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'ERROR: Failed to insert into the CQPV table. '
          + 'Error code 9. Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    MESSAGE 'ERROR: No standard headings founbd for this industry. '
          + 'Error code 1. Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  MESSAGE 'SUCCESS: Standard heading questions added for Contributor ' 
        + :contributor_reference + ' for Period ' + VARCHAR(:period) + '.'
  WITH STYLE = POPUP;

  CLEAR FIELD ALL;
  msa_date = 'now';
  SET_FORMS FIELD '' (INVISIBLE(add_name1) = 1,
                      INVISIBLE(contributor_industry) = 1);
  RESUME FIELD contributor_reference;

}

'Help', KEY FRSKEY1 =
{
  HELP_FORMS(SUBJECT = 'HELP',
             FILE    = :g_help + '/' + :h_frpr_name + '.hlp');
}

'Clear', KEY FRSKEY12 =
{
  CLEAR FIELD ALL;
  msa_date = 'now';
  SET_FORMS FIELD '' (INVISIBLE(add_name1) = 1,
                      INVISIBLE(contributor_industry) = 1);
  RESUME FIELD contributor_reference;
}

'End', KEY FRSKEY14 =
{
  RETURN 0;
}
/*********************** LOCAL PROCEDURES ******************************/


/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing 
            ( h_num_row_ck = :p_num_row_ck,
              h_commit          = 'Y',
              h_rollback        = 'N',
              h_retries         = :h_retries,
              h_retries_allowed = :h_retries_allowed,
              h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}

