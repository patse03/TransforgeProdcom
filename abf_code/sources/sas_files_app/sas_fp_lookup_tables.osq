
/*--------------------------------------------------------------
    This procedure transfers tables to flat files
--------------------------------------------------------------*/

PROCEDURE sas_fp_lookup_tables ()=

DECLARE   ret_val           = INTEGER4 NOT NULL,
          h_frpr_name       = VARCHAR(25) NOT NULL,
          h_period          = INTEGER4 NOT NULL,
          start_period      = INTEGER4 NOT NULL,
          end_period        = INTEGER4 NOT NULL,
          froz_period       = INTEGER4 NOT NULL,
          h_industry        = INTEGER4 NOT NULL,
          h_count           = INTEGER4 NOT NULL,
          h_table           = VARCHAR(24) NOT NULL,
          h_copy_table1     = VARCHAR(24) NOT NULL,
          h_copy_out        = VARCHAR(48) NOT NULL,
          h_command         = VARCHAR(500) NOT NULL,
          h_directory       = VARCHAR(100) NOT NULL,
          h_to_database     = VARCHAR(10) NOT NULL,
	  tables_exist      = procedure returning integer
{
    h_frpr_name  = 'sas_fp_lookup_tables';

    SELECT DBMSINFO('database') AS g_dbname;

    IF g_dbname = 'prodlivedb'
    THEN
        g_path_name1 = '/prodcom/live5/files/sas';
        g_path_name2 = '/prodcom/live5/files/sas';
    ELSE
         g_path_name1 = '/prodcom/source/produser/files/sas';
         g_path_name2 = '/prodcom/source/produser/files/sas';
    ENDIF;

    h_copy_table1 = 'questlib';
    h_copy_out = :g_path_name1 + '/questlib';
    ret_val = CALLPROC sas_fp_drop_table (
              h_table = :h_copy_table1);

    IF ret_val = 9
    THEN
        RETURN 9;
    ENDIF;


    MESSAGE 'Creating question library table';
    
    CREATE TABLE :h_copy_table1 
    AS SELECT 
	  question              ,
	  period                ,
	  question_industry     ,
	  quest_order           ,
          inquiry               ,
	  lag                   ,
	  unit_1                ,
	  cred_q                ,
	  text_line1            ,
	  text_line2            ,
	  text_line3            ,
	  text_line4            ,
	  text_line5            ,
	  text_line6            ,
	  text_line7            ,
	  text_line8            ,
	  text_line9            ,
	  text_line10           
	  FROM question_library
	  WITH LOCATION = (prod2);



    ret_val = CALLPROC sas_check_inq_ing (
              h_num_row_ck = 1,
              h_rollback   = 'N',
              h_commit     = 'Y',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        ret_val = CALLPROC sas_fp_log_message (
                  h_text = 'Error creating ' + :h_copy_table1,
                  h_frpr_name = :h_frpr_name);
        RETURN 9;
    ENDIF;

    MESSAGE 'Copying question library table to delimited file';
    
    COPY table :h_copy_table1
    (
	  question              = c(0)'^' ,
	  period                = c(0)'^' ,
	  question_industry     = c(0)'^' ,
	  quest_order           = c(0)'^' ,
	  inquiry               = c(0)'^' ,
	  lag                   = c(0)'^' ,
	  unit_1                = c(0)'^' ,
	  cred_q                = c(0)'^' ,
	  text_line1            = c(0)'^' ,
	  text_line2            = c(0)'^',
	  text_line3            = c(0)'^' ,
	  text_line4            = c(0)'^',
	  text_line5            = c(0)'^',
	  text_line6            = c(0)'^',
	  text_line7            = c(0)'^',
	  text_line8            = c(0)'^',
	  text_line9            = c(0)'^',
	  text_line10           = c0nl )
    INTO :h_copy_out;


    ret_val = CALLPROC sas_check_inq_ing (
              h_num_row    = BYREF(:h_count),
              h_num_row_ck = 1,
              h_rollback   = 'N',
              h_commit     = 'Y',
              h_frpr_name  = :h_frpr_name);


    IF ret_val <> 0
    THEN
            ret_val = CALLPROC sas_fp_log_message (
                      h_text = 'Error copying question data  ' ,
                      h_frpr_name = :h_frpr_name);
            RETURN 9;
    ENDIF;

    h_copy_table1 = 'cutoff';
    h_copy_out = :g_path_name1 + '/cutoff';
    ret_val = CALLPROC sas_fp_drop_table (
              h_table = :h_copy_table1);

    IF ret_val = 9
    THEN
        RETURN 9;
    ENDIF;


    MESSAGE 'Creating cutoff table';
    
    CREATE TABLE :h_copy_table1 
    AS SELECT 
	  industry              ,
	  period                ,
	  emp_cutoff            
	  FROM industry_period
	  WITH LOCATION = (prod2);



    ret_val = CALLPROC sas_check_inq_ing (
              h_num_row_ck = 1,
              h_rollback   = 'N',
              h_commit     = 'Y',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        ret_val = CALLPROC sas_fp_log_message (
                  h_text = 'Error creating ' + :h_copy_table1,
                  h_frpr_name = :h_frpr_name);
        RETURN 9;
    ENDIF;

    MESSAGE 'Copying cutoff table to delimited file';
    
    COPY table :h_copy_table1
    (
	  industry              = c(0)'^' ,
	  period                = c(0)'^' ,
	  emp_cutoff            = c0nl )
    INTO :h_copy_out;


    ret_val = CALLPROC sas_check_inq_ing (
              h_num_row    = BYREF(:h_count),
              h_num_row_ck = 1,
              h_rollback   = 'N',
              h_commit     = 'Y',
              h_frpr_name  = :h_frpr_name);


    IF ret_val <> 0
    THEN
            ret_val = CALLPROC sas_fp_log_message (
                      h_text = 'Error copying cutoff data  ' ,
                      h_frpr_name = :h_frpr_name);
            RETURN 9;
    ENDIF;

    h_copy_table1 = 'ownquest';
    h_copy_out = :g_path_name1 + '/owner';

    ret_val = CALLPROC sas_fp_drop_table (
              h_table = :h_copy_table1);

    IF ret_val = 9
    THEN
        RETURN 9;
    ENDIF;


    MESSAGE 'Creating owner question table';
    
    CREATE TABLE :h_copy_table1 
    AS SELECT 
	  owner_question        ,
	  a.question            ,
	  question_industry                ,
	  inquiry                ,
	  a.period              ,
	  '  ' as chanflag                ,
	  '  ' as incnflag                ,
	  '                    '  as otype                ,
	  '                    '  as mtype               
	  FROM owner_question  a,
	       question_library b
	  WHERE a.question = b.question
	  AND a.period = b.period
	  WITH LOCATION = (prod2);



    ret_val = CALLPROC sas_check_inq_ing (
              h_num_row_ck = 1,
              h_rollback   = 'N',
              h_commit     = 'Y',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        ret_val = CALLPROC sas_fp_log_message (
                  h_text = 'Error creating ' + :h_copy_table1,
                  h_frpr_name = :h_frpr_name);
        RETURN 9;
    ENDIF;

    update :h_copy_table1 a
    from question_library b
     set mtype=unit_1
	  WHERE a.question = b.question
	  AND a.period = b.period;

    update :h_copy_table1 a
    from question_library b
     set otype=unit_1
	  WHERE a.owner_question = b.question
	  AND a.period = b.period;

    MESSAGE 'Copying owner table to delimited file';
    
    COPY table :h_copy_table1
    (
	  owner_question        = c(0)'^' ,
	  question              = c(0)'^' ,
	  question_industry                = c(0)'^' ,
	  inquiry                = c(0)'^' ,
	  period                = c(0)'^' ,
	  chanflag                = c(0)'^' ,
	  incnflag                = c(0)'^' ,
	  otype                = c(0)'^' ,
	  mtype     = c0nl )
    INTO :h_copy_out;


    ret_val = CALLPROC sas_check_inq_ing (
              h_num_row    = BYREF(:h_count),
              h_num_row_ck = 1,
              h_rollback   = 'N',
              h_commit     = 'Y',
              h_frpr_name  = :h_frpr_name);


    IF ret_val <> 0
    THEN
            ret_val = CALLPROC sas_fp_log_message (
                      h_text = 'Error copying owner question data  ' ,
                      h_frpr_name = :h_frpr_name);
            RETURN 9;
    ENDIF;

    h_copy_out = :g_path_name1 + '/queshist';


    MESSAGE 'Copying history table to delimited file';
    
    COPY table question_history
    (
	  new_question          = c(0)'^' ,
	  old_question          = c(0)'^' ,
	  period                = c(0)'^' ,
	  rep_type              = c0nl )
    INTO :h_copy_out;


    ret_val = CALLPROC sas_check_inq_ing (
              h_num_row    = BYREF(:h_count),
              h_num_row_ck = 1,
              h_rollback   = 'N',
              h_commit     = 'Y',
              h_frpr_name  = :h_frpr_name);


    IF ret_val <> 0
    THEN
            ret_val = CALLPROC sas_fp_log_message (
                      h_text = 'Error copying question_hist data  ' ,
                      h_frpr_name = :h_frpr_name);
            RETURN 9;
    ENDIF;


    MESSAGE 'Copying lookup table to delimited file';
    

    h_copy_out = :g_path_name1 + '/plookup';

    COPY table prodcom_lookup
    (
	  prodcom_code          = c(0)'^' ,
	  period                = c(0)'^' ,
	  cn_codes              = c0nl )
    INTO :h_copy_out;


    ret_val = CALLPROC sas_check_inq_ing (
              h_num_row    = BYREF(:h_count),
              h_num_row_ck = 1,
              h_rollback   = 'N',
              h_commit     = 'Y',
              h_frpr_name  = :h_frpr_name);


    IF ret_val <> 0
    THEN
            ret_val = CALLPROC sas_fp_log_message (
                      h_text = 'Error copying lookup data  ' ,
                      h_frpr_name = :h_frpr_name);
            RETURN 9;
    ENDIF;

    h_copy_out = :g_path_name1 + '/pcncodes';

    MESSAGE 'Copying cncodes table to delimited file';
    
    COPY table prodcom_cncodes
    (
	  period                = c(0)'^' ,
	  prodcom_code          = c(0)'^' ,
	  need_count            = c(0)'^' ,
	  cn_code1              = c(0)'^',
	  cn_code2              = c(0)'^' ,
	  cn_code3              = c(0)'^',
	  cn_code4              = c(0)'^',
	  cn_code5              = c(0)'^',
	  cn_code6              = c(0)'^',
	  cn_code7              = c(0)'^',
	  cn_code8              = c(0)'^',
	  cn_code9              = c0nl )
    INTO :h_copy_out;


    ret_val = CALLPROC sas_check_inq_ing (
              h_num_row    = BYREF(:h_count),
              h_num_row_ck = 1,
              h_rollback   = 'N',
              h_commit     = 'Y',
              h_frpr_name  = :h_frpr_name);


    IF ret_val <> 0
    THEN
            ret_val = CALLPROC sas_fp_log_message (
                      h_text = 'Error copying prodcom cndata data  ' ,
                      h_frpr_name = :h_frpr_name);
            RETURN 9;
    ENDIF;

    h_copy_table1 = 'discd';

    h_copy_out = :g_path_name1 + '/discdesp';

    ret_val = CALLPROC sas_fp_drop_table (

              h_table = :h_copy_table1);

    IF ret_val = 9
    THEN
        RETURN 9;
    ENDIF;

   MESSAGE 'Creating disc despatch question table';

       CREATE TABLE :h_copy_table1
	   AS SELECT * from dsc_response
	  WITH LOCATION = (prod2);


    ret_val = CALLPROC sas_check_inq_ing (
              h_num_row    = BYREF(:h_count),
              h_num_row_ck = 1,
              h_rollback   = 'N',
              h_commit     = 'Y',
              h_frpr_name  = :h_frpr_name);


    IF ret_val <> 0
    THEN
            ret_val = CALLPROC sas_fp_log_message (
                      h_text = 'Error copying prodcom disc despatch ' ,
                      h_frpr_name = :h_frpr_name);
            RETURN 9;
    ENDIF;
    
/*    
    MESSAGE 'Updating disc despatch';

    UPDATE :h_copy_table1
    SET disc_type ='.'
    WHERE disc_type = '';

    ret_val = CALLPROC sas_check_inq_ing (
              h_num_row    = BYREF(:h_count),
              h_num_row_ck = 1,
              h_rollback   = 'N',
              h_commit     = 'Y',
              h_frpr_name  = :h_frpr_name);


    IF ret_val <> 0
    THEN
            ret_val = CALLPROC sas_fp_log_message (
                      h_text = 'Error updating 1 prodcom disc despatch ' ,
                      h_frpr_name = :h_frpr_name);
            RETURN 9;
    ENDIF;
    
    
    MESSAGE 'Updating disc despatch';

    UPDATE :h_copy_table1
    SET resp_type ='.'
    WHERE resp_type = '';

    ret_val = CALLPROC sas_check_inq_ing (
              h_num_row    = BYREF(:h_count),
              h_num_row_ck = 1,
              h_rollback   = 'N',
              h_commit     = 'Y',
              h_frpr_name  = :h_frpr_name);


    IF ret_val <> 0
    THEN
            ret_val = CALLPROC sas_fp_log_message (
                      h_text = 'Error updating 2 prodcom disc despatch ' ,
                      h_frpr_name = :h_frpr_name);
            RETURN 9;
    ENDIF;
    
    
    MESSAGE 'Updating disc despatch';

    UPDATE :h_copy_table1
    SET company_name ='.'
    WHERE company_name = '';

    ret_val = CALLPROC sas_check_inq_ing (
              h_num_row    = BYREF(:h_count),
              h_num_row_ck = 1,
              h_rollback   = 'N',
              h_commit     = 'Y',
              h_frpr_name  = :h_frpr_name);


    IF ret_val <> 0
    THEN
            ret_val = CALLPROC sas_fp_log_message (
                      h_text = 'Error updating 3 prodcom disc despatch ' ,
                      h_frpr_name = :h_frpr_name);
            RETURN 9;
    ENDIF;
*/    
    MESSAGE 'Copying disc despatch table to delimited file';
    
    COPY table :h_copy_table1
    (
	  contributor_reference  = c(0)'^' ,
	  industry               = c(0)'^' ,
	  disc_question_industry = c(0)'^' ,
	  question               = c(0)'^' ,
	  period                 = c(0)'^' ,
	  enterprise             = c(0)'^' ,
	  despatch_date          = c(0)'^' ,
	  receipt_date           = c(0)'^' ,
	  disc_type              = c(0)'^' ,
	  resp_type              = c(0)'^' ,
	  company_name           = c0nl )
    INTO :h_copy_out;


    ret_val = CALLPROC sas_check_inq_ing (
              h_num_row    = BYREF(:h_count),
              h_num_row_ck = 1,
              h_rollback   = 'N',
              h_commit     = 'Y',
              h_frpr_name  = :h_frpr_name);


    IF ret_val <> 0
    THEN
            ret_val = CALLPROC sas_fp_log_message (
                      h_text = 'Error copying disc despatch  data  ' ,
                      h_frpr_name = :h_frpr_name);
            RETURN 9;
    ENDIF;
    h_copy_table1 = 'ind_class';
    h_copy_out = :g_path_name1 + '/indclass';
    ret_val = CALLPROC sas_fp_drop_table (
              h_table = :h_copy_table1);

    IF ret_val = 9
    THEN
        RETURN 9;
    ENDIF;


    MESSAGE 'Creating industrty class table';
    
    CREATE TABLE :h_copy_table1 
    AS SELECT 
	  class              ,
	  sub_class           
	  FROM industry_class_level
	  WITH LOCATION = (prod2);



    ret_val = CALLPROC sas_check_inq_ing (
              h_num_row_ck = 1,
              h_rollback   = 'N',
              h_commit     = 'Y',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        ret_val = CALLPROC sas_fp_log_message (
                  h_text = 'Error creating ' + :h_copy_table1,
                  h_frpr_name = :h_frpr_name);
        RETURN 9;
    ENDIF;

    MESSAGE 'Copying industry class table to delimited file';
    
    COPY table :h_copy_table1
    (
	  class                 = c(0)'^' ,
	  sub_class             = c0nl )
    INTO :h_copy_out;


    ret_val = CALLPROC sas_check_inq_ing (
              h_num_row    = BYREF(:h_count),
              h_num_row_ck = 1,
              h_rollback   = 'N',
              h_commit     = 'Y',
              h_frpr_name  = :h_frpr_name);


    IF ret_val <> 0
    THEN
            ret_val = CALLPROC sas_fp_log_message (
                      h_text = 'Error copying industry class data  ' ,
                      h_frpr_name = :h_frpr_name);
            RETURN 9;
    ENDIF;

    RETURN 0;
}
PROCEDURE tables_exist(table_name = char(24) not null) =

{

  SELECT table_name
  FROM   iitables
  WHERE  table_name = :table_name
  AND    table_owner = :g_user_id;

  ret_val = CALLPROC sas_check_inq_ing(h_num_row_ck = 1,
			      h_commit     = 'Y',
                              h_rollback   = 'N',
                              h_frpr_name = :h_frpr_name);

  RETURN ret_val;

}
