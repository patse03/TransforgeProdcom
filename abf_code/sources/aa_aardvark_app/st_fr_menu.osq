
/*****************************************************************************
  DESCRIPTION: Store main menu. 

  CREATED: Michelle Cranshaw November 2012

  CHANGES:

*****************************************************************************/

INITIALIZE () =

DECLARE h_retries_allowed = INTEGER1    NOT NULL,
        h_retries         = INTEGER1    NOT NULL,
        h_retry_or_not    = CHAR(5)     NOT NULL,
        h_frpr_name       = VARCHAR(24) NOT NULL,
        h_return          = INTEGER1    NOT NULL,

        lp_error_check      = PROCEDURE RETURNING INTEGER,
        lp_full_error_check = PROCEDURE RETURNING INTEGER
{

  SET_FORMS FRS (MAPFILE='/home/prodcom/admin/prodcom.map');
  SELECT DBMSINFO('username') AS g_user_id;


  h_frpr_name = 'st_fr_menu';
  msa_date    = 'now';


  s_user_name = SHIFT(:g_user_name, (((40-LENGTH(g_user_name))/2)*1));

  REDISPLAY;
}

/*----------------------------------------------------------------------
   Main menu routing.
----------------------------------------------------------------------*/

FIELD choice =
BEGIN

  g_option = IFNULL(:choice,0);

  IF choice = 1
  THEN
    CALLFRAME st_fr_view_item;

   ELSEIF choice = 2
   THEN
     MESSAGE 'IN DEVELOPMENT: This will call up screens to backup data tables.'
     WITH STYLE = POPUP;

   ELSEIF choice = 3
   THEN
     MESSAGE 'IN DEVELOPMENT: This will call up screens to backup data tables.'
     WITH STYLE = POPUP;

   ELSEIF choice = 4
   THEN
     MESSAGE 'IN DEVELOPMENT: This will call up screens to backup data tables.'
     WITH STYLE = POPUP;

   ELSEIF choice = 5
   THEN
     MESSAGE 'IN DEVELOPMENT: This will call up screens to backup data tables.'
     WITH STYLE = POPUP;

   ELSEIF choice = 6
   THEN
     MESSAGE 'IN DEVELOPMENT: This will call up screens to backup data tables.'
     WITH STYLE = POPUP;

  ELSEIF choice = 0
  THEN
     EXIT;

  ELSE
     RESUME FIELD choice;

  ENDIF;

IF h_return != 0 THEN RETURN; ENDIF;

RESUME FIELD choice;

END;


/*=======================================================================
   FRSKEY4: View application status - Check status and version history.
=======================================================================

'App Status', KEY FRSKEY4 =
{
  CALLFRAME control_0a_fr();
  RESUME FIELD choice;
 }*/


/*=======================================================================
   FRSKEY6:  View Table Status - Check table status and history.
======================================================================

'Table Status', KEY FRSKEY6 =
{
  CALLFRAME control_0b_fr();
  RESUME FIELD choice;
}
*/

/*=======================================================================
   FRSKEY8:  View Table Groups - View or Edit table groups.
======================================================================

'View/Edit Groups', KEY FRSKEY8 =
{
  CALLFRAME control_6x_fr();
  RESUME FIELD choice;
}
*/

/****************************************************************************/
/*********************** LOCAL PROCEDURES ***********************************/
/****************************************************************************/

/*===========================================================================
	      Local procedure for error checking within retry loop.
============================================================================*/

PROCEDURE lp_full_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

lp_return = CALLPROC check_inq_ing ( h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = :h_retries,
                                    h_retries_allowed = :h_retries_allowed,
                                    h_frpr_name       = 'val_gates_1.fr');
RETURN :lp_return;

END

/*===========================================================================
	      Local procedure for basic error checking.
============================================================================*/

PROCEDURE lp_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

lp_return = CALLPROC check_inq_ing ( h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = 1,
                                    h_retries_allowed = 1,
                                    h_frpr_name       = 'val_gates_1.fr');
RETURN :lp_return;

END
