/*-s--------------------------------------------------------------------
Disclosure Despatch Lists:
Gets data from disc_printing, which was inserted into by the main
run of disclosure letters
--------------------------------------------------------------------e-*/

PROCEDURE msar_fp_cr_despatch () =

DECLARE ret_val              = INTEGER4 NOT NULL,
        h_rep_table          = VARCHAR(24) NOT NULL,
        print_name           = VARCHAR(30) NOT NULL,
        h_frpr_name          = VARCHAR(24) NOT NULL

{
    h_frpr_name = 'msar_fp_cr_despatch';
    h_rep_table = 'temp_disc_desplist';

    /*------------------------------------------------------------------
     GB Despatch list
    ------------------------------------------------------------------*/

    MESSAGE 'Creating GB Despatch Table . . .';

    ret_val = CALLPROC batch_fp_drop_table (
              h_table = :h_rep_table);

    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    CREATE TABLE :h_rep_table
    AS SELECT    a.*,
                 'UNKNOWN                 ' AS user_name
    FROM         disc_printing a
    WHERE        period = :g_period
    AND          region <> 'YY';

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'System error creating GB ' + :h_rep_table,
                    :h_frpr_name,
                    9,
                    :g_user_id);
        COMMIT;
        RETURN 9;

    ELSEIF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error creating GB ' + :h_rep_table,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;

    /*------------------------------------------------------------------
    Put the Coordinator's Name on
    ------------------------------------------------------------------*/

    MESSAGE 'Updating GB Industry Owners . . .';

    UPDATE :h_rep_table a
    FROM   passwords b,
           industry_staff c
    SET    user_name = b.user_name
    WHERE  a.question_industry = c.industry
    AND    c.user_id = b.user_id
    AND    c.grade = 'DATA COORDINATOR'
    and    b.user_id <> 'prod007'
    AND    b.user_name NOT LIKE '%BLOGGS%';

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'System error updating username on ' + :g_rep_table,
                    :h_frpr_name,
                    9,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;

    print_name = 'disc_despatch_gb_' + VARCHAR(:g_period) + '.rpt';

    MESSAGE 'Preparing GB Report . . .';

    ret_val = CALLPROC msa_cp_callsys (
              'report ' +
              :g_database +
              ' ''(rep_table = "' + :h_rep_table + '"' +
              ',period = ' + VARCHAR(:g_period) +
              ',country = "GB"' +
              ')'' -i$REPORTS/msar_rw_disc_despatch.rw' +
              ' -f$PRINTOUT/' + :print_name +
              ' > report.output 2> report.output');

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error calling GB msar_rw_disc_despatch.rw',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*------------------------------------------------------------------
     Print the GB Despatch List

    ret_val = CALLPROC msa_cp_callsys (
	      'lp -drxp -oLANZ+NPN+SIMPLEX+?FOR_DRILLING?+%1.325% ' +
	      '$PRINTOUT/' + :print_name +
              ' >> report.output 2>> report.output');

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error printing GB Despatch List',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;
    ------------------------------------------------------------------*/

    /*------------------------------------------------------------------
     NI Despatch list
    ------------------------------------------------------------------*/

    MESSAGE 'Creating NI Despatch Table . . .';

    ret_val = CALLPROC batch_fp_drop_table (
              h_table = :h_rep_table);

    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    CREATE TABLE :h_rep_table
    AS SELECT    a.*,
                 'UNKNOWN                 ' AS user_name
    FROM         disc_printing a
    WHERE        period = :g_period
    AND          region = 'YY';

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'System error creating NI ' + :h_rep_table,
                    :h_frpr_name,
                    9,
                    :g_user_id);
        COMMIT;
        RETURN 9;

    ELSEIF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error creating NI ' + :h_rep_table,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;

    /*------------------------------------------------------------------
    Put the Coordinator's Name on
    ------------------------------------------------------------------*/

    MESSAGE 'Updating NI Industry Owners . . .';

    UPDATE :h_rep_table a
    FROM   passwords b,
           industry_staff c
    SET    user_name = b.user_name
    WHERE  a.question_industry = c.industry
    AND    c.user_id = b.user_id
    AND    c.grade = 'DATA COORDINATOR'
    and    b.user_id <> 'prod007'
    AND    b.user_name NOT LIKE '%BLOGGS%';

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'System error updating username on ' + :g_rep_table,
                    :h_frpr_name,
                    9,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;

    print_name = 'disc_despatch_ni_' + VARCHAR(:g_period) + '.rpt';

    MESSAGE 'Preparing NI Report . . .';

    ret_val = CALLPROC msa_cp_callsys (
              'report ' +
              :g_database +
              ' ''(rep_table = "' + :h_rep_table + '"' +
              ',period = ' + VARCHAR(:g_period) +
              ',country = "NI"' +
              ')'' -i$REPORTS/msar_rw_disc_despatch.rw' +
              ' -f$PRINTOUT/' + :print_name +
              ' > report.output 2> report.output');

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error calling NI msar_rw_disc_despatch.rw',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*------------------------------------------------------------------
     Print the NI Despatch List

    ret_val = CALLPROC msa_cp_callsys (
	      'lp -drxp -oLANZ+NPN+SIMPLEX+?FOR_DRILLING?+%1.325% ' +
	      '$PRINTOUT/' + :print_name +
              ' >> report.output 2>> report.output');

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error printing NI Despatch List',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;
    ------------------------------------------------------------------*/

    ret_val = CALLPROC batch_fp_drop_table (
              h_table = :h_rep_table);

    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    RETURN 0;
}
