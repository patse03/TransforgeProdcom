
/*----------------------------------------------------------------------
This creates the question text in char(57) slices
----------------------------------------------------------------------*/

PROCEDURE msada_fp_create_chopped_quests () =

DECLARE h_frpr_name            = VARCHAR(24) NOT NULL,
        h_table                = VARCHAR(24) NOT NULL,
        h_question             = INTEGER4 NOT NULL,
        h_position             = INTEGER4 NOT NULL,
        h_counter              = INTEGER4 NOT NULL,
        ret_val                = INTEGER1 NOT NULL,
        industry               = INTEGER4 NOT NULL,
        h_full_text            = VARCHAR(650) NOT NULL,
        h_text1                = VARCHAR(57) NOT NULL,
        h_text2                = VARCHAR(57) NOT NULL,
        h_text3                = VARCHAR(57) NOT NULL,
        h_text4                = VARCHAR(57) NOT NULL,
        h_text5                = VARCHAR(57) NOT NULL,
        h_text6                = VARCHAR(57) NOT NULL,
        h_text7                = VARCHAR(57) NOT NULL,
        h_text8                = VARCHAR(57) NOT NULL,
        h_text9                = VARCHAR(57) NOT NULL,
        h_text10               = VARCHAR(57) NOT NULL,
        h_text11               = VARCHAR(57) NOT NULL,
        h_text12               = VARCHAR(57) NOT NULL,
        h_text13               = VARCHAR(57) NOT NULL,
        h_text14               = VARCHAR(57) NOT NULL,
        h_text15               = VARCHAR(57) NOT NULL,
        h_small_line           = VARCHAR(58) NOT NULL,
        h_search1              = INTEGER2 NOT NULL,
        h_search2              = INTEGER2 NOT NULL,
        h_search3              = INTEGER2 NOT NULL,
        h_search4              = INTEGER2 NOT NULL,
        h_search5              = INTEGER2 NOT NULL,
        h_search6              = INTEGER2 NOT NULL,
        h_param_list           = CHAR(10) NOT NULL,
        h_varchar_variable     = CHAR(10) NOT NULL,
        h_param1               = VARCHAR(10) NOT NULL,
        h_integer_variable     = INTEGER1 NOT NULL
{

    h_frpr_name = 'msada_fp_create_chopped_quests';
    MESSAGE 'Creating Questions . . .';

    /*------------------------------------------------------------------
    See if this is the EntryPoint into the application
    Parameters = AnnualPeriod
    ------------------------------------------------------------------*/

    h_param_list = CALLPROC CommandLineParameters ();

    h_varchar_variable = SQUEEZE(h_param_list);
    h_integer_variable = LOCATE(h_varchar_variable, ' ');
    h_param1           = LEFT(h_varchar_variable, h_integer_variable-1);

    IF g_annual_period = 0
    THEN
        SELECT MAX(period) AS g_annual_period
        FROM   inquiry_period
        WHERE  inquiry = 14;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);

        IF ret_val = 9
        THEN
            INSERT INTO error_log
            VALUES(     'now',
                        'System Error on Inquiry_period',
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;

	IF INT4(h_param1) <> :g_annual_period + 100
	AND INT4(h_param1) <> :g_annual_period
	AND INT4(h_param1) <> :g_annual_period - 100
	AND INT4(h_param1) <> :g_annual_period - 200
        THEN
            INSERT INTO error_log
            VALUES(     'now',
                        :h_param1 + ' is not a valid Annual period ',
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN 9;
        ENDIF;
	g_annual_period = INT4(:h_param1);
    ENDIF;

    h_table = 'form_quest_text';

    ret_val = CALLPROC batch_fp_drop_table (
	      h_table = :h_table);

    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    CREATE TABLE :h_table (
                 question   INTEGER4 NOT NULL,
                 line_count INTEGER4 NOT NULL,
                 text1      VARCHAR(57) NOT NULL,
                 text2      VARCHAR(57) NOT NULL,
                 text3      VARCHAR(57) NOT NULL,
                 text4      VARCHAR(57) NOT NULL,
                 text5      VARCHAR(57) NOT NULL,
                 text6      VARCHAR(57) NOT NULL,
                 text7      VARCHAR(57) NOT NULL,
                 text8      VARCHAR(57) NOT NULL,
                 text9      VARCHAR(57) NOT NULL,
                 text10     VARCHAR(57) NOT NULL,
                 text11     VARCHAR(57) NOT NULL,
                 text12     VARCHAR(57) NOT NULL,
                 text13     VARCHAR(57) NOT NULL,
                 text14     VARCHAR(57) NOT NULL,
                 text15     VARCHAR(57) NOT NULL);

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error creating ' + :h_table,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*------------------------------------------------------------------
    The only questions whose text is required are lags 0, 2 & 5 for
    value questions (not standard headings)
    ------------------------------------------------------------------*/
    SELECT   question_industry as industry,
	     question AS h_question,
             SQUEEZE( text_line1 + ' ' +
                      text_line2 + ' ' +
                      text_line3 + ' ' +
                      text_line4 + ' ' +
                      text_line5 + ' ' +
                      text_line6 + ' ' +
                      text_line7 + ' ' +
                      text_line8 + ' ' +
                      text_line9 + ' ' +
                      text_line10) AS h_full_text
    FROM     question_library
    WHERE    period = :g_annual_period
    AND      quest_order = 1
    AND      MOD(question,10) = 1
    AND      lag IN (0,2,5)
    ORDER BY h_question
    {
        MESSAGE 'Question ' + VARCHAR(:h_question) + ' . . .';

        h_counter = 1;
        h_text1 = '';
        h_text2 = '';
        h_text3 = '';
        h_text4 = '';
        h_text5 = '';
        h_text6 = '';
        h_text7 = '';
        h_text8 = '';
        h_text9 = '';
        h_text10 = '';
        h_text11 = '';
        h_text12 = '';
        h_text13 = '';
        h_text14 = '';
        h_text15 = '';

        WHILE LENGTH(:h_full_text) > 0
        DO
            h_position = 58;

            WHILE CHAREXTRACT(:h_full_text,:h_position) <> ' '
            DO
                h_position = :h_position - 1;
            ENDWHILE;

           /*----------------------------------------------------------
            The following code was added September 2004 to make the 
            text split onto a new line when printed on the form, if the
            strings listed were found. It was originally needed for 
            the Paper/Printing industries 22110 etc but it will work 
            for all industries. 
            ---------------------------------------------------------*/
           /*----------------------------------------------------------
            We now have the longest line that has fewer than 58
	    characters. Make it all one case for easier checking
            ---------------------------------------------------------*/

         h_small_line = UPPERCASE(LEFT(:h_full_text,:h_position));
       

           /*----------------------------------------------------------
	    Now see if any of the words-to-start-new-line-at exist 
	    This assumes that all the words have a leading space (this
	    will stop a newline being thrown if the word-to-be-found is
	    at the start of a line already)

	    If LOCATE does not find anything then it returns 1 more
	    than the length of the string
            ---------------------------------------------------------*/

            h_search1 = LOCATE(:h_small_line, ' INCLUDING');

            IF h_search1 = 1
            THEN
                h_search1 = 59
            ENDIF;    

            h_search2 = LOCATE(:h_small_line, ' EXCLUDING');
            if h_search2 = 1
            THEN
                h_search2 = 59
            ENDIF;    

            h_search3 = LOCATE(:h_small_line, 'WORK DONE');
            IF h_search3 = 1
            THEN
                h_search3 = 59
            ENDIF;    

            h_search4 = LOCATE(:h_small_line, '(INTERNET');
            IF h_search4 = 1
            THEN
                h_search4 = 59
            ENDIF;    

            h_search5 = LOCATE(:h_small_line, '(FOR ');
            IF h_search5 = 1
            THEN
                h_search5 = 59
            ENDIF;    



           /*----------------------------------------------------------
            Check each one. If you've found one that starts before the
	    current end of line position, set the end of line position
	    to the start position of what you've found. Once you've
	    checked them all you'll have the start position of the
	    FIRST word you've found, regardless of how many times they
	    appear on the line
	    Subtract 1 so you don't include the leading space
            ---------------------------------------------------------*/

            IF h_search1 < h_position
            THEN
                h_position = h_search1 -1;
            ENDIF;

            IF h_search2 < h_position
            THEN
                h_position = h_search2 -1;
            ENDIF;

            IF h_search3 < h_position
            THEN
                h_position = h_search3 -1;
            ENDIF;

            IF h_search4 < h_position
            THEN
                h_position = h_search4 -1;
            ENDIF;
            IF h_search5 < h_position
            THEN
                h_position = h_search5 -1;
            ENDIF;


           /*----------------------------------------------------------
            If none of the words-to-start-new-line-at were found then
	    h_position will not have been changed.

	    The text had to be squeezed below as some times it was not
	    appearing at the left most space on the form
            ---------------------------------------------------------*/

            IF h_counter = 1
            THEN
                h_text1 = SQUEEZE(LEFT(:h_full_text,:h_position));
            ELSEIF h_counter = 2
            THEN
                h_text2 = SQUEEZE(LEFT(:h_full_text,:h_position));
            ELSEIF h_counter = 3
            THEN
                h_text3 = SQUEEZE(LEFT(:h_full_text,:h_position));
            ELSEIF h_counter = 4
            THEN
                h_text4 = SQUEEZE(LEFT(:h_full_text,:h_position));
            ELSEIF h_counter = 5
            THEN
                h_text5 = SQUEEZE(LEFT(:h_full_text,:h_position));
            ELSEIF h_counter = 6
            THEN
                h_text6 = SQUEEZE(LEFT(:h_full_text,:h_position));
            ELSEIF h_counter = 7
            THEN
                h_text7 = SQUEEZE(LEFT(:h_full_text,:h_position));
            ELSEIF h_counter = 8
            THEN
                h_text8 = SQUEEZE(LEFT(:h_full_text,:h_position));
            ELSEIF h_counter = 9
            THEN
                h_text9 = SQUEEZE(LEFT(:h_full_text,:h_position));
            ELSEIF h_counter = 10
            THEN
                h_text10 = SQUEEZE(LEFT(:h_full_text,:h_position));
            ELSEIF h_counter = 11
            THEN
                h_text11 = SQUEEZE(LEFT(:h_full_text,:h_position));
            ELSEIF h_counter = 12
            THEN
                h_text12 = SQUEEZE(LEFT(:h_full_text,:h_position));
            ELSEIF h_counter = 13
            THEN
                h_text13 = SQUEEZE(LEFT(:h_full_text,:h_position));
            ELSEIF h_counter = 14
            THEN
                h_text14 = SQUEEZE(LEFT(:h_full_text,:h_position));
            ELSEIF h_counter = 15
            THEN
                h_text15 = SQUEEZE(LEFT(:h_full_text,:h_position));
            ENDIF;

            h_full_text = SHIFT(:h_full_text, - :h_position);
            h_counter = :h_counter + 1;

        ENDWHILE;

        INSERT INTO :h_table (
                    question,
                    line_count,
                    text1,
                    text2,
                    text3,
                    text4,
                    text5,
                    text6,
                    text7,
                    text8,
                    text9,
                    text10,
                    text11,
                    text12,
                    text13,
                    text14,
                    text15)
       VALUES (     :h_question,
                    :h_counter - 1,
                    :h_text1,
                    :h_text2,
                    :h_text3,
                    :h_text4,
                    :h_text5,
                    :h_text6,
                    :h_text7,
                    :h_text8,
                    :h_text9,
                    :h_text10,
                    :h_text11,
                    :h_text12,
                    :h_text13,
                    :h_text14,
                    :h_text15);

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);

        IF ret_val <> 0
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error inserting into ' + :h_table,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    };

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error selecting from question_library',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    MODIFY    :h_table TO BTREE
    UNIQUE ON question;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error modifying ' + :h_table,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    RETURN 0;
}
