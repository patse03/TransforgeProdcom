
PROCEDURE msada_fp_create_cncodes  () =

DECLARE prodcom_code       = INTEGER4 NOT NULL,
        period             = INTEGER4 NOT NULL,
        prodcom_store      = INTEGER4 NOT NULL,
        cn_codes           = CHAR(8) NOT NULL,
        h_counter          = INTEGER1 NOT NULL,
        concat_row1        = CHAR(54) NOT NULL,
        concat_row2        = CHAR(54) NOT NULL,
        concat_row3        = CHAR(54) NOT NULL,
        concat_row4        = CHAR(54) NOT NULL,
        concat_row5        = CHAR(54) NOT NULL,
        concat_row6        = CHAR(54) NOT NULL,
        concat_row7        = CHAR(54) NOT NULL,
        concat_row8        = CHAR(54) NOT NULL,
        concat_row9        = CHAR(54) NOT NULL,
        h_param_list       = CHAR(10) NOT NULL,
        h_varchar_variable = CHAR(10) NOT NULL,
        h_param1           = VARCHAR(10) NOT NULL,
        h_integer_variable = INTEGER1 NOT NULL,
        h_count            = INTEGER1 NOT NULL,
        h_table            = CHAR(25) NOT NULL,
        h_frpr_name        = CHAR(25) NOT NULL,
        ret_val            = INTEGER4 NOT NULL

{

    h_frpr_name = 'msada_fp_create_cncodes';
    MESSAGE 'Creating CN Codes . . .';
    /*------------------------------------------------------------------
    See if this is the EntryPoint into the application
    Parameters = AnnualPeriod
    ------------------------------------------------------------------*/

    h_param_list = CALLPROC CommandLineParameters ();

    h_varchar_variable = SQUEEZE(h_param_list);
    h_integer_variable = LOCATE(h_varchar_variable, ' ');
    h_param1           = LEFT(h_varchar_variable, h_integer_variable-1);

    IF g_annual_period = 0
    THEN
        SELECT MAX(period) AS g_annual_period
        FROM   inquiry_period
        WHERE  inquiry = 14;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);

        IF ret_val = 9
        THEN
            INSERT INTO error_log
            VALUES(     'now',
                        'System Error on Inquiry_period',
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;

	IF INT4(h_param1) <> :g_annual_period + 100
	AND INT4(h_param1) <> :g_annual_period - 100
	AND INT4(h_param1) <> :g_annual_period
	AND INT4(h_param1) <> :g_annual_period - 200
        THEN
            INSERT INTO error_log
            VALUES(     'now',
                        :h_param1 + ' is not a valid Annual period ',
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN 9;
        ENDIF;
	g_annual_period = INT4(:h_param1);
    ENDIF;

    h_table = 'temp_prodcom_cncodes';

    ret_val = CALLPROC batch_fp_drop_table (
	      h_table = :h_table);

    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    CREATE TABLE :h_table  (
    period        INTEGER4 NOT NULL,
    prodcom_code  INTEGER4 NOT NULL,
    need_count    INTEGER1 NOT NULL,
    cn_code1      CHAR(54) NOT NULL,
    cn_code2      CHAR(54) NOT NULL,
    cn_code3      CHAR(54) NOT NULL,
    cn_code4      CHAR(54) NOT NULL,
    cn_code5      CHAR(54) NOT NULL,
    cn_code6      CHAR(54) NOT NULL,
    cn_code7      CHAR(54) NOT NULL,
    cn_code8      CHAR(54) NOT NULL,
    cn_code9      CHAR(54) NOT NULL);

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error creating ' + :h_table,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    h_count = 1;
    prodcom_store = 0;

    SELECT   cn_codes,
             prodcom_code,
             period
    FROM     prodcom_lookup
    WHERE    period = :g_annual_period
    ORDER BY period,
             prodcom_code
    {
        IF prodcom_store <> 0
        THEN
            IF prodcom_code <> prodcom_store
            THEN
                h_count = h_count - 1;
                IF (h_count > 0 AND h_count < 6)
                THEN
                    concat_row1 = CONCAT(concat_row1,ASCII(')'));
                    h_counter = 1;
                ELSEIF (h_count > 5 AND h_count < 11)
                THEN
                    concat_row2 = CONCAT(concat_row2,ASCII(')'));
                    h_counter = 2;
                ELSEIF (h_count > 10 AND h_count < 16)
                THEN
                    concat_row3 = CONCAT(concat_row3,ASCII(')'));
                    h_counter = 3;
                ELSEIF (h_count > 15 AND h_count < 21)
                THEN
                    concat_row4 = CONCAT(concat_row4,ASCII(')'));
                    h_counter = 4;
                ELSEIF (h_count > 20 AND h_count < 26)
                THEN
                    concat_row5 = CONCAT(concat_row5,ASCII(')'));
                    h_counter = 5;
                ELSEIF (h_count > 25 AND h_count < 31)
                THEN
                    concat_row6 = CONCAT(concat_row6,ASCII(')'));
                    h_counter = 6;
                ELSEIF (h_count > 30 AND h_count < 36)
                THEN
                    concat_row7 = CONCAT(concat_row7,ASCII(')'));
                    h_counter = 7;
                ELSEIF (h_count > 35 AND h_count < 41)
                THEN
                    concat_row8 = CONCAT(concat_row8,ASCII(')'));
                    h_counter = 8;
                ELSEIF (h_count > 40 AND h_count < 46)
                THEN
                    concat_row9 = CONCAT(concat_row9,ASCII(')'));
                    h_counter = 9;
                ENDIF;

                INSERT INTO :h_table
                VALUES (    :g_annual_period,
                            :prodcom_store,
                            :h_counter,
                            :concat_row1,
                            :concat_row2,
                            :concat_row3,
                            :concat_row4,
                            :concat_row5,
                            :concat_row6,
                            :concat_row7,
                            :concat_row8,
                            :concat_row9);

                ret_val = CALLPROC batch_check_inq_ing (
                          h_num_row_ck = 1,
                          h_commit     = 'Y',
                          h_rollback   = 'N',
                          h_frpr_name  = :h_frpr_name);

                IF ret_val <> 0
                THEN
                    INSERT INTO error_log
                    VALUES(     'now',
                                'error inserting into ' + :h_table,
                                :h_frpr_name,
                                :ret_val,
                                :g_user_id);
                    COMMIT;
                    RETURN ret_val;
                ENDIF;

                concat_row1 = '';
                concat_row2 = '';
                concat_row3 = '';
                concat_row4 = '';
                concat_row5 = '';
                concat_row6 = '';
                concat_row7 = '';
                concat_row8 = '';
                concat_row9 = '';
                h_count = 1;

            ENDIF;
        ENDIF;

        IF h_count = 1
        THEN
            concat_row1 = :cn_codes;
            h_count = 2;

        ELSEIF (h_count > 1  AND h_count < 6)
        THEN
            concat_row1 = CONCAT(concat_row1, (CONCAT(' + ',ASCII(:cn_codes))));
            h_count = h_count + 1;

        ELSEIF h_count = 6
        THEN
            concat_row2 = :cn_codes;
            h_count = 7;

        ELSEIF (h_count > 5 AND h_count < 11)
        THEN
            concat_row2 = CONCAT(concat_row2, (CONCAT(' + ',ASCII(:cn_codes))));
            h_count = h_count + 1;

        ELSEIF h_count = 11
        THEN
            concat_row3 = :cn_codes;
            h_count = 12;

        ELSEIF (h_count > 10 AND h_count < 16)
        THEN
            concat_row3 = CONCAT(concat_row3, (CONCAT(' + ',ASCII(:cn_codes))));
            h_count = h_count + 1;

        ELSEIF h_count = 16
        THEN
            concat_row4 = :cn_codes;
            h_count = 17;

        ELSEIF (h_count > 15 AND h_count < 21)
        THEN
            concat_row4 = CONCAT(concat_row4, (CONCAT(' + ',ASCII(:cn_codes))));
            h_count = h_count + 1;

        ELSEIF h_count = 21
        THEN
            concat_row5 = :cn_codes;
            h_count = 22;

        ELSEIF (h_count > 20 AND h_count < 26)
        THEN
            concat_row5 = CONCAT(concat_row5, (CONCAT(' + ',ASCII(:cn_codes))));
            h_count = h_count + 1;

        ELSEIF h_count = 26
        THEN
            concat_row6 = :cn_codes;
            h_count = 27;

        ELSEIF (h_count > 25 AND h_count < 31)
        THEN
            concat_row6 = CONCAT(concat_row6, (CONCAT(' + ',ASCII(:cn_codes))));
            h_count = h_count + 1;

        ELSEIF h_count = 31
        THEN
            concat_row7 = :cn_codes;
            h_count = 32;

        ELSEIF (h_count > 30 AND h_count < 36)
        THEN
            concat_row7 = CONCAT(concat_row7, (CONCAT(' + ',ASCII(:cn_codes))));
            h_count = h_count + 1;

        ELSEIF h_count = 36
        THEN
            concat_row8 = :cn_codes;
            h_count = 37;

        ELSEIF (h_count > 35 AND h_count < 41)
        THEN
            concat_row8 = CONCAT(concat_row8, (CONCAT(' + ',ASCII(:cn_codes))));
            h_count = h_count + 1;

        ELSEIF h_count = 41
        THEN
            concat_row9 = :cn_codes;
            h_count = 42;

        ELSEIF (h_count > 40 AND h_count < 46)
        THEN
            concat_row9 = CONCAT(concat_row9, (CONCAT(' + ',ASCII(:cn_codes))));
            h_count = h_count + 1;
        ENDIF;
        prodcom_store = :prodcom_code;
    };

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error selecting from prodcom_lookup',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    MODIFY    :h_table TO BTREE
    UNIQUE ON prodcom_code,
              period;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error modifying ' + :h_table,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*------------------------------------------------------------------
     Set need counts
    ------------------------------------------------------------------*/

    UPDATE :h_table a
    FROM   question_library b
    SET    need_count = a.need_count + b.line_count
    WHERE  a.prodcom_code = b.question
    AND    b.period = :g_annual_period;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error updating 1st need count',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    UPDATE :h_table a
    FROM   question_library b
    SET    need_count = a.need_count + 3
    WHERE  a.prodcom_code + 1 = b.question
    AND    b.period = :g_annual_period;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error updating 2nd need count',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    UPDATE :h_table a
    FROM   question_library b
    SET    need_count = a.need_count + 3
    WHERE  a.prodcom_code + 3 = b.question
    AND    b.period = :g_annual_period;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error updating 3rd need count',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    UPDATE :h_table a
    FROM   question_library b
    SET    need_count = a.need_count + 3
    WHERE  a.prodcom_code + 4 = b.question
    AND    b.period = :g_annual_period;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error updating 4th need count',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    UPDATE :h_table a
    FROM   question_library b
    SET    need_count = a.need_count + 3
    WHERE  a.prodcom_code + 5 = b.question
    AND    b.period = :g_annual_period;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error updating 5th need count',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    UPDATE :h_table a
    FROM   question_library b
    SET    need_count = a.need_count + 3
    WHERE  a.prodcom_code + 7 = b.question
    AND    b.period = :g_annual_period;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error updating 6th need count',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    UPDATE :h_table a
    FROM   question_library b
    SET    need_count = a.need_count + 3
    WHERE  a.prodcom_code + 8 = b.question
    AND    b.period = :g_annual_period;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error updating 7th need count',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    UPDATE :h_table
    SET    need_count = need_count + 5;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error adding 5 to needcounts on ' + :h_table,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*------------------------------------------------------------------
      Delete from and insert into the live prodcom_cncodes
    ------------------------------------------------------------------*/

    DELETE FROM prodcom_cncodes
    WHERE       period = :g_annual_period;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error deleting from prodcom_cncodes',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    INSERT INTO prodcom_cncodes
    SELECT      *
    FROM        :h_table;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error inserting into prodcom_cncodes',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    ret_val = CALLPROC batch_fp_drop_table (
	      h_table = :h_table);

    RETURN 0;
}
