PROCEDURE msada_fp_first_table (

        h_industry              = INTEGER4 NOT NULL) =

DECLARE ret_val                 = INTEGER4 NOT NULL,
        h_table                 = VARCHAR(25) NOT NULL,
        h_contributor_reference = CHAR(11) NOT NULL,
        h_letter                = CHAR(1) NOT NULL,
        h_frpr_name             = VARCHAR(25) NOT NULL

{
    h_frpr_name = 'msada_fp_first_table';

    IF g_output_category <> 'NI' AND g_output_category <> 'SM'
    THEN
        h_table = 'first_' +
                  VARCHAR(:g_period) + '_' +
                  VARCHAR(:h_industry) + '_' +
                  LOWERCASE(:g_output_category);
    ELSE
        h_table = 'first_' +
                  VARCHAR(:g_period) + '_' +
                  LOWERCASE(:g_output_category);
    ENDIF;

    ret_val = CALLPROC batch_fp_drop_table(h_table = :h_table);
    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    /*-s----------------------------------------------------------------
     If it is a reminders run select the contributor_references from the
     table set up during reminders otherwise select all
     contributor_references
    ----------------------------------------------------------------e-*/

    IF g_output_category <> 'NI' AND g_output_category <> 'SM'
    THEN
        IF :g_form_type = 'M'
        THEN
            CREATE TABLE :h_table
            AS SELECT    a.contributor_reference,
                         ' ' AS check_letter, 
                         'N' AS scanned, 
                         a.output_category,
                         a.contributor_industry AS industry,
                         a.region,
                         b.ext1 AS ao_ext1,
                         b.ext2 AS ao_ext2,
                         b.ext3 AS ao_ext3,
                         b.name1 AS ao_name1,
                         b.name2 AS ao_name2,
                         b.name3 AS ao_name3,
			 f.email AS ao_email,
                         a.structure AS structure,
                         c.addressee AS designator,
                         c.add_name1 AS addrline1,
                         c.add_name2 AS addrline2,
                         c.add_name3 AS addrline3,
                         c.add_tradstyle1 AS addrline4,
                         c.add_tradstyle2 AS addrline5,
                         c.add_tradstyle3 AS addrline6,
                         c.add_line1 AS addrline7,
                         c.add_line2 AS addrline8,
                         c.add_line3 AS addrline9,
                         c.add_line4 AS addrline10,
                         c.add_line5 AS addrline11,
                         c.add_postcode AS addrline12,
                         d.barcode AS barcodeline,
                         d.fax_barcode1,
                         d.fax_barcode2,
                         d.fax_barcode3,
                         d.fax_barcode4,
                         d.fax_barcode5,
                         a.lu_count AS lu_count,
			 a.legal_status,
                         INT1(0) as wales,
			 a.currency
            FROM         contributor_period a,
                         :g_analysts_table b,
                         contributor c,
                         :g_barcode_table d,
                         idbr_sec_reminders e,
			 passwords f
            WHERE        a.output_category = :g_output_category
            AND          a.period = :g_period
            AND          a.period = e.period
            AND          a.contributor_industry = :h_industry
            AND          a.contributor_industry = b.industry
            AND          a.contributor_reference = c.contributor_reference
            AND          a.contributor_reference = d.contributor_reference
            AND          a.contributor_reference = e.contributor_reference
            AND          d.contributor_reference = e.contributor_reference
            AND          c.contributor_reference = e.contributor_reference
	    AND          UPPERCASE(b.name1) = f.user_name; 
    
        ELSE
            CREATE TABLE :h_table
            AS SELECT    a.contributor_reference,
                         ' ' AS check_letter, 
                         'N' AS scanned, 
                         a.output_category,
                         a.contributor_industry AS industry,
                         a.region,
                         b.ext1 AS ao_ext1,
                         b.ext2 AS ao_ext2,
                         b.ext3 AS ao_ext3,
                         b.name1 AS ao_name1,
                         b.name2 AS ao_name2,
                         b.name3 AS ao_name3,
			 e.email AS ao_email,
                         a.structure AS structure,
                         c.addressee AS designator,
                         c.add_name1 AS addrline1,
                         c.add_name2 AS addrline2,
                         c.add_name3 AS addrline3,
                         c.add_tradstyle1 AS addrline4,
                         c.add_tradstyle2 AS addrline5,
                         c.add_tradstyle3 AS addrline6,
                         c.add_line1 AS addrline7,
                         c.add_line2 AS addrline8,
                         c.add_line3 AS addrline9,
                         c.add_line4 AS addrline10,
                         c.add_line5 AS addrline11,
                         c.add_postcode AS addrline12,
                         d.barcode AS barcodeline,
                         d.fax_barcode1,
                         d.fax_barcode2,
                         d.fax_barcode3,
                         d.fax_barcode4,
                         d.fax_barcode5,
                         a.lu_count AS lu_count,
			 a.legal_status,
                         INT1(0) as wales,
			 a.currency
            FROM         contributor_period a,
                         :g_analysts_table b,
                         contributor c,
                         :g_barcode_table d,
			 passwords e
            WHERE        a.output_category = :g_output_category
            AND          a.period = :g_period
            AND          a.contributor_industry = :h_industry
            AND          a.contributor_industry = b.industry
            AND          a.contributor_reference = c.contributor_reference
            AND          a.contributor_reference = d.contributor_reference
	    AND          UPPERCASE(b.name1) = e.user_name; 
        ENDIF;
    ELSE

        /*--------------------------------------------------------------
        NI
        --------------------------------------------------------------*/
        if g_output_category = 'NI'
        then
            IF :g_form_type = 'M'
            THEN
            CREATE TABLE :h_table
            AS SELECT    a.contributor_reference,
                         ' ' AS check_letter, 
                         'N' AS scanned, 
                         a.output_category,
                         a.contributor_industry AS industry,
                         a.region,
                         b.ext1 AS ao_ext1,
                         b.ext2 AS ao_ext2,
                         b.ext3 AS ao_ext3,
                         b.name1 AS ao_name1,
                         b.name2 AS ao_name2,
                         b.name3 AS ao_name3,
			 f.email AS ao_email,
                         a.structure AS structure,
                         c.addressee AS designator,
                         c.add_name1 AS addrline1,
                         c.add_name2 AS addrline2,
                         c.add_name3 AS addrline3,
                         c.add_tradstyle1 AS addrline4,
                         c.add_tradstyle2 AS addrline5,
                         c.add_tradstyle3 AS addrline6,
                         c.add_line1 AS addrline7,
                         c.add_line2 AS addrline8,
                         c.add_line3 AS addrline9,
                         c.add_line4 AS addrline10,
                         c.add_line5 AS addrline11,
                         c.add_postcode AS addrline12,
                         d.barcode AS barcodeline,
                         d.fax_barcode1,
                         d.fax_barcode2,
                         d.fax_barcode3,
                         d.fax_barcode4,
                         d.fax_barcode5,
                         a.lu_count AS lu_count,
                         a.legal_status,
                         INT1(0) as wales,
			 a.currency
            FROM         contributor_period a,
                         :g_analysts_table b,
                         contributor c,
                         :g_barcode_table d,
                         idbr_sec_reminders e,
			 passwords f
            WHERE        a.output_category IN ('F','G','J','M','N','P','H','K','V')
            AND          a.period = :g_period
            AND          a.period = e.period
            AND          a.contributor_industry = b.industry
            AND          a.contributor_reference = c.contributor_reference
            AND          a.contributor_reference = d.contributor_reference
            AND          a.contributor_reference = e.contributor_reference
            AND          d.contributor_reference = e.contributor_reference
            AND          c.contributor_reference = e.contributor_reference
	    AND          UPPERCASE(b.name1) = f.user_name 
	    AND          a.region = 'YY' ;
    
        ELSE
            CREATE TABLE :h_table
            AS SELECT    a.contributor_reference,
                         ' ' AS check_letter, 
                         'N' AS scanned, 
                         a.output_category,
                         a.contributor_industry AS industry,
                         a.region,
                         b.ext1 AS ao_ext1,
                         b.ext2 AS ao_ext2,
                         b.ext3 AS ao_ext3,
                         b.name1 AS ao_name1,
                         b.name2 AS ao_name2,
                         b.name3 AS ao_name3,
			 e.email AS ao_email,
                         a.structure AS structure,
                         c.addressee AS designator,
                         c.add_name1 AS addrline1,
                         c.add_name2 AS addrline2,
                         c.add_name3 AS addrline3,
                         c.add_tradstyle1 AS addrline4,
                         c.add_tradstyle2 AS addrline5,
                         c.add_tradstyle3 AS addrline6,
                         c.add_line1 AS addrline7,
                         c.add_line2 AS addrline8,
                         c.add_line3 AS addrline9,
                         c.add_line4 AS addrline10,
                         c.add_line5 AS addrline11,
                         c.add_postcode AS addrline12,
                         d.barcode AS barcodeline,
                         d.fax_barcode1,
                         d.fax_barcode2,
                         d.fax_barcode3,
                         d.fax_barcode4,
                         d.fax_barcode5,
                         a.lu_count AS lu_count,
                         a.legal_status,
                         INT1(0) as wales,
			 a.currency
            FROM         contributor_period a,
                         :g_analysts_table b,
                         contributor c,
                         :g_barcode_table d,
			 passwords e
            WHERE        a.output_category IN ('F','G','J','M','N','P','H','K','V')
            AND          a.period = :g_period
            AND          a.contributor_industry = b.industry
            AND          a.contributor_reference = c.contributor_reference
            AND          a.contributor_reference = d.contributor_reference
	    AND          UPPERCASE(b.name1) = e.user_name 
	    AND          a.region = 'YY';

        ENDIF;

/*new*/
    ELSEIF g_output_category = 'SM'
    THEN
        IF :g_form_type = 'M'
        THEN
            
            CREATE TABLE :h_table
            AS SELECT    a.contributor_reference,
                         ' ' AS check_letter, 
                         'N' AS scanned, 
                         a.output_category,
                         a.contributor_industry AS industry,
                         a.region,
                         b.ext1 AS ao_ext1,
                         b.ext2 AS ao_ext2,
                         b.ext3 AS ao_ext3,
                         b.name1 AS ao_name1,
                         b.name2 AS ao_name2,
                         b.name3 AS ao_name3,
			 f.email AS ao_email,
                         a.structure AS structure,
                         c.addressee AS designator,
                         c.add_name1 AS addrline1,
                         c.add_name2 AS addrline2,
                         c.add_name3 AS addrline3,
                         c.add_tradstyle1 AS addrline4,
                         c.add_tradstyle2 AS addrline5,
                         c.add_tradstyle3 AS addrline6,
                         c.add_line1 AS addrline7,
                         c.add_line2 AS addrline8,
                         c.add_line3 AS addrline9,
                         c.add_line4 AS addrline10,
                         c.add_line5 AS addrline11,
                         c.add_postcode AS addrline12,
                         d.barcode AS barcodeline,
                         d.fax_barcode1,
                         d.fax_barcode2,
                         d.fax_barcode3,
                         d.fax_barcode4,
                         d.fax_barcode5,
                         a.lu_count AS lu_count,
                         a.legal_status,
                         INT1(0) as wales,
			 a.currency
            FROM         contributor_period a,
                         :g_analysts_table b,
                         contributor c,
                         :g_barcode_table d,
                         idbr_sec_reminders e,
			 passwords f
            WHERE        a.output_category IN ('H','K','V')
            AND          a.period = :g_period
            AND          a.period = e.period
            AND          a.contributor_industry = b.industry
            AND          a.contributor_reference = c.contributor_reference
            AND          a.contributor_reference = d.contributor_reference
            AND          a.contributor_reference = e.contributor_reference
            AND          d.contributor_reference = e.contributor_reference
            AND          c.contributor_reference = e.contributor_reference
	    AND          UPPERCASE(b.name1) = f.user_name 
	    AND          a.region <> 'YY';
    
        ELSE
            CREATE TABLE :h_table
            AS SELECT    a.contributor_reference,
                         ' ' AS check_letter, 
                         'N' AS scanned, 
                         a.output_category,
                         a.contributor_industry AS industry,
                         a.region,
                         b.ext1 AS ao_ext1,
                         b.ext2 AS ao_ext2,
                         b.ext3 AS ao_ext3,
                         b.name1 AS ao_name1,
                         b.name2 AS ao_name2,
                         b.name3 AS ao_name3,
			 e.email AS ao_email,
                         a.structure AS structure,
                         c.addressee AS designator,
                         c.add_name1 AS addrline1,
                         c.add_name2 AS addrline2,
                         c.add_name3 AS addrline3,
                         c.add_tradstyle1 AS addrline4,
                         c.add_tradstyle2 AS addrline5,
                         c.add_tradstyle3 AS addrline6,
                         c.add_line1 AS addrline7,
                         c.add_line2 AS addrline8,
                         c.add_line3 AS addrline9,
                         c.add_line4 AS addrline10,
                         c.add_line5 AS addrline11,
                         c.add_postcode AS addrline12,
                         d.barcode AS barcodeline,
                         d.fax_barcode1,
                         d.fax_barcode2,
                         d.fax_barcode3,
                         d.fax_barcode4,
                         d.fax_barcode5,
                         a.lu_count AS lu_count,
                         a.legal_status,
                         INT1(0) as wales,
			 a.currency
            FROM         contributor_period a,
                         :g_analysts_table b,
                         contributor c,
                         :g_barcode_table d,
			 passwords e
            WHERE        a.output_category IN ('H','K','V')
            AND          a.period = :g_period
            AND          a.contributor_industry = b.industry
            AND          a.contributor_reference = c.contributor_reference
            AND          a.contributor_reference = d.contributor_reference
	    AND          UPPERCASE(b.name1) = e.user_name 
	    AND          a.region <> 'YY';
         ENDIF;
    ENDIF;
    endif;
    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error creating ' + :h_table,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    MODIFY :h_table TO BTREE UNIQUE ON contributor_reference;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error modifying ' + :h_table,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*-s----------------------------------------------------------------
    Mark the scanned contributors
    ----------------------------------------------------------------e-*/

    MESSAGE 'Updating Scanned Contributors . . .';

    UPDATE :h_table a
    FROM   bto_despatch b
    SET    scanned = 'Y'
    WHERE  a.contributor_reference = b.contributor_reference
    AND    b.period = :g_period;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error updating scanned marker on ' + :h_table,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*-s----------------------------------------------------------------
    Mark the welsh postcode contributors from file passed from IDBR
    ----------------------------------------------------------------e-*/

    MESSAGE 'Updating Welsh Contributors . . .';

    UPDATE :h_table a
    FROM   welsh_contributor b
    SET    wales = 1
    WHERE  a.contributor_reference = b.contributor_reference
    AND    b.period = :g_period;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error updating wales marker on ' + :h_table,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    /*-s----------------------------------------------------------------
    Update First Table with ao details for 18120 depending on ref range.

    June 2012 - DF - Recoded to remove hard coding, now basing on table
    industry_analysts which will also be used for take-on screen access
    control.
    ----------------------------------------------------------------e-*/

    UPDATE   :h_table a
    FROM     industry_analysts b
    SET      ao_name1 = b.name,
             ao_ext1  = b.ext
    WHERE    a.industry = 18120
      AND    a.industry = b.industry
      AND    a.contributor_reference >= b.low_ref
      AND    a.contributor_reference <= b.high_ref;

    ret_val = CALLPROC batch_check_inq_ing ( h_num_row_ck = 1,
                                             h_commit     = 'Y',
                                             h_rollback   = 'N',
                                             h_frpr_name  = :h_frpr_name);

    IF ret_val > 1  
    THEN
      INSERT INTO error_log
      VALUES ( 'now',
               'Error updating analyst details for 18120 on ' + :h_table,
               :h_frpr_name,
               :ret_val,
               :g_user_id);
      COMMIT;
      RETURN ret_val;
    ENDIF;

    /*-s----------------------------------------------------------------
     Add checkletter
    ----------------------------------------------------------------e-*/

    SELECT contributor_reference AS h_contributor_reference
    FROM   :h_table
    {
        ret_val = CALLPROC msa_cp_check_digit (
                  :h_contributor_reference,
                  BYREF(:h_letter));

        IF ret_val <> 0
        THEN
            INSERT INTO error_log
            VALUES(     'now',
                        'Error calling msa_cp_check_digit',
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;

        UPDATE :h_table
        SET    check_letter = :h_letter
        WHERE  contributor_reference = :h_contributor_reference;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);

        IF ret_val <> 0
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating check_letter on ' + :h_table,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;

    };

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error selecting from ' + :h_table,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    ret_val = CALLPROC batch_fp_drop_table(h_table = :g_barcode_table);
    
    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

/*--------------------------------------------------------------------
  append the data from the industry/output_category table into the 
  main first_table 
--------------------------------------------------------------------*/

    INSERT INTO first_table 
    SELECT *
    FROM 	:h_table;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error inserting into first_table from ' + :h_table,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    MODIFY first_table TO BTREE ON contributor_reference;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 0,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val > 1
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error modifying to key first_table on contributor ref',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    RETURN 0;

}
