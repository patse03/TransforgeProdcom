INITIALIZE () =

DECLARE h_retries_allowed = INTEGER1      NOT NULL,
        h_retries         = INTEGER1      NOT NULL,
        h_retry_or_not    = CHAR(5)       NOT NULL,
        h_return          = INTEGER1      NOT NULL,
        h_return2         = INTEGER1      NOT NULL,
        h_prompt          = CHAR(1)       NOT NULL,
        h_who             = CHAR(3)       NOT NULL,
        h_fullname        = VARCHAR(40)   NOT NULL,
        h_dummy           = INTEGER4      NOT NULL,
        h_frpr_name       = VARCHAR(24)   NOT NULL,
        h_message         = VARCHAR(70)   NOT NULL,
        h_title           = VARCHAR(80)   NOT NULL,
        h_command         = VARCHAR(1000) NOT NULL,
        h_filename        = VARCHAR(60)   NOT NULL,

        lp_error_check          = PROCEDURE RETURNING INTEGER

{

SELECT DBMSINFO('username') AS g_user_id;
SELECT DBMSINFO('database') AS g_database;
SET_FORMS FRS (TIMEOUT = gc_timeout);

h_frpr_name = 'production_test_fr';
msa_date = 'now';

h_title = 'PRODCOM PRODUCTION CONTROL TESTCARD';
s_title = SHIFT(:h_title, (((80-LENGTH(h_title))/2)*1));
s_who = :g_who;
s_user_id = :g_user_id;
s_database = :g_database;

}

/*=======================================================================
   FRSKEY12: (F12) ABORT - Return to main menu.
======================================================================*/

'BACK', KEY FRSKEY12 = 
BEGIN
  RETURN;
END

/*=====================================================================
                              Timeout Errors
======================================================================*/

ON TIMEOUT =
BEGIN

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_allowed   = 3;

WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
DO

  h_retries = :h_retries + 1;

  DELETE FROM   inter_image_params
  WHERE         user_id = :g_user_id;

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return <> 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return = 7
THEN
  EXIT;

 ELSEIF h_return > 1
 THEN
  MESSAGE 'ERROR: System error whilst trying to delete from IIP record.'
           WITH STYLE = POPUP;

ENDIF;

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_allowed   = 3;

WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
DO

  h_retries = :h_retries + 1;

  INSERT INTO error_log (
              error_time,
              error_text,
              frpr_name,
              error_code,
              user_id)
  VALUES (    'now',
              'TIMEOUT',
              :h_frpr_name,
               0,
              :g_user_id);

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return <> 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return = 7
THEN
  EXIT;

 ELSEIF h_return = 9
 THEN
   MESSAGE 'Timeout: System error inserting into error_log'
            WITH STYLE = POPUP;

 ELSEIF h_return = 1
 THEN
  MESSAGE 'Timeout: No record inserted into error_log'
           WITH STYLE = POPUP;
ENDIF;

EXIT;

END


/****************************************************************************/
/*********************** LOCAL PROCEDURES ***********************************/
/****************************************************************************/

/*===========================================================================
	      Local procedure for basic error checking.
============================================================================*/

PROCEDURE lp_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

lp_return = CALLPROC check_inq_ing ( h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = 1,
                                    h_retries_allowed = 1,
                                    h_frpr_name       = :h_frpr_name);
RETURN :lp_return;

END


