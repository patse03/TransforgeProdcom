INITIALIZE () =

DECLARE h_retries_allowed = INTEGER1      NOT NULL,
        h_retries         = INTEGER1      NOT NULL,
        h_retry_or_not    = CHAR(5)       NOT NULL,
        h_frpr_name       = VARCHAR(24)   NOT NULL,
        h_return          = INTEGER4      NOT NULL,
	h_password        = CHAR(5)       NOT NULL,
	h_period          = CHAR(6)       NOT NULL,
	h_date_changed    = DATE          NOT NULL,
        h_exit            = CHAR(1)       NOT NULL,
	h_fullname        = CHAR(40)      NOT NULL,
        h_firstname       = VARCHAR(20)   NOT NULL,
        h_secondname      = VARCHAR(20)   NOT NULL,
        h_min_period      = INTEGER4      NOT NULL,
        h_max_period      = INTEGER4      NOT NULL,
        h_frame           = VARCHAR(24)   NOT NULL,
        h_command         = VARCHAR(1000) NOT NULL,

        lp_error_check      = PROCEDURE RETURNING INTEGER,
        lp_full_error_check = PROCEDURE RETURNING INTEGER,
        Lp_drop_table       = PROCEDURE RETURNING INTEGER,
        lp_pop_table        = PROCEDURE RETURNING INTEGER
{

  SELECT DBMSINFO('username') AS g_user_id;
  SELECT DBMSINFO('database') AS g_database;

  SET_FORMS FRS (MAPFILE='/home/prodcom/admin/prodcom.map');

  h_frpr_name = 'production_00_fr';
  msa_date    = 'now';
  
  IF g_database = 'produserdb'
  THEN
    CLEAR SCREEN;
    MESSAGE'THIS APPLICATION CAN ONLY BE RUN ON PRODLIVE'
    WITH STYLE = POPUP;
    EXIT;
  ENDIF;

  CALLFRAME production_00a_fr();

  s_developer = SHIFT(:g_fullname, (((40-LENGTH(g_fullname))/2)*1));

  IF g_database = 'prodcondb'
  THEN
    g_target_db = 'prodlivedb'

  ELSEIF g_database = 'proddevd1'
  THEN
    g_target_db = 'proddevd1'

  ELSE
    MESSAGE 'ERROR: This runs on proddevdb and prodcondb only.' 
    WITH STYLE = POPUP;
    EXIT;

  ENDIF;  

/*----------------------------------------------------------------------------
 Set min survey period and select max survey period from span_end on inquiry
-----------------------------------------------------------------------------*/

  h_command = '$SCRIPTS/get_max_inq_period.script '
            + VARCHAR(:g_target_db);

  h_return = CALLPROC callsys_ppc_cp(:h_command);


  IF h_return > 0 
  THEN
    MESSAGE 'ERROR: Failed to create /admin/scratch/inq_max.tmp. Error Code '
          + VARCHAR(:h_return) +'.' 
    WITH STYLE = POPUP;
    EXIT;
  ENDIF;

  DELETE FROM ppc_work_period; 
 
  h_return = CALLPROC lp_error_check (p_num_row_ck = 0);

  IF h_return > 1 
  THEN
    MESSAGE 'ERROR: Failed to clear ppc_work_period. Error Code '
          + VARCHAR(:h_return) +'.' 
    WITH STYLE = POPUP;
    EXIT;
  ENDIF;

  COPY TABLE ppc_work_period
           ( period = c0nl )
  FROM '/admin/scratch/inq_max.tmp';
 
  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0 
  THEN
    MESSAGE 'ERROR: Failed to copy into ppc_work_period. Error Code '
          + VARCHAR(:h_return) +'.' 
    WITH STYLE = POPUP;
    EXIT;
  ENDIF;

  SELECT period AS g_period
  FROM   ppc_work_period;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0 
  THEN
    MESSAGE 'ERROR: Failed to select period from ppc_work_period. Error Code '
          + VARCHAR(:h_return) +'.' 
    WITH STYLE = POPUP;
    EXIT;
  ENDIF;

  IF LENGTH(VARCHAR(:g_period)) != 6
  THEN
    MESSAGE 'ERROR: Failed to select span end from inq.'
    WITH STYLE = POPUP;
    EXIT;
  ENDIF;

  h_max_period = g_period +100;
  h_min_period = 201100;
  
/*----------------------------------------------------------------------
   Populate table field
----------------------------------------------------------------------*/

  h_return = CALLPROC lp_pop_table;

  IF h_return > 1 THEN EXIT; ENDIF;

  RESUME FIELD tf;

}


/*----------------------------------------------------------------------
   Timeout Errors
----------------------------------------------------------------------*/

ON TIMEOUT =
BEGIN

h_retry_or_not      = 'RETRY';
h_retries           = 0;

WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
DO

  h_retries = :h_retries + 1;

  DELETE FROM   inter_image_params
  WHERE         user_id = :g_user_id;

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return <> 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return = 7
THEN
  EXIT;

 ELSEIF h_return = 9
 THEN
  MESSAGE 'ERROR: System error whilst trying to delete from IIP record.'
           WITH STYLE = POPUP;

ENDIF;


h_retry_or_not      = 'RETRY';
h_retries           = 0;

WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
DO

  h_retries = :h_retries + 1;

  INSERT INTO error_log (
              error_time,
              error_text,
              frpr_name,
              error_code,
              user_id)
  VALUES (    'now',
              'TIMEOUT',
              :h_frpr_name,
               0,
              :g_user_id);

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return <> 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return = 7
THEN
  EXIT;

 ELSEIF h_return = 9
 THEN
   MESSAGE 'Timeout: System error inserting into error_log'
            WITH STYLE = POPUP;

 ELSEIF h_return = 1
 THEN
  MESSAGE 'Timeout: No record inserted into error_log'
           WITH STYLE = POPUP;
ENDIF;

EXIT;

END

/*=======================================================================
   FRSKEY4: Go to selected application's frame for instructions and run.
=======================================================================*/

'Go', KEY FRSKEY4 =
{

  IF tf.who != '   '
  THEN
    MESSAGE 'WARNING: This task has already been completed. To re-run it '
          + 'you will need to remove the apprpriate entry from the '
          + 'ppc_tast_status table.'
    WITH STYLE = POPUP; 
    RESUME FIELD tf;
  ENDIF;

  g_task_name = tf.job_name;
  h_frame = tf.task_frame;
  CALLFRAME :h_frame();

  msa_date    = 'now';
  REDISPLAY;

  h_return = CALLPROC lp_pop_table;

  IF h_return > 1 THEN EXIT; ENDIF;

  REDISPLAY;
  RESUME FIELD tf;
}


/*=======================================================================
   FRSKEY6:  View Previous Period 
======================================================================*/

'Previous Period', KEY FRSKEY6 =
{
  IF g_period > h_min_period
  THEN
    g_period = g_period - 100;
  ELSE
    MESSAGE 'WARNING: Nothing before 201100, sorry.'
    WITH STYLE = POPUP;
    RESUME FIELD tf;
  ENDIF; 

  h_return = CALLPROC lp_pop_table();

  IF h_return != 0 THEN EXIT; ENDIF;

  RESUME FIELD tf;

  REDISPLAY;

}


/*=======================================================================
   FRSKEY8:  View Next Period
======================================================================*/

'Next Period', KEY FRSKEY8 =
{
  IF g_period < h_max_period
  THEN
    g_period = g_period + 100;
  ELSE
    MESSAGE 'WARNING: Nothing beyond '+VARCHAR(:h_max_period) +', sorry.'
    WITH STYLE = POPUP;
    RESUME FIELD tf;
  ENDIF; 

  h_return = CALLPROC lp_pop_table();

  IF h_return != 0 THEN EXIT; ENDIF;

  RESUME FIELD tf;
}

/*=======================================================================
   FRSKEY10: Go to test card frame.
=======================================================================*/

'Card', KEY FRSKEY10=
{

  CALLFRAME production_test_fr();

  msa_date    = 'now';

  h_return = CALLPROC lp_pop_table;

  IF h_return > 1 THEN EXIT; ENDIF;

  RESUME FIELD tf;

}

/*=======================================================================
   FRSKEY12:  Exit
======================================================================*/

'Exit', KEY FRSKEY12 =
{
  CLEAR SCREEN;
  EXIT;
}

/****************************************************************************/
/*********************** LOCAL PROCEDURES ***********************************/
/****************************************************************************/

/*===========================================================================
	      Local procedure for error checking within retry loop.
============================================================================*/

PROCEDURE lp_full_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

lp_return = CALLPROC check_inq_ing ( h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = :h_retries,
                                    h_retries_allowed = :h_retries_allowed,
                                    h_frpr_name       = :h_frpr_name);
RETURN :lp_return;

END

/*===========================================================================
	      Local procedure for basic error checking.
============================================================================*/

PROCEDURE lp_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

lp_return = CALLPROC check_inq_ing ( h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = 1,
                                    h_retries_allowed = 1,
                                    h_frpr_name       = :h_frpr_name);
RETURN :lp_return;

END
   

/*===========================================================================
	      Local procedure for dropping a table if it exists.
============================================================================*/

PROCEDURE lp_drop_table(p_table_name = CHAR(24) NOT NULL) = 

  DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT,
          lp_table  = CHAR(20) NOT NULL

BEGIN

  SELECT table_name as lp_table 
    FROM iitables
   WHERE table_name = :p_table_name
     AND table_owner = :g_user_id;

  lp_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF lp_return = 0
  THEN
    RETURN 0;
  ENDIF;

  IF lp_return > 1 
  THEN
    MESSAGE 'SYSTEM ERROR: Failed whilst selecting ' 
          +  VARCHAR(:p_table_name) + ' from iitables prior to droping, '
          + 'with error code ' + VARCHAR(:lp_return) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9;
  ENDIF;

  MODIFY :p_table_name to TRUNCATED;

  DROP TABLE :p_table_name;

  h_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF h_return != 0 
  THEN 
    MESSAGE 'SYSTEM ERROR: Unable to drop ' + VARCHAR(:p_table_name) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9; 
  ENDIF;

  RETURN 0;

END

/*===========================================================================
              Local procedure for populating the table field.
============================================================================*/

PROCEDURE lp_pop_table() =

  DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT

BEGIN

  s_text = 'Survey Tasks For Period ' + VARCHAR(:g_period);

  lp_return = CALLPROC lp_drop_table (p_table_name = 'tt_production_00');
  IF lp_return != 0 THEN RETURN 9; ENDIF;

  MESSAGE '                   Collecting data, please wait...';

  CREATE TABLE tt_production_00
  AS
  SELECT job_name,
         menu_option,
         task_frame,
         :g_period AS period,
         '   ' as who,
         DATE('') as date_run
  FROM   ppc_task_list;

  lp_return = CALLPROC lp_error_check(p_num_row_ck = 1);

  IF h_return != 0 
  THEN
    MESSAGE 'ERROR: Failed to select jobs from ppc_task_list. Error code '
          + VARCHAR(:h_return) + '.' 
    WITH STYLE = POPUP;
    EXIT;
  ENDIF;
  
  UPDATE tt_production_00 a
  FROM   ppc_task_status b
  SET    who = b.who,
         date_run = b.date_run
  WHERE  a.job_name = b.job_name
    AND  a.period = b.period;

  lp_return = CALLPROC lp_error_check(p_num_row_ck = 1);

  IF h_return > 1 
  THEN
    MESSAGE 'ERROR: Failed to update tt_production_00 from ppc_task_list. '
          + 'Error code ' + VARCHAR(:h_return) + '.' 
    WITH STYLE = POPUP;
    EXIT;
  ENDIF;
  
INITTABLE tf READ;

tf = SELECT job_name,
            menu_option,
            task_frame,
            who,
            date_run
FROM        tt_production_00
ORDER BY    menu_option;

h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

IF h_return != 0
THEN
  MESSAGE 'SYSTEM ERROR: Failed to initiate table field. Error code '
        + VARCHAR(:h_return) +'.' +X'0D'
        WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

REDISPLAY;

/*----------------------------------------------------------------
        Colours rows:
        Completed   = Green.
        Outstanding = White.
-----------------------------------------------------------------*/

  UNLOADTABLE tf
  BEGIN
    IF tf.date_run != ''
    THEN
       SET_FORMS ROW '' tf (COLOUR(job_name) = 2);
       SET_FORMS ROW '' tf (COLOUR(who) = 2);
       SET_FORMS ROW '' tf (COLOUR(date_run) = 2);
    ELSE
       SET_FORMS ROW '' tf (COLOUR(job_name) = 0);
       SET_FORMS ROW '' tf (COLOUR(who) = 0);
       SET_FORMS ROW '' tf (COLOUR(date_run) = 0);
    ENDIF;
  END;

  REDISPLAY;

END
