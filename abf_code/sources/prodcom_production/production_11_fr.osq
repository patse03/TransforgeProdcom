INITIALIZE () =

DECLARE h_retries_allowed = INTEGER1      NOT NULL,
        h_retries         = INTEGER1      NOT NULL,
        h_retry_or_not    = CHAR(5)       NOT NULL,
        h_return          = INTEGER1      NOT NULL,
        h_return2         = INTEGER1      NOT NULL,
        h_prompt          = CHAR(1)       NOT NULL,
        h_who             = CHAR(3)       NOT NULL,
        h_fullname        = VARCHAR(40)   NOT NULL,
        h_year            = CHAR(4)       NOT NULL,
        h_dummy           = INTEGER4      NOT NULL,
        h_period          = CHAR(6)       NOT NULL,
        h_prev_period     = CHAR(6)       NOT NULL,
        h_frpr_name       = VARCHAR(24)   NOT NULL,
        h_message         = VARCHAR(70)   NOT NULL,
        h_title           = VARCHAR(80)   NOT NULL,
        h_command         = VARCHAR(1000) NOT NULL,
        h_filename        = VARCHAR(60)   NOT NULL,
        h_suffix          = VARCHAR(3)    NOT NULL,

        lp_error_check          = PROCEDURE RETURNING INTEGER

{

SELECT DBMSINFO('username') AS g_user_id;
SELECT DBMSINFO('database') AS g_database;

h_frpr_name = 'production_11_fr';
msa_date = 'now';

h_title = 'ANNUAL SAS IMPORT';
s_title = SHIFT(:h_title, (((80-LENGTH(h_title))/2)*1));
h_year = LEFT(VARCHAR(:g_period),4);
h_period = VARCHAR(:g_period);
h_prev_period = VARCHAR(:g_period-100);

}

/*=======================================================================
   FRSKEY4: Go - Run task
======================================================================*/

'GO', KEY FRSKEY4 =
{

/*---------------------------------------------------------------------
     Check input files exist.
----------------------------------------------------------------------*/

MESSAGE ' CHECKING: Looking for first input file. . .';
SLEEP 1;

h_command = '$SCRIPTS/check_file_exists.script '
          + '/prodcom/live5/files/sas/sample_weights_' +:h_period + ' '
          + '1>/dev/null '
          + '2>/dev/null';

h_return = CALLPROC callsys_cp(:h_command);

IF h_return != 0
THEN
  MESSAGE 'ERROR: Sample Weights file not found so it looks like '
        + 'the SAS script has not been run correctly. '
        + 'Please investigate and correct, then reset and try again. '
  WITH STYLE = POPUP;
  RETURN;
ENDIF;

MESSAGE ' CHECKING: Looking for second input file. . .';
SLEEP 1;

h_command = '$SCRIPTS/check_file_exists.script '
          + '/prodcom/live5/files/sas/uv_gtot_' +:h_prev_period + ' '
          + '1>/dev/null '
          + '2>/dev/null';

h_return = CALLPROC callsys_cp(:h_command);

IF h_return != 0
THEN
  MESSAGE 'ERROR: UVs / Gross Totals file not found so it looks like '
        + 'the SAS script has not been run correctly. '
        + 'Please investigate and correct, then reset and try again. '
  WITH STYLE = POPUP;
  RETURN;
ENDIF;

MESSAGE ' CHECKING: Looking for third input file. . .';
SLEEP 1;

h_command = '$SCRIPTS/check_file_exists.script '
          + '/prodcom/live5/files/sas/contrind_sph_' +:h_prev_period + ' '
          + '1>/dev/null '
          + '2>/dev/null';

h_return = CALLPROC callsys_cp(:h_command);

IF h_return != 0
THEN
  MESSAGE 'ERROR: Contributor Industry SPH file not found so it looks like '
        + 'the SAS script has not been run correctly. '
        + 'Please investigate and correct, then reset and try again. '
  WITH STYLE = POPUP;
  RETURN;
ENDIF;

/*---------------------------------------------------------------------
 #2: Running Annual SAS Import
----------------------------------------------------------------------*/

MESSAGE ' RUNNING: Annual SAS Import. . .';
SLEEP 1;

h_command = '$IMAGES/batch_take_on_app '
          + 'annual_sas_import '
          + '-numeric_overflow=ignore '
          + '-dprodlivedb '
          + '-a '
          +  VARCHAR(:g_period) 
          + ' 1>/dev/null'
          + ' 2>/dev/null';

h_return = CALLPROC callsys_cp(:h_command);

/* No error handling as ABF images run through callsys don't return a value */

/*---------------------------------------------------------------------
 #3: Check process log for errors
----------------------------------------------------------------------*/

MESSAGE ' CHECKING: Analysing process log. . .';
SLEEP 1;

h_command = '$SCRIPTS/check_for_error.script '
          + 'asi '
          + ' 1>/dev/null '
          + ' 2>/dev/null';

h_return = CALLPROC callsys_cp(:h_command);

IF h_return != 0
THEN
  MESSAGE 'ERROR: Warnings or errors detected in asi_process_log. '
        + 'Please investigate, correct, then reset and try again. '
  WITH STYLE = POPUP;
  RETURN;
ENDIF;

/*-------------------------------------------------------------------
   Record completion in ppc_task_status.
-------------------------------------------------------------------*/

  INSERT INTO ppc_task_status
  VALUES (    :g_task_name,
              :g_period,
              :g_who,
              DATE('today'));

h_return = CALLPROC lp_error_check (p_num_row_ck  = 1);

IF h_return != 0
THEN
  MESSAGE 'ERROR: Failed to insert into ppc_task_status. Error code '
        + VARCHAR(:h_return) +'. Please complete this manually. Continuing...'
  WITH STYLE = POPUP;
ENDIF;

MESSAGE 'PROCESS COMPLETED SUCCESSFULLY.' WITH STYLE = POPUP;

RETURN;

}


/*=======================================================================
   FRSKEY12: (F12) ABORT - Return to main menu.
======================================================================*/

'ABORT', KEY FRSKEY12 = 
BEGIN
  RETURN;
END



/****************************************************************************/
/*********************** LOCAL PROCEDURES ***********************************/
/****************************************************************************/

/*===========================================================================
	      Local procedure for basic error checking.
============================================================================*/

PROCEDURE lp_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

lp_return = CALLPROC check_inq_ing ( h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = 1,
                                    h_retries_allowed = 1,
                                    h_frpr_name       = :h_frpr_name);
RETURN :lp_return;

END


