INITIALIZE () =

DECLARE h_retries_allowed = INTEGER1      NOT NULL,
        h_retries         = INTEGER1      NOT NULL,
        h_retry_or_not    = CHAR(5)       NOT NULL,
        h_return          = INTEGER1      NOT NULL,
        h_prompt          = CHAR(1)       NOT NULL,
        h_who             = CHAR(3)       NOT NULL,
        h_fullname        = VARCHAR(40)   NOT NULL,
        h_dummy           = INTEGER4      NOT NULL,
        h_frpr_name       = VARCHAR(24)   NOT NULL,
        h_message         = VARCHAR(70)   NOT NULL,
        h_title           = VARCHAR(80)   NOT NULL,
        h_command         = VARCHAR(1000) NOT NULL,
        h_filename        = VARCHAR(60)   NOT NULL,
        h_cutoff          = CHAR(2)       NOT NULL,

        lp_error_check          = PROCEDURE RETURNING INTEGER

{

SELECT DBMSINFO('username') AS g_user_id;
SELECT DBMSINFO('database') AS g_database;

h_frpr_name = 'production_03_fr';
msa_date = 'now';

h_title = 'DETERMINE KEY CONTRIBUTORS FOLLOWING MAIN SELECTION';
s_title = SHIFT(:h_title, (((80-LENGTH(h_title))/2)*1));

}

/*=======================================================================
   FRSKEY4: Go - Run task
======================================================================*/

'GO', KEY FRSKEY4 =
{

/*---------------------------------------------------------------------
 #1: Input cut off value supplied by RAP team.
----------------------------------------------------------------------*/

h_cutoff = PROMPT' Enter cut-off value supplied by RAP team: ' 
           WITH STYLE = POPUP;

IF h_cutoff < 15 
OR h_cutoff > 25
THEN
  MESSAGE 'WARNING: The entered value for cut-off has failed to validate. '
        + 'If the figure is genuinely outside of the 15 - 25 range, please '
        + 'change the validation range in the code and ammend the desk '
        + 'instructions. '
  WITH STYLE = POPUP;
  RETURN;
ENDIF;

/*-------------------------------------------------------------------
 #2: Checking for mtch_key.csv
-------------------------------------------------------------------*/

h_filename = 'mtch_key.csv';

MESSAGE 'Checking for ' +:h_filename + '. . .' ;

h_command = '$SCRIPTS/check_file_exists.script '
          + '/admin/scratch/' + :h_filename ;

h_return = CALLPROC callsys_cp(:h_command);

IF h_return  != 0
THEN
  MESSAGE 'WARNING: ' +:h_filename + ' is not present in $SCRATCH.' +X'0D'
        + '         Please ensure it is present then re-run this task.'
  WITH STYLE = POPUP;
  RETURN;
ENDIF;

/*---------------------------------------------------------------------
 #3: Move mtch_key.csv to $SAS, which changes ownership to prodlive
----------------------------------------------------------------------*/

MESSAGE 'Moving ' +:h_filename + '. . .' ;

h_command = 'cp /admin/scratch/' + :h_filename 
          + ' /prodcom/live5/files/sas/' + :h_filename;

h_return = CALLPROC callsys_cp(:h_command);

IF h_return  != 0
THEN
  MESSAGE 'WARNING: ' +:h_filename + ' was not coppied to $SAS.' +X'0D'
        + '         Please check file permissions of it in $SCRACTH.'
  WITH STYLE = POPUP;
  RETURN;
ENDIF;

/*-------------------------------------------------------------------
 #4: Run Inclusions application.
-------------------------------------------------------------------*/

MESSAGE 'RUNNING: Batch key app. . . ';

h_command = '/prodcom/source/prodlive/images/batch_key_app '
          + '-numeric_overflow=ignore '
          + '-d' +SQUEEZE(:g_target_db) +' '
          + '-a 14 '
          + VARCHAR(:g_period) + ' '
          + 'key ' 
          + SQUEEZE(VARCHAR(:h_cutoff)) + ' '
          + '2>/dev/null';

IF g_database = 'prodlivedb'
OR g_database = 'prodcondb'
THEN
  h_return = CALLPROC callsys_cp(:h_command);

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to run batch reclass app process. Error code '
          + VARCHAR(:h_return) +'.'
    WITH STYLE = POPUP;
    EXIT;
  ENDIF;
ELSE
  MESSAGE 'NOTE: Not running on live. Call would have been: ' +X'0D'
        + '{' +:h_command +'}'
  WITH STYLE = POPUP;
ENDIF;

/*-------------------------------------------------------------------
   Record completion in ppc_task_status.
-------------------------------------------------------------------*/

  INSERT INTO ppc_task_status
  VALUES (    :g_task_name,
              :g_period,
              :g_who,
              DATE('today'));

h_return = CALLPROC lp_error_check (p_num_row_ck  = 1);

IF h_return != 0
THEN
  MESSAGE 'ERROR: Failed to insert into ppc_task_status. Error code '
        + VARCHAR(:h_return) +'. Please complete this manually. Continuing...'
  WITH STYLE = POPUP;
ENDIF;

MESSAGE 'PROCESS COMPLETED SUCCESSFULLY.' WITH STYLE = POPUP;

RETURN;

}


/*=======================================================================
   FRSKEY12: (F12) ABORT - Return to main menu.
======================================================================*/

'ABORT', KEY FRSKEY12 = 
BEGIN
  RETURN;
END



/****************************************************************************/
/*********************** LOCAL PROCEDURES ***********************************/
/****************************************************************************/

/*===========================================================================
	      Local procedure for basic error checking.
============================================================================*/

PROCEDURE lp_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

lp_return = CALLPROC check_inq_ing ( h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = 1,
                                    h_retries_allowed = 1,
                                    h_frpr_name       = :h_frpr_name);
RETURN :lp_return;

END


