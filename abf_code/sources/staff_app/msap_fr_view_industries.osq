/*------------------------------------------------------------------
 Allows staff to view their own industries
------------------------------------------------------------------*/

INITIALIZE (p_user_id = VARCHAR(8) NOT NULL WITH DEFAULT)=

DECLARE h_frpr_name       = VARCHAR(25) NOT NULL,
        h_return          = INTEGER1 NOT NULL,
        h_alloc_count     = INTEGER2 NOT NULL,
        h_retries_allowed = INTEGER1 NOT NULL,
        h_retries         = INTEGER1 NOT NULL,
        h_retry_or_not    = CHAR(5)  NOT NULL,

        lp_error_check          = PROCEDURE RETURNING INTEGER,
        lp_full_error_check     = PROCEDURE RETURNING INTEGER,

{


  h_frpr_name = 'msap_fr_view_industries';
  h_retries_allowed = 3;
  msa_date = 'now';

  SET_FORMS FORM (MODE = 'read');

  s_user_id = :p_user_id;

  /*------------------------------------------------------------------------
        Selects user name from acm table to avoid upper case display.
  ------------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;
    
    SELECT analyst_name AS s_user_name
    FROM   analyst_coordinator_manager
    WHERE  analyst_id = :p_user_id;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return <> 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    MESSAGE 'NOTE: User ID cannot be found in the ProdCom structure table. '
          + 'Please contact the control team if you believe this '
          + 'to be incorrect.'
    WITH STYLE = POPUP;
    RETURN 0;

  ELSEIF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to load user name. Error code '
          + VARCHAR(:h_return) +'. Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;

  ENDIF;

  /*------------------------------------------------------------------------
        Loads Table Field.
  ------------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    tf =

    SELECT a.industry AS industry,
           '' AS shared,
           b.industry_text AS industry_text
    FROM   industry_analysts a,
           industry b
    WHERE  a.industry = b.industry
    AND    a.user_id = :p_user_id;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return <> 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 9;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'ERROR: Failed to load industry allocation details. Error code '
          + VARCHAR(:h_return) +'. Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;

  ENDIF;

  UNLOADTABLE tf
  BEGIN
     
    SELECT COUNT(user_id) AS h_alloc_count
    FROM   industry_analysts
    WHERE  industry = :tf.industry;

    h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

    IF h_return != 0
    THEN
      MESSAGE 'ERROR: Failed to check for split allocation on industry '
            + VARCHAR(:tf.industry) + '. Error code ' 
            + VARCHAR(:h_return) + '. Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN 9;
    ENDIF;

    IF h_alloc_count > 1
    THEN
      tf.shared = 'S';
    ENDIF;

  END;

}

/**************************** KEY ACTIVATIONS *****************************/


'End', KEY FRSKEY14 =
{
    RETURN 0;
}

/************************** LOCAL PROCEDURES ******************************/


/*=======================================================================
    Local procedure to check sql for errors during sections of code that
    utilise personal temp tables. Committed, no rollback.
=======================================================================*/

PROCEDURE lp_error_check (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing (
              h_num_row_ck = :p_num_row_ck,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

  RETURN IFNULL(:lp_return,9);

}

/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing (
                  h_num_row_ck = :p_num_row_ck,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}

