/**************************************************************************
  Displays an analysts industry allocation with reference splits.
  VIEW ONLY: Changes made using option 8 - msap_fr_up_allocation.

  NB: This version ONLY shows split allocations.
  
  Part of the sequence of changes made to allow industry splits without
  hardcoding changes each time, and the move towards a standardise access
  system. ~ DF - Sept 2012

**************************************************************************/

INITIALIZE (p_user_id   = VARCHAR(8)  NOT NULL WITH DEFAULT,
            p_user_name = VARCHAR(24) NOT NULL WITH DEFAULT) =

DECLARE h_frpr_name       = VARCHAR(25) NOT NULL,
        h_return          = INTEGER1    NOT NULL,
        h_title           = VARCHAR(80) NOT NULL,
        h_user_name       = VARCHAR(24) NOT NULL,
        h_split_count     = INTEGER2    NOT NULL,
        h_retries_allowed = INTEGER1    NOT NULL,
        h_retries         = INTEGER1    NOT NULL,
        h_retry_or_not    = CHAR(5)     NOT NULL,

        lp_error_check         = PROCEDURE RETURNING INTEGER,
        lp_full_error_check    = PROCEDURE RETURNING INTEGER,

{
  h_frpr_name = 'msap_fr_view_splits';
  h_retries_allowed = 3;
  msa_date = 'now';
  s_user_id = :p_user_id;

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT a.name AS h_user_name,
           COUNT (a.industry) AS h_split_count
    FROM   industry_analysts a
    WHERE  a.user_id = :p_user_id
      AND  a.industry NOT IN (SELECT b.industry
                              FROM industry_analysts b
                              WHERE b.user_id  = a.user_id
                              AND   b.low_ref  = '00000000000'
                              AND   b.high_ref = '99999999999')
    GROUP BY a.name;   

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 9;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'ERROR: Failed to select split count from industry_analysts. '
          + 'Error code 9. Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    MESSAGE 'NOTE: There are no split industry allocations assigned to '
          + :h_user_name +'.'
    WITH STYLE = POPUP;
    RETURN 0;
  
  ENDIF;

  h_title = :h_user_name + ' has ' + VARCHAR(:h_split_count) 
          + ' split allocations.';
  s_title = SHIFT(:h_title, (((80-LENGTH(h_title))/2)*1));

  SET_FORMS FORM (MODE = 'read');

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    tf =

    SELECT a.industry AS industry,
           a.low_ref  AS low_ref,
           a.high_ref AS high_ref
    FROM   industry_analysts a
    WHERE  a.user_id = :p_user_id
      AND  a.industry NOT IN (SELECT b.industry
                              FROM industry_analysts b
                              WHERE b.user_id  = a.user_id
                              AND   b.low_ref  = '00000000000'
                              AND   b.high_ref = '99999999999');

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 9;
  ELSEIF h_return = 9
  THEN
    MESSAGE 'ERROR: Failed to select industry splits from industry_analysts. '
          + 'Error code 9. Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  REDISPLAY;

}

/**************************** KEY ACTIVATIONS *****************************/

'End', KEY FRSKEY14 =
{
  RETURN 0;
}

/*************************** LOCAL PROCEDURES *******************************/

/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing (
                  h_num_row_ck = :p_num_row_ck,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}

/*=======================================================================
    Local procedure to check sql for errors during sections of code that
    utilise personal temp tables. Committed, no rollback.
=======================================================================*/

PROCEDURE lp_error_check (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing (
              h_num_row_ck = :p_num_row_ck,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

  RETURN IFNULL(:lp_return,9);

}

