/*------------------------------------------------------------------
 Allows staff to view industries allocated to someone else
------------------------------------------------------------------*/

INITIALIZE () =

DECLARE h_user_name       = CHAR(25) NOT NULL,
        h_frpr_name       = VARCHAR(25) NOT NULL,
        h_return           = INTEGER1 NOT NULL,
        h_retries_allowed = INTEGER1 NOT NULL,
        h_retries         = INTEGER1 NOT NULL,
        h_retry_or_not    = CHAR(5)  NOT NULL,

        lp_full_error_check = PROCEDURE RETURNING INTEGER

{
  h_frpr_name = 'msap_fr_view_other_dets';
  h_retries_allowed = 3;
  msa_date = 'now';

  
  /*----------------------------------------------------------------------
       Access check. (Error messages handled by procedure.)
  ----------------------------------------------------------------------*/
  
  h_return = CALLPROC check_access_frames (p_frpr_name = :h_frpr_name);

  IF h_return = 1 
  THEN
    RETURN 0;
  ELSEIF h_return > 1
  THEN
    RETURN 9;
  ENDIF;
  
  /*----------------------------------------------------------------------
       Load table field.
  ----------------------------------------------------------------------*/
  

  SET_FORMS FORM (MODE = 'read'); 

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    tf = 

    SELECT   a.user_name,
             a.user_id,
             COUNT(DISTINCT b.industry) AS count_ind 
    FROM     passwords_new a,
             industry_analysts b
    WHERE    (a.user_id LIKE 'prodd%' OR
              a.user_id LIKE 'prod1%' OR
              a.user_id LIKE 'prod0%' OR
              a.user_id LIKE 'produ%')
    AND      a.user_id = b.user_id
    GROUP BY a.user_name,
             a.user_id
    ORDER BY user_name; 

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return <> 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return = 9
  THEN
    MESSAGE 'ERROR: Failed to load table field with user data. '
          + 'Error code 9. Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    MESSAGE 'WARNING: Failed to locate data analyst on industry_analyst or '
          + 'password tables. Error code 1. Please contact control section '
          + 'to ensure the user details and industry allocations are correct.'
    WITH STYLE = POPUP;
    RETURN 0;

  ENDIF;

}

/**************************** KEY ACTIVATIONS *****************************/

'Inds', KEY FRSKEY4 =
{
  IF :tf.user_name = ''
  THEN
    MESSAGE 'WARNING: You have not selected a user from the list.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  h_return = CALLFRAME msap_fr_view_industries  (p_user_id = :tf.user_id);

  msa_date = 'now';

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failure reported during msap_fr_view_industries. '
          + 'Error code ' +VARCHAR(h_return) +' '
          + 'Please call IM immediately.'
    WITH STYLE = POPUP;
  ENDIF;

  REDISPLAY;

}

'Splits', KEY FRSKEY5 =
{
  IF :tf.user_name = ''
  THEN
    MESSAGE 'WARNING: You have not selected a user from the list.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  h_return = CALLFRAME msap_fr_view_splits  (p_user_id = :tf.user_id);

  msa_date = 'now';

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failure reported during msap_fr_view_splits. '
          + 'Error code ' +VARCHAR(h_return) +' '
          + 'Please call IM immediately.'
    WITH STYLE = POPUP;
  ENDIF;

  REDISPLAY;

}

'End', KEY FRSKEY14 =
{
    RETURN 0;
}

/*************************** LOCAL PROCEDURES *****************************/


/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing (
                  h_num_row_ck = :p_num_row_ck,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}

