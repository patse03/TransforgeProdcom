/*----------------------------------------------------------------------
  Shows Non-Responders to Disclosure
----------------------------------------------------------------------*/

INITIALIZE () =

DECLARE 
  h_retries_allowed = INTEGER1    NOT NULL WITH DEFAULT,
  h_retries         = INTEGER1    NOT NULL WITH DEFAULT,
  h_retry_or_not    = CHAR(5)     NOT NULL WITH DEFAULT,
  h_frpr_name       = VARCHAR(24) NOT NULL WITH DEFAULT,
  h_industry        = INTEGER4    NOT NULL WITH DEFAULT,
  h_dummy_ind       = INTEGER4    NOT NULL WITH DEFAULT,
  h_return          = INTEGER4    NOT NULL WITH DEFAULT,
  h_return_2        = INTEGER4    NOT NULL WITH DEFAULT,
  h_dummy_period    = INTEGER4    NOT NULL WITH DEFAULT,
  h_first_period    = INTEGER4    NOT NULL WITH DEFAULT,
  h_period          = INTEGER4    NOT NULL WITH DEFAULT,
  h_period1         = INTEGER4    NOT NULL WITH DEFAULT,
  h_period2         = INTEGER4    NOT NULL WITH DEFAULT,
  h_period3         = INTEGER4    NOT NULL WITH DEFAULT,
  h_period4         = INTEGER4    NOT NULL WITH DEFAULT,
  h_rows            = INTEGER4    NOT NULL WITH DEFAULT,
  h_field_name      = VARCHAR(24) NOT NULL WITH DEFAULT,
  h_ind_table       = VARCHAR(24) NOT NULL WITH DEFAULT,
  h_non_table       = VARCHAR(24) NOT NULL WITH DEFAULT,

  lp_error_check      = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,
  lp_full_error_check = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,

{
  h_retries_allowed = 3;
  h_frpr_name = 'disc_fr_non_response';
  msa_date = 'now';

  h_non_table = 'tt_dsc_non_response';
  /*- h_ind_table set in call to external procedure as a byref. -*/

  SELECT DBMSINFO('username') AS g_user_id;
  SELECT DBMSINFO('database') AS g_database;

  SET_FORMS FRS (MAPFILE='/home/prodcom/admin/prodcom.map');

  SET_FORMS FIELD '' (MODE(tf) = 'READ',
                      INVISIBLE(p1_title) = 0,
                      INVISIBLE(p2_title) = 0,
                      INVISIBLE(p3_title) = 0,
                      INVISIBLE(p4_title) = 0);

  /*----------------------------------------------------------------------
         Access check. (Error messages handled by procedure.)
  ----------------------------------------------------------------------*/

  h_return = CALLPROC check_access_frames (p_frpr_name = :h_frpr_name);

  IF h_return = 1
  THEN
    RETURN 0;
  ELSEIF h_return > 1
  THEN
    RETURN 9;
  ENDIF;

  /*----------------------------------------------------------------------
         Drop temp tables ready for use.
  ----------------------------------------------------------------------*/

  h_return = CALLPROC msa_fp_drop_table (p_table = :h_ind_table);

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to drop temporary industry table. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN :h_return;
  ENDIF;

  h_return = CALLPROC msa_fp_drop_table (p_table = :h_non_table);

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to drop temporary non-response table. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN :h_return;
  ENDIF;

}


FIELD s_industry =
{

  IF  s_industry != 'ALL'
  AND s_industry != 'GROUP'
  AND :s_industry NOT LIKE '\[0-9\]\[0-9\]\[0-9\]\[0-9\]\[0-9\]' ESCAPE '\'
  THEN
    MESSAGE 'WARNING: This field must contain "ALL", "GROUP", or a '
          + 'valid ProdCom industry that you have access to. '
          + 'Please check and try again.'
    WITH STYLE = POPUP;
    RESUME FIELD s_industry;
  ENDIF;

  IF s_industry != 'ALL'
  AND s_industry != 'GROUP'
  THEN

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      SELECT DISTINCT industry AS h_dummy_ind
      FROM   industry_analysts
      WHERE  industry = :s_industry;

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return = 1
    THEN
      MESSAGE 'WARNING: That is not a valid ProdCom industry code. '
            + 'Please try again or exit the screen. '
      WITH STYLE = POPUP;
      RESUME FIELD s_industry;
    ELSEIF h_return > 1
    THEN
      MESSAGE 'ERROR: Failed to validate industry code. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN 9;
    ENDIF;

  ENDIF;

  /*------------------------------------------------------------------
      Create the industry table using shared procedure.
  ------------------------------------------------------------------*/

  MESSAGE 'Creating Table of Industries . . .';

  h_return = CALLPROC msa_fp_industry
           ( p_industry   = :s_industry,
             p_temp_table = BYREF(h_ind_table));

  IF h_return = 9
  THEN
    RETURN 9;
  ELSEIF h_return != 0
  THEN
    RESUME FIELD s_industry;
  ENDIF;

  /*------------------------------------------------------------------
      Find latest annual period to use as default display.
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT MAX(period) AS h_period
    FROM   inquiry_period
    WHERE  inquiry = 14;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to select current annual period. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  s_period = :h_period;

  REDISPLAY;

  RESUME FIELD s_period;

}

FIELD s_period =
{

  CLEAR FIELD tf;

  REDISPLAY;

  /*------------------------------------------------------------------
      Find the earliest period that we have disclosure data for.
  ------------------------------------------------------------------*/

  MESSAGE 'Checking Period . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT MIN(period) AS h_first_period
    FROM  dsc_response;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to find earliest disclosure data period. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
      Check that we have disclosure data for the display periods.
  ------------------------------------------------------------------*/

  IF MOD(:s_period,100) != 00
  THEN
    MESSAGE 'WARNING: Period must be an annual period. Taking a guess... '
    WITH STYLE = POPUP;
    s_period = ((:s_period/100)*100);
    REDISPLAY;
    RESUME FIELD s_period;
  ENDIF;

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT period AS h_dummy_period
    FROM   inquiry_period
    WHERE  inquiry = 14
      AND  period >= :h_first_period;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 1
  THEN
    MESSAGE 'WARNING: There are no disclosure records that far back. '
          + 'Please try a later ProdCom period or exit the screen. '
    WITH STYLE = POPUP;
    RESUME FIELD s_industry;
  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to validate disclosure data period. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
      Find earliest disclosure period and set display periods.
  ------------------------------------------------------------------*/
  REDISPLAY;

  h_period4 = :s_period;
  h_period3 = :s_period - 100;
  h_period2 = :s_period - 200;
  h_period1 = :s_period - 300;

  p1_title = MOD(h_period1/100,100);
  p2_title = MOD(h_period2/100,100);
  p3_title = MOD(h_period3/100,100);
  p4_title = MOD(h_period4/100,100);

  IF h_period1 < :h_first_period
  THEN
    h_period1 = 0;
    p1_title  = 0;
    SET_FORMS FIELD '' (INVISIBLE(p1_title) = 1);
  ELSE
    SET_FORMS FIELD '' (INVISIBLE(p1_title) = 0);
  ENDIF;

  IF h_period2 < h_first_period
  THEN
    h_period2 = 0;
    p2_title  = 0;
    SET_FORMS FIELD '' (INVISIBLE(p2_title) = 1);
  ELSE
    SET_FORMS FIELD '' (INVISIBLE(p2_title) = 0);
  ENDIF;

  IF h_period3 < h_first_period
  THEN
    h_period3 = 0;
    p3_title  = 0;
    SET_FORMS FIELD '' (INVISIBLE(p3_title) = 1);
  ELSE
    SET_FORMS FIELD '' (INVISIBLE(p3_title) = 0);
  ENDIF;

  /*------------------------------------------------------------------
      Create table with references who have not responded for at least
      one of the four periods.

      For each period that they haven't responded (i.e. there is a
      record on dsc_response with receipt_date = spaces), mark it 
      with an 'NR'.

      For each period that they have responded (i.e. there is a
      record on dsc_response with receipt_date = NOT spaces), 
      mark it with an 'R'.

      Each period that is NOT on dsc_response means that that
      the contributor was not disclosive for that particular period -
      so mark it with a '-'.
   ------------------------------------------------------------------*/

  MESSAGE 'Selecting Data . . .';

  h_return = CALLPROC msa_fp_drop_table (p_table = :h_non_table);

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to drop temporary non-response table. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN :h_return;
  ENDIF;

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    CREATE TABLE :h_non_table
    AS 
    SELECT DISTINCT (contributor_reference),
                     industry,
                     '                                   ' AS add_name1,
                     '  ' AS p1,
                     '  ' AS p2,
                     '  ' AS p3,
                     '  ' AS p4
    FROM   dsc_response
    WHERE  period IN (:h_period1,:h_period2,:h_period3,:h_period4)
      AND  receipt_date = ''
      AND  industry IN (SELECT industry FROM :h_ind_table);

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 1
  THEN
    MESSAGE 'NOTE: There are no non responders for the selected parameters.'
          + 'Please try again or exit the screen. '
    WITH STYLE = POPUP;
    CLEAR FIELD ALL;
    msa_date = 'now';
    h_rows = 0;
    REDISPLAY;
    RESUME FIELD s_industry;
  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to select non-responders from dsc_response table. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*..................................................................
      Modify table
  ..................................................................*/

  MODIFY :h_non_table TO BTREE UNIQUE 
  ON     contributor_reference, industry;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to modify structure of temp non-reponse table. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*..................................................................
      Update with Contributor Name
  ..................................................................*/

  MESSAGE 'Selecting Contributor Details . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    UPDATE :h_non_table a
    FROM   contributor b
    SET    add_name1 = b.add_name1
    WHERE  a.contributor_reference = b.contributor_reference;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to update contributor names on temp table. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*..................................................................
      Period 1
  ..................................................................*/

  IF h_period1 != 0
  THEN

    MESSAGE 'Selecting for ' + VARCHAR(:h_period1) + ' . . .';

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      UPDATE :h_non_table a
      SET    p1 = 'NR'
      WHERE  contributor_reference IN
          (  SELECT  contributor_reference 
             FROM   dsc_response b
             WHERE  b.period = :h_period1
               AND  a.industry = b.industry
               AND  b.receipt_date = '');

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return > 1
    THEN
      MESSAGE 'ERROR: Failed on Non Response update of temp table for ' 
            +  VARCHAR(:h_period1) +'. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN 9;
    ENDIF;

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      UPDATE :h_non_table a
      SET    p1 = 'R'
      WHERE  contributor_reference IN
          (  SELECT  contributor_reference 
             FROM   dsc_response b
             WHERE  b.period = :h_period1
               AND  a.industry = b.industry
               AND  b.receipt_date != '');

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return > 1
    THEN
      MESSAGE 'ERROR: Failed on Responder update of temp table for ' 
            +  VARCHAR(:h_period1) +'. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN 9;
    ENDIF;

    UPDATE :h_non_table
    SET    p1 = '-'
    WHERE  p1 = '';

    h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

    IF h_return > 1
    THEN
      MESSAGE 'ERROR: Failed on Not Disclosive update of temp table for ' 
            +  VARCHAR(:h_period1) +'. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN 9;
    ENDIF;

  ENDIF;

  /*..................................................................
      Period 2
  ..................................................................*/

  IF h_period2 != 0
  THEN
    MESSAGE 'Selecting for ' + VARCHAR(:h_period2) + ' . . .';

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      UPDATE :h_non_table a
      SET    p2 = 'NR'
      WHERE  contributor_reference IN
          (  SELECT  contributor_reference 
             FROM   dsc_response b
             WHERE  b.period = :h_period2
               AND  a.industry = b.industry
               AND  b.receipt_date = '');

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return > 1
    THEN
      MESSAGE 'ERROR: Failed on Non Response update of temp table for ' 
            +  VARCHAR(:h_period2) +'. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN 9;
    ENDIF;

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      UPDATE :h_non_table a
      SET    p2 = 'R'
      WHERE  contributor_reference IN
          (  SELECT contributor_reference 
             FROM   dsc_response b
             WHERE  b.period = :h_period2
               AND  a.industry = b.industry
               AND  b.receipt_date != '');

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return > 1
    THEN
      MESSAGE 'ERROR: Failed on Responder update of temp table for ' 
            +  VARCHAR(:h_period2) +'. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN 9;
    ENDIF;

    UPDATE :h_non_table
    SET    p2 = '-'
    WHERE  p2 = '';

    h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

    IF h_return > 1
    THEN
      MESSAGE 'ERROR: Failed on Not Disclosive update of temp table for ' 
            +  VARCHAR(:h_period2) +'. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN 9;
    ENDIF;

  ENDIF;

  /*..................................................................
      Period 3
  ..................................................................*/

  IF h_period3 != 0
  THEN
    MESSAGE 'Selecting for ' + VARCHAR(:h_period3) + ' . . .';

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      UPDATE :h_non_table a
      SET    p3 = 'NR'
      WHERE  contributor_reference IN
          (  SELECT  contributor_reference 
             FROM   dsc_response b
             WHERE  b.period = :h_period3
               AND  a.industry = b.industry
               AND  b.receipt_date = '');

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return > 1
    THEN
      MESSAGE 'ERROR: Failed on Non Response update of temp table for ' 
            +  VARCHAR(:h_period3) +'. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN 9;
    ENDIF;

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      UPDATE :h_non_table a
      SET    p3 = 'R'
      WHERE  contributor_reference IN
          (  SELECT contributor_reference 
             FROM   dsc_response b
             WHERE  b.period = :h_period3
             AND    a.industry = b.industry
             AND    b.receipt_date != '');

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return > 1
    THEN
      MESSAGE 'ERROR: Failed on Responder update of temp table for ' 
            +  VARCHAR(:h_period3) +'. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN 9;
    ENDIF;

    UPDATE :h_non_table
    SET    p3 = '-'
    WHERE  p3 = '';

    h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

    IF h_return > 1
    THEN
      MESSAGE 'ERROR: Failed on Not Disclosive update of temp table for ' 
            +  VARCHAR(:h_period3) +'. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN 9;
    ENDIF;

  ENDIF;

  /*..................................................................
      Period 4
  ..................................................................*/

  MESSAGE 'Selecting for ' + VARCHAR(:h_period4) + ' . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    UPDATE :h_non_table a
    SET    p4 = 'NR'
    WHERE  contributor_reference IN
        (  SELECT  contributor_reference
           FROM   dsc_response b
           WHERE  b.period = :h_period4
             AND  a.industry = b.industry
             AND  b.receipt_date = '');

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed on Non Response update of temp table for ' 
          +  VARCHAR(:h_period4) +'. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    UPDATE :h_non_table a
    SET    p4 = 'R'
    WHERE  contributor_reference IN
        (  SELECT  contributor_reference 
           FROM   dsc_response b
           WHERE  b.period = :h_period4
             AND  a.industry = b.industry
             AND  b.receipt_date != '');

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed on Responder update of temp table for ' 
          +  VARCHAR(:h_period4) +'. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  UPDATE :h_non_table
  SET    p4 = '-'
  WHERE  p4 = '';

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed on Not Disclosive update of temp table for ' 
          +  VARCHAR(:h_period4) +'. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
      Select to the Screen
  ------------------------------------------------------------------*/

  h_rows = 0;
  MESSAGE 'Displaying data. . .';

  tf =

  SELECT   contributor_reference,
           industry,
           add_name1,
           p1,
           p2,
           p3,
           p4
  FROM     :h_non_table
  ORDER BY industry,
           contributor_reference;

  h_return = CALLPROC check_inq_ing 
           ( h_num_row         = BYREF(:h_rows),
             h_num_row_ck      = 1,
             h_commit          = 'Y',
             h_rollback        = 'N',
             h_frpr_name       = :h_frpr_name);

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to load data from temp table to screen. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  RESUME FIELD tf;

}

/************************** KEY ACTIVATIONS *******************************/

'Quests', KEY FRSKEY4 =
{
  INQUIRE_FORMS FORM (h_field_name = FIELD);

  IF :h_field_name != 'tf'
  THEN
    MESSAGE 'WARNING: Please highlight a Contributor on the table '
          + 'to use this option.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  h_return = CALLFRAME disc_fr_non_questions 
           ( p_contributor_reference = :tf.contributor_reference,
             p_period1               = :h_period1,
             p_period2               = :h_period2,
             p_period3               = :h_period3,
             p_period4               = :h_period4);

    msa_date = 'now';
}

'ContactDetails', KEY FRSKEY6 =
{
  INQUIRE_FORMS FORM (h_field_name = FIELD);

  IF :h_field_name != 'tf'
  THEN
    MESSAGE 'WARNING: Please highlight a Contributor on the table '
          + 'to use this option.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  CALL APPLICATION(exec = '$IMAGES/communicate -numeric_overflow=ignore ',
                   param = IFNULL(:tf.contributor_reference,'MENU'));

  msa_date = 'now';
}

'Print', KEY FRSKEY8 =
{
  msa_date = 'now';

  MESSAGE 'Preparing Report . . .';

  h_return = CALLPROC msa_cp_callsys 
           ( 'report ' 
           + :g_database 
           +  ' ''(user_name = "' + :g_user_name + '"' 
           +  ',inquiry = 14,period = ' + VARCHAR(:s_period) 
           +  ',p1_title = ' + VARCHAR(:p1_title) 
           +  ',p2_title = ' + VARCHAR(:p2_title) 
           +  ',p3_title = ' + VARCHAR(:p3_title) 
           +  ',p4_title = ' + VARCHAR(:p4_title) 
           +  ')'' -i$REPORTS/disc_rw_non_response.rw' 
           +  ' > report.output 2> report.output' );

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to produce disclosure non-responders report. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
  ELSE 

  /*--------------------------------------------------------------
     Remove last line - so a blank end page is not printed
  --------------------------------------------------------------*/

    h_return_2 = CALLPROC msa_cp_callsys 
               ( 'lines=`wc -l < disc_rw_non_response.rpt`;' 
               +  'lines=`expr ${lines} - 1`;' 
               +  'head -${lines} disc_rw_non_response.rpt | ' 
               +  'lp -o12p -d' + :g_printer 
               +  ' >> report.output 2>> report.output');

    IF h_return_2 != 0
    THEN
      MESSAGE 'ERROR: Failed to send report to printer ' + :g_printer +'. '
            + 'Error code ' +VARCHAR(:h_return_2) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
    ELSE
      MESSAGE 'NOTE: Report successfully sent to printer ' + :g_printer + '.'
      WITH STYLE = POPUP;
    ENDIF;

  ENDIF;

}

'Clear', KEY FRSKEY12 =
{
    CLEAR FIELD ALL;
    msa_date = 'now';
    h_rows = 0;
    RESUME FIELD s_industry;
}

'End', KEY FRSKEY14 =
{
    MESSAGE 'Exiting Non-Responders Screen . . .';

    h_return = CALLPROC msa_fp_drop_table (p_table = :h_non_table);
    h_return = CALLPROC msa_fp_drop_table (p_table = :h_ind_table);

    RETURN 0;
}

/******************* LOCAL PROCEDURES ************************************/


/*=======================================================================
    Local procedure to check sql for errors during sections of code that
    utilise perosnal temp tables. Committed, no rollback.
=======================================================================*/

PROCEDURE lp_error_check (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing (
              h_num_row_ck = :p_num_row_ck,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

  RETURN IFNULL(:lp_return,9);

}

/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing (
                  h_num_row_ck = :p_num_row_ck,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}

