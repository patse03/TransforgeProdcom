/*----------------------------------------------------------------------
 Rewritten etc...  (Blub later, in a rush.) DF2012
----------------------------------------------------------------------*/

PROCEDURE load_addresses_01_pr () =

DECLARE h_span_end           = INTEGER4     NOT NULL,
        h_param_list         = VARCHAR(100) NOT NULL,
        h_varchar_variable   = VARCHAR(100) NOT NULL,
        h_integer_variable   = INTEGER1     NOT NULL,
        h_param1             = VARCHAR(20)  NOT NULL,
        h_return             = INTEGER4     NOT NULL,
        h_count              = INTEGER4     NOT NULL,
        h_retries_allowed    = INTEGER1     NOT NULL,
        h_retries            = INTEGER1     NOT NULL,
        h_retry_or_not       = CHAR(5)      NOT NULL,
        h_text               = VARCHAR(60)  NOT NULL,
        h_dummy              = VARCHAR(60)  NOT NULL,
        h_temp_table         = VARCHAR(36)  NOT NULL,
        h_frpr_name          = VARCHAR(24)  NOT NULL,
        h_command            = VARCHAR(300) NOT NULL,
        h_idbr_file          = VARCHAR(100) NOT NULL,
        h_addr_file          = VARCHAR(100) NOT NULL,

        lp_error_check       = PROCEDURE RETURNING INTEGER NOT NULL,
        lp_full_error_check  = PROCEDURE RETURNING INTEGER NOT NULL,
        lp_drop_table        = PROCEDURE RETURNING INTEGER NOT NULL,

{
  SELECT DBMSINFO('username') AS g_user_id;
  SELECT DBMSINFO('database') AS g_database;

  IF g_database = 'prodlivedb'
  THEN
    g_path_name1 = '/idbr/live20/iss/data/';
    g_path_name2 = '/prodcom/live5/files/text/';
  ELSE
    g_path_name1 = '/prodcom/source/produser/files/text/';
    g_path_name2 = '/admin/scratch/';
  ENDIF;

  h_frpr_name  = 'load_addresses_01_pr';
  h_temp_table = 'load_addresses_01';

  h_retries_allowed = 3;

  h_param_list = CALLPROC CommandLineParameters();

  h_varchar_variable = squeeze (h_param_list);

  h_integer_variable = LOCATE (h_varchar_variable, ' ');
  h_param1           = LEFT (h_varchar_variable,h_integer_variable - 1);

  g_period = INT4(:h_param1);

  /*----------------------------------------------------------------------
       Access check. (Error messages handled by procedure.)
  ----------------------------------------------------------------------*/
  
  h_return = CALLPROC check_access_procs (p_frpr_name = :h_frpr_name);

  IF h_return = 1 
  THEN
    RETURN 0;
  ELSEIF h_return > 1
  THEN
    RETURN 9;
  ENDIF;
  
  /*------------------------------------------------------------------
     Log start of process
  ------------------------------------------------------------------*/

  h_text = '*SIGNON*';
  CALLPROC write_to_process_log
         ( p_frpr_name = :h_frpr_name,
           p_code      = 0,
           p_text      = :h_text);


  h_text = 'STARTING: Address update process started.';
  CALLPROC write_to_process_log
         ( p_frpr_name = :h_frpr_name,
           p_code      = 0,
           p_text      = :h_text);

  /*------------------------------------------------------------------
     Validate the period called.
  ------------------------------------------------------------------*/

  MESSAGE '[1/10] Validating parameters. . .';
  SLEEP 1;

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT span_end AS h_span_end
    FROM   inquiry
    WHERE  inquiry = 14;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return != 0
  THEN
    h_text = 'ERROR: Failed to select span end from table inquiry.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  IF h_span_end != g_period
  THEN
    h_text = 'ERROR: Period parameter does not match the span end.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 2,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
    Setting file names
  ------------------------------------------------------------------*/

  MESSAGE '[2/10] Setting filenames. . .';
  SLEEP 1;

  h_idbr_file = :g_path_name1 +'newaddr014_' +VARCHAR((:g_period+12)) +'.Z';
  h_addr_file = :g_path_name2 +'newaddr014_' +VARCHAR(:g_period);

  /*------------------------------------------------------------------
    Copy compreessed data file from idbr area to admin scratch.
  ------------------------------------------------------------------*/

  MESSAGE '[3/10] Copying IDBR file. . .';
  SLEEP 1;

  h_command = 'cp ' +:h_idbr_file +' ' +:h_addr_file +'.Z';

  h_return = CALLPROC msa_cp_callsys(:h_command);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to move compressed IDBR file.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    h_return = 9;
    RETURN :h_return;
  ENDIF;

  /*------------------------------------------------------------------
    Uncompressing IDBR data file
  ------------------------------------------------------------------*/

  MESSAGE '[4/10] Uncompressing IDBR file. . .';
  SLEEP 1;

  h_command = 'uncompress -f ' + :h_addr_file +'.Z';

  h_return = CALLPROC msa_cp_callsys(:h_command);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to uncompress IDBR file.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
     Remove any '???' from postcodes of IDBR addresses.       
  ------------------------------------------------------------------*/

  MESSAGE '[5/10] Removing umknown postcoodes from file. . .';
  SLEEP 1;

  h_command = 'sed -e"s/???//g" ' 
            + :h_addr_file + ' > ' + :h_addr_file + '.tmp; '
            + 'mv ' +:h_addr_file +'.tmp ' +:h_addr_file;

  h_return = CALLPROC msa_cp_callsys(:h_command);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to remove unknown postcodes from file.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
     Create working table and copy IDBR data into it
  ------------------------------------------------------------------*/

  MESSAGE '[6/10] Creating working table. . .';
  SLEEP 1;

  h_return = CALLPROC lp_drop_table (p_table_name = :h_temp_table);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to drop working table ' +:h_temp_table + '.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  CREATE TABLE :h_temp_table
             ( ruref          CHAR (11) NOT NULL,
               runame1        CHAR (35) NOT NULL,
               runame2        CHAR (35) NOT NULL,
               runame3        CHAR (35) NOT NULL,
               ruaddr1        CHAR (30) NOT NULL,
               ruaddr2        CHAR (30) NOT NULL,
               ruaddr3        CHAR (30) NOT NULL,
               ruaddr4        CHAR (30) NOT NULL,
               ruaddr5        CHAR (30) NOT NULL,
               rupostcode     VARCHAR(8) NOT NULL,
               tradstyle1     CHAR (35) NOT NULL,
               tradstyle2     CHAR (35) NOT NULL,
               tradstyle3     CHAR (35) NOT NULL,
               entname1       CHAR(35) NOT NULL,
               entname2       CHAR(35) NOT NULL,
               entname3       CHAR(35) NOT NULL,
               contact        CHAR (30) NOT NULL,
               telephone      CHAR (20) NOT NULL,
               fax            CHAR (20) NOT NULL,
               inclexcl       CHAR (1) NOT NULL);

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to create ' +:h_temp_table +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN :h_return;
  ENDIF;

  COPY TABLE :h_temp_table 
           ( ruref           =   c0colon,
             runame1         =   c0colon,
             runame2         =   c0colon,
             runame3         =   c0colon,
             ruaddr1         =   c0colon,
             ruaddr2         =   c0colon,
             ruaddr3         =   c0colon,
             ruaddr4         =   c0colon,
             ruaddr5         =   c0colon,
             rupostcode      =   c0colon,
             tradstyle1      =   c0colon,
             tradstyle2      =   c0colon,
             tradstyle3      =   c0colon,
             entname1        =   c0colon,
             entname2        =   c0colon,
             entname3        =   c0colon,
             contact         =   c0colon,
             telephone       =   c0colon,
             fax             =   c0colon,
             inclexcl        =   c0nl)
  FROM :h_addr_file;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to populate ' +:h_temp_table +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN :h_return;
  ENDIF;

  /*------------------------------------------------------------------
       Modifying working table.
  ------------------------------------------------------------------*/

  MESSAGE '[7/10] Modifying working table. . .';
  SLEEP 1;

  MODIFY :h_temp_table TO HASH
  ON     ruref;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to modify ' +:h_temp_table +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN :h_return;
  ENDIF;

  /*------------------------------------------------------------------
       Update contributor data using IDBR data.

       NB: Don't update PRODCOM's contact details columns 
           (phone_contact, contact_phone_no and fax_number)
  ------------------------------------------------------------------*/

  MESSAGE '[8/10] Updating ProdCom contributor details. . .';
  SLEEP 1;

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    UPDATE contributor a
    FROM   :h_temp_table b
    SET    contributor_reference    = b.ruref,
           addressee                = UPPERCASE(b.contact),
           add_name1                = b.runame1,
           add_name2                = b.runame2,
           add_name3                = b.runame3,
           add_tradstyle1           = b.tradstyle1,
           add_tradstyle2           = b.tradstyle2,
           add_tradstyle3           = b.tradstyle3,
           add_line1                = b.ruaddr1,
           add_line2                = b.ruaddr2,
           add_line3                = b.ruaddr3,
           add_line4                = b.ruaddr4,
           add_line5                = b.ruaddr5,
           add_postcode             = b.rupostcode
    WHERE  a.contributor_reference  = b.ruref;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return != 0
  THEN
    h_text = 'ERROR: Failed to populate ' +:h_temp_table +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN :h_return;
  ENDIF;

  /*------------------------------------------------------------------
     Check for sillyness.
  ------------------------------------------------------------------*/

  MESSAGE '[9/10] checking for silly contacts. . .';
  SLEEP 1;

  h_command = '$SCRIPTS/silly_check.script '
            + '1>/dev/null '
            + '2>/dev/null';

  h_return = CALLPROC msa_cp_callsys(:h_command);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to run silly_check.script successfully.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  SELECT COUNT(contributor_reference) AS h_count
  FROM   bru_silly_check;
  
  h_return = CALLPROC lp_error_check (p_num_row_ck = 0);

  IF h_return > 1
  THEN
    h_text = 'ERROR: Failed to count lines on bru_silly_check.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN :h_return;
  ENDIF;

  IF h_count > 0
  THEN

    MESSAGE 'WARNING: Silly names detected on contributor table. '
          + 'A report will be printed locally reflecting the contents of '
          + 'table bru_silly_names. Please liaise with control and/or idbr '
          + 'teams to correct the fields before rerunning this task. '
    WITH STYLE = POPUP;

    h_command = '$SCRIPTS/silly_report.script'
              + '1>/dev/null '
              + '2>/dev/null';
    h_return = CALLPROC msa_cp_callsys(:h_command);

    h_text = 'WARNING: Silly names detected on contributor table.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 1,
             p_text      = :h_text);
    RETURN :h_return;

  ENDIF;

  /*------------------------------------------------------------------
    Tidy up.
  ------------------------------------------------------------------*/

  MESSAGE '[10/10] Tidying up main working table. . .';
  SLEEP 1;

  h_return = CALLPROC lp_drop_table (p_table_name = :h_temp_table);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to tidy up working table ' +:h_temp_table + '.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
     Log end of process
  ------------------------------------------------------------------*/

  h_text = 'COMPLETE: Address update process completed.';
  CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 0,
             p_text      = :h_text);

  h_text = '*SIGNOFF*';
  CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 0,
             p_text      = :h_text);

  RETURN 0;

}

/************************* LOCAL PROCEDURES ***************************/


/*=======================================================================
    Local procedure to check sql for errors during sections of code that
    utilise personal temp tables. Committed, no rollback.
=======================================================================*/

PROCEDURE lp_error_check (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing (
              h_num_row_ck = :p_num_row_ck,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

  RETURN IFNULL(:lp_return,9);

}


/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing (
                  h_num_row_ck = :p_num_row_ck,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}


/*===========================================================================
	      Local procedure for dropping a table if it exists.
============================================================================*/

PROCEDURE lp_drop_table(p_table_name = CHAR(36) NOT NULL) = 

  DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT,
          lp_table  = CHAR(36) NOT NULL

BEGIN

  SELECT table_name as lp_table 
    FROM iitables
   WHERE table_name  = :p_table_name
     AND table_owner = :g_user_id;

  lp_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF lp_return = 0
  THEN
    RETURN 0;
  ENDIF;

  IF lp_return > 1 
  THEN
    MESSAGE 'SYSTEM ERROR: Failed whilst selecting ' 
          +  VARCHAR(:p_table_name) + ' from iitables prior to droping, '
          + 'with error code ' + VARCHAR(:lp_return) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9;
  ENDIF;

  MODIFY :p_table_name to TRUNCATED;

  DROP TABLE :p_table_name;

  h_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF h_return != 0 
  THEN 
    MESSAGE 'SYSTEM ERROR: Unable to drop ' + VARCHAR(:p_table_name) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9; 
  ENDIF;

  RETURN 0;

END

