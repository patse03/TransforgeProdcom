/*-S--------------------------------------------------------------------
Procedure msat_fp_sel_markers     

The latest version of IDBR's inquiry_selection_parameters table must be
created from the c8 using juliaw userid. This procedure then loads it into 
table inquiry_sel_params.

All additional references and any deselected since the original selection
are selected into 2 tables and their cell_numbers calculated.

These are then copied to 2 flat files in $TEXTFILES   
These files are then transferred automatically to the c8 using a UNIX
script
They are transferred to directory:
cd /idbr/live20/infer/isb
put addselhis014_199712
put deselect014_199712  
--------------------------------------------------------------------e-*/

PROCEDURE msat_fp_sel_markers () =

DECLARE ret_val       = INTEGER4 NOT NULL,
        h_table       = VARCHAR(24) NOT NULL,
        h_table1      = VARCHAR(24) NOT NULL,
        h_table2      = VARCHAR(24) NOT NULL,
        h_table3      = VARCHAR(24) NOT NULL,
        h_idbr_path1  = VARCHAR(100) NOT NULL,
        h_idbr_file1  = VARCHAR(100) NOT NULL,
        h_idbr_file2  = VARCHAR(100) NOT NULL,
        h_idbr_file3  = VARCHAR(100) NOT NULL,
	h_command     = VARCHAR(200) NOT NULL,
        h_frpr_name   = VARCHAR(24) NOT NULL

{
    h_frpr_name = 'msat_fp_sel_markers';
    h_table = 'sel_params_' + VARCHAR(:g_inquiry);
    h_table1 = 'inquiry_sel_params';
    h_table2 = 'inquiry_sel_live';
    h_table3 = 'inquiry_sel_dead';
    h_idbr_path1 = '/idbr/live20/infer/isb';

    IF :g_inquiry = 14
    THEN
       h_idbr_file1 = :g_path_name2 + 'idbr/iro/selpar0'+
		     VARCHAR(:g_inquiry) + '_' + VARCHAR(:g_period);

       h_idbr_file2 = 'addselhis0' +
		     VARCHAR(:g_inquiry) + '_' + VARCHAR(:g_period/100) + '12';

       h_idbr_file3 = 'deselect0' +
		     VARCHAR(:g_inquiry) + '_' + VARCHAR(:g_period/100) + '12';
    ELSE
       h_idbr_file1 = :g_path_name2 + 'idbr/iro/selpar0'+
		     VARCHAR(:g_inquiry) + '_' + VARCHAR(:g_period);

       h_idbr_file2 = 'addselhis0' +
		     VARCHAR(:g_inquiry) + '_' + VARCHAR(:g_period);

       h_idbr_file3 = 'deselect0' +
		     VARCHAR(:g_inquiry) + '_' + VARCHAR(:g_period);
    ENDIF;



    ret_val = CALLPROC batch_fp_drop_table(h_table = :h_table);

    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    /*-s----------------------------------------------------------------
    Create a table to hold the IDBR selection parameters table
    ----------------------------------------------------------------e-*/

    CREATE TABLE :h_table (
		 inqcode            CHAR(3) NOT NULL,
                 cell_no            INTEGER2 NOT NULL,
		 cell_desc          CHAR(18) NOT NULL,
                 seltype            CHAR(1) NOT NULL,
                 status_id          CHAR(1) NOT NULL,
                 lower_region       CHAR(2) NOT NULL,
                 upper_region       CHAR(2) NOT NULL,
                 lower_livelu       INTEGER2 NOT NULL,
                 upper_livelu       INTEGER2 NOT NULL,
                 lower_livevat      INTEGER2 NOT NULL,
                 upper_livevat      INTEGER2 NOT NULL,
                 lower_livepaye     INTEGER2 NOT NULL,
                 upper_livepaye     INTEGER2 NOT NULL,
                 lower_class        CHAR(5) NOT NULL,
                 upper_class        CHAR(5) NOT NULL,
                 lower_size         INTEGER4 NOT NULL,
                 upper_size         INTEGER4 NOT NULL,
                 prn_start          INTEGER4 NOT NULL,
                 no_reqd            INTEGER4 NOT NULL,
		 rotation_per       INTEGER1 NOT NULL,
                 int_remainder      FLOAT8 NOT NULL,
                 formtype           CHAR(4) NOT NULL,
                 cso_tel            CHAR(7) NOT NULL,
                 formtype2          CHAR(4) NOT NULL,
                 no_formtype2       INTEGER2 NOT NULL,
                 cso_tel2           CHAR(7) NOT NULL,
		 marker             INTEGER2 NOT NULL);

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Unable to create ' + :h_table,
                    :h_frpr_name,
                    9,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;

    message 'Copying table...' + :h_table;

    COPY TABLE :h_table (
                 inqcode            = c0colon,
                 cell_no            = c0colon,
		 cell_desc          = c0colon,
                 seltype            = c0colon,         
                 status_id          = c0colon,         
                 lower_region       = c0colon, 
                 upper_region       = c0colon, 
                 lower_livelu       = c0colon, 
                 upper_livelu       = c0colon, 
                 lower_livevat      = c0colon, 
                 upper_livevat      = c0colon,
                 lower_livepaye     = c0colon, 
                 upper_livepaye     = c0colon,
                 lower_class        = c0colon, 
                 upper_class        = c0colon, 
                 lower_size         = c0colon, 
                 upper_size         = c0colon, 
                 prn_start          = c0colon, 
                 no_reqd            = c0colon, 
		 rotation_per       = c0colon,
                 int_remainder      = c0colon,
                 formtype           = c0colon, 
                 cso_tel            = c0colon, 
                 formtype2          = c0colon, 
                 no_formtype2       = c0colon,
                 cso_tel2           = c0colon,
		 marker             = c0nl)

    FROM :h_idbr_file1;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Unable to copy from registers file',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;

    /*-s----------------------------------------------------------------
    Create a PRODCOM version of selection parameters table 
    ----------------------------------------------------------------e-*/
    
    ret_val = CALLPROC batch_fp_drop_table(h_table = :h_table1);

    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    message 'Creating table...' + :h_table1;

    CREATE TABLE :h_table1
    AS SELECT cell_no,
	      seltype,
              INT4(lower_class) as lower_industry,
              INT4(upper_class) as upper_industry,
              lower_size,
              upper_size,
              prn_start
    FROM :h_table;



    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Unable to create ' + :h_table1,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;

    /*-s----------------------------------------------------------------
    Delete rows from selection parameters table where seltype = 'L'
    These are rows that indicate that the reference list should be 
    used and selected from for each industry - for IDBR IS purposes.
    ----------------------------------------------------------------e-*/
    
    message 'Deleting from table...' + :h_table1;

    DELETE FROM :h_table1
    WHERE seltype = 'L';

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9 
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error deleting seltype L from ' + :h_table1,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;

    /*-s----------------------------------------------------------------
    Update IDBR lower level classes to equivalent Prodcom subclass 
    ----------------------------------------------------------------e-*/
/* Removed Nov 2011 ...
    message 'Updating table...' + :h_table1;

    UPDATE :h_table1 a
    FROM   industry_class_level b
    SET    lower_industry = b.class
    WHERE  a.lower_industry = b.sub_class;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error updating lower_industry on ' + :h_table1,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;



    UPDATE :h_table1 a
    FROM   industry_class_level b
    SET    upper_industry = b.class
    WHERE  a.upper_industry = b.sub_class;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error updating upper_industry on ' + :h_table1,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;
... */


    /*-s----------------------------------------------------------------
    Create a table containing the references that have been added online
    for the latest period. Use table despatch_history and compare with
    table selection_history to ensure only those that are still live will 
    be added to the additions file
    ----------------------------------------------------------------e-*/

    ret_val = CALLPROC batch_fp_drop_table(h_table = :h_table2);

    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    message 'Creating table...' + :h_table2;

/* obsolete ..
    IF :g_inquiry = 15
    THEN
       CREATE TABLE :h_table2
       AS SELECT    a.contributor_reference,
                    '015' as inquiry,
                    VARCHAR(:g_period) as period,
                    'Y' as selmkr,
                    a.contributor_industry,
                    a.register_emp,
		    'B' as seltype,
                    INT2(0) as cell_no,
                    '0000' as formtype,
                    'N' as stoprem,
                    '0' as remmkr,
                    INT4(0) as recdate,
                    INT2(0) as marker
       FROM         despatch_history a
       WHERE        period = :g_period
       AND          a.contributor_reference NOT IN
		    (SELECT contributor_reference
		     FROM   selection_history b
		     WHERE  a.period = b.period);
    ELSE
*/
       CREATE TABLE :h_table2
       AS SELECT    a.contributor_reference,
                    '014' as inquiry,
                    VARCHAR(:g_period/100) + '12' as period,
		    'Y' as selmkr,
                    a.contributor_industry,
		    c.alt_industry,	
                    a.register_emp,
		    'B' as seltype,
                    INT2(0) as cell_no,
                    '0000' as formtype,
                    'N' as stoprem,
                    '0' as remmkr,
                    INT4(0) as recdate,
                    INT2(0) as marker
       FROM         despatch_history a,
		    contributor_period c
       WHERE        a.period = :g_period
       AND	    a.period = c.period
       AND          a.contributor_reference = c.contributor_reference
       AND 	    a.contributor_industry = c.contributor_industry
       AND          a.contributor_reference NOT IN
		    (SELECT contributor_reference
		     FROM   selection_history b
		     WHERE  a.period = b.period);

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
    
    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error selecting live references into ' +:h_table2,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;


    /*-s----------------------------------------------------------------
    Create a table containing the references that have been deselected 
    for the latest period. Use table despatch_history and compare with
    table selection_history to ensure only those that are not having a
    form sent out ie. no longer on contributor_period but were on
    IDBR's selection file are added to the deselect file
    ----------------------------------------------------------------e-*/

    ret_val = CALLPROC batch_fp_drop_table(h_table = :h_table3);

    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    message 'Creating table...' + :h_table3;
/* obsolete ...
    IF :g_inquiry = 15
    THEN
        CREATE TABLE :h_table3
        AS SELECT a.contributor_reference,
                  '015' as inquiry,
                  VARCHAR(:g_period) as period,
	          'N' as selmkr,
                  a.contributor_industry,
                  a.register_emp,
                  'B' as seltype,
                  INT2(0) as cell_no,
	          '0' as formtype,
	          'N' as stoprem,
	          '0' as remmkr,
		   INT4(0) as recdate,
		   INT2(0) as marker
        FROM       selection_history a               
        WHERE      a.period = :g_period 
	AND        a.contributor_reference NOT IN
		  (SELECT contributor_reference
		   FROM   despatch_history b
		   WHERE  a.period = b.period)
    ELSE
*/
       CREATE TABLE :h_table3
       AS SELECT a.contributor_reference,
                 '014' as inquiry,
                  VARCHAR(:g_period/100) + '12' as period,
		 'N' as selmkr,
                  a.contributor_industry,
                  a.register_emp,
                 'B' as seltype,
                  INT2(0) as cell_no,
		  '0000' as formtype,
		  'N' as stoprem,
		  '0' as remmkr,
		  INT4(0) as recdate,
		  INT2(0) as marker
        FROM      selection_history a              
        WHERE     a.period = :g_period 
        AND       a.contributor_reference NOT IN
	         (SELECT contributor_reference
	          FROM   despatch_history b
                  WHERE  a.period = b.period);
   
 
    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
    
    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error selecting dead references into ' +:h_table3,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;


    /*-s----------------------------------------------------------------
    Using the inquiry selection parameters table as a lookup calculate
    the cell_no for additions and deselections
    ----------------------------------------------------------------e-*/
    message 'Updating table...' + :h_table2 + ' from ' + :h_table1;

    UPDATE :h_table2 a
    FROM   :h_table1 b
    SET    cell_no = b.cell_no
/*    WHERE  a.contributor_industry = b.lower_industry */
    WHERE  a.alt_industry = b.lower_industry
    AND    a.register_emp BETWEEN lower_size AND upper_size; 

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error updating ' + :h_table2 +' from finalsel_period',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;

    message 'Updating table...' + :h_table3 + ' from finalsel_period.';

    UPDATE :h_table3 a
    FROM   finalsel_period b
    SET    cell_no = b.cell_no
    WHERE  a.contributor_reference = b.ruref
    AND    LEFT(VARCHAR(a.period),4) = LEFT(VARCHAR(b.period),4)
    AND    int4(a.inquiry) = b.inquiry;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
    
    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error updating ' + :h_table3 +' from finalsel_period.',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;


    /*-s----------------------------------------------------------------
    Update the table containing additions, inquiry_sel_live, from 
    the original sel_params table loaded from IDBR as this contains
    the lower level classes that IDBR can recognise
    ----------------------------------------------------------------e-*/

    message 'Updating table...' + :h_table2;

    UPDATE :h_table2 a
    FROM   :h_table b
    SET    contributor_industry = INT4(b.lower_class)
    WHERE  a.cell_no = b.cell_no;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error updating ' + :h_table2 +
				    ' with IDBR classifications',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;


    /*-s----------------------------------------------------------------
    Update the table containing deselections, inquiry_sel_dead, from 
    the original sel_params table loaded from IDBR as this contains
    the lower level classes that IDBR can recognise
    ----------------------------------------------------------------e-*/

    message 'Updating table...' + :h_table3;

    UPDATE :h_table3 a
    FROM   :h_table b
    SET    contributor_industry = INT4(b.lower_class)
    WHERE  a.cell_no = b.cell_no;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error updating ' + :h_table3 +
				    ' with IDBR classifications',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;

    /*-s----------------------------------------------------------------
    Copy table of additions into flat file and copy to $TEXTFILES
    ----------------------------------------------------------------e-*/

    message 'Copying table...' + :h_table2 + ' into ' + :h_idbr_file2;

    COPY TABLE :h_table2 (
                 contributor_reference = c11,colon = d1,
                 inquiry               = c3, colon = d1,
                 period                = c6, colon = d1,  
                 selmkr                = c1, colon = d1,
                 contributor_industry  = c5, colon = d1,
                 seltype               = c1, colon = d1,
                 cell_no               = c6, colon = d1,
                 formtype              = c4, colon = d1,
                 stoprem               = c1, colon = d1,
                 remmkr                = c1, colon = d1,
                 recdate               = c13, colon = d1,
                 marker                = c6, nl = d1)
    INTO         :g_path_name1 + :h_idbr_file2;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
    
    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error copying ' + h_table2  + ' into ' + :h_idbr_file2,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;

    ELSEIF ret_val = 1
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'No rows copied to ' + :h_idbr_file2,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
    ENDIF;

  /*-s----------------------------------------------------------------
    Copy file to IDBR area of the c8 
    ----------------------------------------------------------------e-*/

    h_command = 'cp ' + :g_path_name1 + :h_idbr_file2 + ' ' +
		:h_idbr_path1;

    ret_val = CALLPROC msa_cp_callsys(:h_command);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error copying to idbr ' + :h_idbr_file2,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;


    /*-s----------------------------------------------------------------
    Copy table of deselections into flat file and copy to $TEXTFILES 
    ----------------------------------------------------------------e-*/

    message 'Copying table...' + :h_table3 + ' into ' + :h_idbr_file3;

    COPY TABLE :h_table3 (
                 contributor_reference = c11,colon = d1,
                 inquiry               = c3, colon = d1,
                 period                = c6, colon = d1,  
                 selmkr                = c1, nl = d1)
    INTO         :g_path_name1 + :h_idbr_file3;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
    
    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error copying ' + h_table3  + ' into ' + :h_idbr_file3,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;

    ELSEIF ret_val = 1
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'No rows copied to ' + :h_idbr_file3,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
    ENDIF;

  /*-s----------------------------------------------------------------
    Copy file to IDBR area of the c8 
    ----------------------------------------------------------------e-*/

    h_command = 'cp ' + :g_path_name1 + :h_idbr_file3 + ' ' +
		:h_idbr_path1;

    ret_val = CALLPROC msa_cp_callsys(:h_command);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error copying to idbr ' + :h_idbr_file3,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;


    RETURN 0;
}
    
