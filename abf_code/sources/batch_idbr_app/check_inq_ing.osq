/*----------------------------------------------------------------------
  check_inq_ing - online error handling

  If timeout error, returns 7
  If duplicity error, returns 8
  If system error (e.g. table doesn't exist), returns 9
  If h_num_row_ck = 1, expects rows, returns 1 if no rows found
  If h_num_row_ck = 0, expects no rows, returns 1 if rows found
  If the expected number of rows is found, returns 0
----------------------------------------------------------------------*/

PROCEDURE check_inq_ing(

        h_num_row_ck      = INTEGER4  NOT NULL,
        h_num_row         = INTEGER4  NOT NULL,
        h_commit          = CHAR(1)   NOT NULL,
        h_rollback        = CHAR(1)   NOT NULL,
        h_retries         = INTEGER1  NOT NULL,
        h_retries_allowed = INTEGER1  NOT NULL,
        h_frpr_name       = VARCHAR(24)  NOT NULL) =

DECLARE deadlock          = INTEGER4  NOT NULL,
        timeout           = INTEGER4  NOT NULL,
        duplicity         = INTEGER4  NOT NULL,
        h_err_num         = INTEGER4  NOT NULL,
        h_error_text      = VARCHAR(256) NOT NULL,
        h_user_id         = VARCHAR(10) NOT NULL
{

  deadlock  = 4700;
  timeout   = 4702;
  duplicity = 4500;


  INQUIRE_INGRES (h_num_row    = ROWCOUNT,
                  h_err_num    = ERRORNO,
                  h_error_text = ERRORTEXT);

  IF :h_err_num = :deadlock OR :h_err_num  = :timeout
  THEN
    IF :h_retries < :h_retries_allowed
    THEN
      RETURN 7;
    ELSE
      MESSAGE 'WARNING: Somebody else is using this data at the moment.' +
              ' Please try again in a minute or two.'  +
              ' After several unsuccessful attempts please' +
              ' leave the system competely and wait a few' +
              ' minutes before logging in again.'
      WITH STYLE = POPUP;
      ROLLBACK;
      COMMIT;
      RETURN 7;
    ENDIF;

  ENDIF;

  IF h_err_num <> 0
  THEN
    IF h_rollback = 'Y'
    THEN
      ROLLBACK;
    ENDIF;

    SELECT user_name AS h_user_id FROM iidbconstants;

    INSERT INTO error_log (
                error_time,
                error_text,
                frpr_name,
                error_code,
                user_id)
    VALUES (    'now',
                SQUEEZE(:h_error_text),
                :h_frpr_name,
                :h_err_num,
                :h_user_id);

    INQUIRE_INGRES (h_num_row    = rowcount,
                    h_err_num    = errorno,
                    h_error_text = errortext);

    IF h_err_num <> 0 OR h_num_row = 0
    THEN
      MESSAGE 'SYSTEM ERROR: Failed to insert error into the error_log.' + X'0D'
            + 'Please make a note of the following details and '
            + 'inform IM immediately: ' +X'0D'
            + 'FRPR_NAME: ' +:h_frpr_name +X'0D'
            + 'ERR_NUM:   ' +VARCHAR(:h_err_num) +x'0D'
            + 'USER_ID:   ' +:h_user_id
      WITH STYLE = POPUP;
    ENDIF;

    COMMIT;

    IF h_err_num = :duplicity
    OR h_err_num = :duplicity +1
    THEN 
      RETURN 8;
    ELSE 
      RETURN 9;
    ENDIF;

  ENDIF;  /* End of err_num != 0 */

  IF h_num_row_ck = 1 AND h_num_row = 0
  THEN
    IF h_rollback = 'Y'
    THEN
      ROLLBACK;
    ENDIF;

    IF h_commit = 'Y'
    THEN
      COMMIT;
    ENDIF;

    RETURN 1;

  ELSEIF h_num_row_ck = 0 AND h_num_row  > 0
  THEN
    IF h_rollback = 'Y'
    THEN
      ROLLBACK;
    ENDIF;

    IF h_commit = 'Y'
    THEN
      COMMIT;
    ENDIF;

    RETURN 1;

  ENDIF;

  IF h_commit = 'Y'
  THEN
    COMMIT;
  ENDIF;

  RETURN 0;

}
