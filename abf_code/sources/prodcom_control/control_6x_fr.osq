/*****************************************************************************
  DESCRIPTION: Frame to select a table group to edit.

  CREATED: Dom Ford - April 2012

  CHANGES: May 2012 - DF - Added header info now program functional.

*****************************************************************************/

INITIALIZE ()=

DECLARE h_retries_allowed = INTEGER1 NOT NULL,
        h_retries         = INTEGER1 NOT NULL,
        h_retry_or_not    = CHAR(5) NOT NULL,
        h_return          = INTEGER1 NOT NULL,
        h_return2         = INTEGER1 NOT NULL,
        h_prompt          = CHAR(1) NOT NULL,
        h_tablename       = VARCHAR(32) NOT NULL,
        h_groupname       = VARCHAR(24) NOT NULL,
        h_count           = INTEGER4 NOT NULL,
        h_total           = INTEGER4 NOT NULL,
        h_frpr_name       = VARCHAR(24) NOT NULL,

        lp_pop_table_1         = PROCEDURE RETURNING INTEGER,
        lp_pop_table_2         = PROCEDURE RETURNING INTEGER,
        lp_drop_table          = PROCEDURE RETURNING INTEGER,
        lp_error_check         = PROCEDURE RETURNING INTEGER,
        lp_full_error_check    = PROCEDURE RETURNING INTEGER
{

SET_FORMS FRS (MAPFILE='/home/prodcom/admin/prodcom.map');
SELECT DBMSINFO('database') AS g_database;

h_frpr_name = 'control_6x_fr';
s_trim = 'Tables currently in selected group:';
msa_date = 'now';
h_groupname = '';

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_allowed   = 3;


h_return = CALLPROC lp_pop_table_1;
IF h_return != 0 THEN EXIT; ENDIF;

SET_FORMS FIELD '' (INVISIBLE(s_trim) = 1);
SET_FORMS FIELD '' (INVISIBLE(tf2) = 1);
REDISPLAY;

RESUME FIELD tf1;

END

/*=======================================================================
   FRSKEY4: (F4) View Group
   Displays the selected groups tables in tf2.
======================================================================*/

'View Group', KEY FRSKEY4 = 

{

  h_groupname = tf1.groupname;

  h_return = CALLPROC lp_pop_table_2 (p_groupname = :h_groupname);

  SET_FORMS FIELD '' (INVISIBLE(s_trim) = 0);
  SET_FORMS FIELD '' (INVISIBLE(tf2) = 0);

  REDISPLAY;

  RESUME FIELD tf2;

} 


/*=======================================================================
   FRSKEY6: (F6) GROUPS - Opens table group control screen
======================================================================*/

'Edit Group', KEY FRSKEY6 = 
{

  IF h_groupname = ''
  THEN
    h_groupname = tf1.groupname;
  ENDIF;

  h_return = CALLFRAME control_6y_fr (p_groupname = :h_groupname);

  IF h_return > 1
  THEN
    EXIT;
  ENDIF;

  h_return = CALLPROC lp_pop_table_1;
  IF h_return != 0 THEN EXIT; ENDIF;

  SET_FORMS FIELD '' (INVISIBLE(s_trim) = 1);
  SET_FORMS FIELD '' (INVISIBLE(tf2) = 1);

  REDISPLAY;

  RESUME FIELD tf1;

}

/*=======================================================================
   FRSKEY8: (F8) Back - Restarts the frame.
======================================================================*/

'Back',  KEY FRSKEY8 = 
{
msa_date = 'now';

h_return = CALLPROC lp_pop_table_1;
IF h_return != 0 THEN EXIT; ENDIF;

SET_FORMS FIELD '' (INVISIBLE(s_trim) = 1);
SET_FORMS FIELD '' (INVISIBLE(tf2) = 1);
REDISPLAY;

RESUME FIELD tf1;
}

/*=======================================================================
   FRSKEY10: (F10) Back - Restarts the frame.
======================================================================*/

'New Group',  KEY FRSKEY10 = 
{
  CALLFRAME control_6z_fr();
  msa_date = 'now';

  h_return = CALLPROC lp_pop_table_1;
  IF h_return != 0 THEN EXIT; ENDIF;

  SET_FORMS FIELD '' (INVISIBLE(s_trim) = 1);
  SET_FORMS FIELD '' (INVISIBLE(tf2) = 1);
  REDISPLAY;

  RESUME FIELD tf1;
}
   
/*=======================================================================
   FRSKEY12: (F12) Exit - Returns to the main menu.                    
======================================================================*/

'EXIT', KEY FRSKEY12 = 
{
  RETURN;
}


/****************************************************************************/
/*********************** LOCAL PROCEDURES ***********************************/
/****************************************************************************/

/*===========================================================================
	      Local procedure for error checking within retry loop.
============================================================================*/

PROCEDURE lp_full_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

lp_return = CALLPROC check_inq_ing ( h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = :h_retries,
                                    h_retries_allowed = :h_retries_allowed,
                                    h_frpr_name       = 'val_gates_1.fr');
RETURN :lp_return;

END

/*===========================================================================
	      Local procedure for basic error checking.
============================================================================*/

PROCEDURE lp_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

lp_return = CALLPROC check_inq_ing ( h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = 1,
                                    h_retries_allowed = 1,
                                    h_frpr_name       = 'val_gates_1.fr');
RETURN :lp_return;

END

/*===========================================================================
	      Local procedure for dropping a table if it exists.
============================================================================*/

PROCEDURE lp_drop_table(p_table_name = VARCHAR(36) NOT NULL) = 

  DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT,
          lp_table  = VARCHAR(36) NOT NULL

BEGIN

  SELECT table_name as lp_table 
    FROM iitables
   WHERE table_name = :p_table_name
     AND table_owner = :g_user_id;

  lp_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF lp_return = 0
  THEN
    RETURN 0;
  ENDIF;

  IF lp_return > 1 
  THEN
    MESSAGE 'SYSTEM ERROR: Failed whilst selecting ' 
          +  VARCHAR(:p_table_name) + ' from iitables prior to droping, '
          + 'with error code ' + VARCHAR(:lp_return) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9;
  ENDIF;

  MODIFY :p_table_name to TRUNCATED;

  DROP TABLE :p_table_name;

  lp_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF lp_return != 0 
  THEN 
    MESSAGE 'SYSTEM ERROR: Unable to drop ' + VARCHAR(:p_table_name) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9; 
  ENDIF;

  RETURN 0;

END


/*===========================================================================
	      Local procedure for populating the first table field.   
============================================================================*/

PROCEDURE lp_pop_table_1() = 

  DECLARE lp_return  = INTEGER4 NOT NULL WITH DEFAULT,
          lp_return2 = INTEGER4 NOT NULL WITH DEFAULT,
          lp_prompt  = CHAR(1) NOT NULL

{

lp_return = CALLPROC lp_drop_table (p_table_name = 'tt_control6x_1');
IF lp_return != 0 THEN RETURN 9; ENDIF;

MESSAGE '                   Collecting data, please wait...';

CREATE TABLE tt_control6x_1 AS
SELECT DISTINCT groupname AS groupname
FROM   pvc_table_groups;

lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

IF lp_return = 1
THEN

  lp_prompt = PROMPT 'WARNING: There are no table groups defined. ' 
                   + 'Do you wish to create one?' 
  WITH STYLE = POPUP;
  lp_prompt = UPPER(:lp_prompt);

  IF lp_prompt = 'Y' 
  THEN
    CALLFRAME control_6z_fr();
    RETURN 1;
  ELSE
    RETURN 1;
  ENDIF;

ELSEIF lp_return >1
THEN
  MESSAGE 'SYSTEM ERROR: Failed to create tt_control6x_1. Error code '
	+ VARCHAR(:lp_return) +'.' +X'0D'
  WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

INITTABLE tf1 READ;

tf1 = SELECT groupname
      FROM tt_control6x_1
      ORDER BY groupname;

lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

IF lp_return != 0
THEN
  MESSAGE 'SYSTEM ERROR: Failed to initiate table field one. Error code '
	+ VARCHAR(:lp_return) +'.' +X'0D'
	WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

REDISPLAY;

END

/*===========================================================================
	      Local procedure for populating the second table field.   
============================================================================*/

PROCEDURE lp_pop_table_2 (p_groupname = VARCHAR(24) NOT NULL) = 

  DECLARE lp_return    = INTEGER4 NOT NULL WITH DEFAULT

{

lp_return = CALLPROC lp_drop_table (p_table_name = 'tt_control6x_2');
IF lp_return != 0 THEN RETURN 9; ENDIF;

MESSAGE '                   Collecting data, please wait...';

CREATE TABLE tt_control6x_2 AS
SELECT DISTINCT tablename AS tablename
FROM   pvc_table_groups
WHERE  groupname = :p_groupname;

lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

IF lp_return != 0
THEN
  MESSAGE 'SYSTEM ERROR: Failed to create tt_control6x_2. Error code '
	+ VARCHAR(:lp_return) +'.' +X'0D'
  WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

INITTABLE tf2 READ;

tf2 = SELECT tablename
      FROM tt_control6x_2
      ORDER BY tablename;

lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

IF lp_return != 0
THEN
  MESSAGE 'SYSTEM ERROR: Failed to initiate table field two. Error code '
	+ VARCHAR(:lp_return) +'.' +X'0D'
	WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

REDISPLAY;

}
