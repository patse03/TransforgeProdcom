/*****************************************************************************
  DESCRIPTION: Displays current application statuses and provides access
               to specific applications history of version changes.

  CREATED: Dom Ford - April 2012

  CHANGES: May 2012 - DF - Added header info now program functional.

*****************************************************************************/

INITIALIZE () =

DECLARE h_retries_allowed = INTEGER1 NOT NULL,
        h_retries         = INTEGER1 NOT NULL,
        h_retry_or_not    = CHAR(5) NOT NULL,
        h_return          = INTEGER1 NOT NULL,
        h_return2         = INTEGER1 NOT NULL,
        h_version         = INTEGER1 NOT NULL,
        h_point           = INTEGER1 NOT NULL,
        h_exit            = CHAR(1) NOT NULL,
        h_new_status      = CHAR(1) NOT NULL,
        h_prompt          = CHAR(1) NOT NULL,
        h_who             = CHAR(3) NOT NULL,
        h_command         = VARCHAR(1000) NOT NULL,
        h_dummy           = INTEGER4 NOT NULL,
        h_frpr_name       = VARCHAR(24) NOT NULL,
        h_message         = VARCHAR(70) NOT NULL,
        h_output2         = VARCHAR(55) NOT NULL,

        lp_drop_table           = PROCEDURE RETURNING INTEGER,
        lp_pop_table            = PROCEDURE RETURNING INTEGER,
        lp_error_check          = PROCEDURE RETURNING INTEGER,
        lp_full_error_check     = PROCEDURE RETURNING INTEGER
{

  SET_FORMS FRS (MAPFILE='/home/prodcom/admin/prodcom.map');
  SELECT DBMSINFO('username') AS g_user_id;
  SELECT DBMSINFO('database') AS g_database;

  h_frpr_name = 'control_0a_fr';
  msa_date = 'now';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;
  h_retries_allowed   = 3;

  h_return = CALLPROC lp_pop_table;

  IF h_return > 1 THEN EXIT; ENDIF;

  RESUME FIELD tf;

}

/*=======================================================================
   FRSKEY4: History - Shows app log for specified app.
======================================================================*/

'View Version History', KEY FRSKEY4 = 
BEGIN

  IF tf.status = 'U'
  THEN
    MESSAGE 'STATUS U: There is no history for the selected application.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;
 
  g_application = :tf.application;
  h_return = CALLFRAME control_0a_history_fr ();
  IF h_return > 1 THEN EXIT; ENDIF;
  RESUME FIELD tf;

END

/*=======================================================================
   FRSKEY8: Toggle Lock
======================================================================*/

'Toggle Lock', KEY FRSKEY8 = 
BEGIN

  IF  tf.status != 'U' 
  AND tf.status != 'L'
  AND tf.status != 'H'
  THEN
    MESSAGE 'WHOOPS: This application is being worked on already.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  IF tf.status != 'H'
  THEN
    h_new_status = 'H';
  ELSEIF (tf.version = 1 AND tf.point = 0)
  THEN
    h_new_status = 'U'
  ELSE 
    h_new_status = 'L';
  ENDIF;

  /*------------------------------------------------------------------
       Update application status.
  -------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;
  h_retries_allowed   = 3;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    UPDATE pvc_application_status
    SET    status  = :h_new_status,
           who     = :g_who,
           date    = :msa_date
    WHERE  application = :tf.application;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return <> 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to update pvc_application_status. Error code '
          + VARCHAR(:h_return) +'.'
    WITH STYLE = POPUP;
    EXIT;
  ENDIF;

  IF h_return = 1 /* No previous status */
  THEN
   INSERT INTO pvc_application_status
   VALUES    ( :tf.application,
               1,
               0,
               :h_new_status,
               :g_who,
               :msa_date );  
  ENDIF;

  DELETE FROM pvc_application_status 
  WHERE version = 1
    AND point = 0
    AND status = 'U';

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1 
  THEN
    MESSAGE 'ERROR: Failed to delete U marked rows from '
          + 'pvc-application_status. Error code ' +VARCHAR(:h_return) +'.'
    WITH STYLE = POPUP;
    EXIT;
  ENDIF;

  h_return = CALLPROC lp_pop_table;

  REDISPLAY;

END

/*=======================================================================
   FRSKEY1: (F12) Back - Returns to the main menu.                    
======================================================================*/

'Back', KEY FRSKEY12 = 
BEGIN
  RETURN;
END


/****************************************************************************/
/*********************** LOCAL PROCEDURES ***********************************/
/****************************************************************************/

/*===========================================================================
	      Local procedure for error checking within retry loop.
============================================================================*/

PROCEDURE lp_full_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE h_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

h_return = CALLPROC check_inq_ing ( h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = :h_retries,
                                    h_retries_allowed = :h_retries_allowed,
                                    h_frpr_name       = 'control_0a_fr');
RETURN :h_return;

END

/*===========================================================================
	      Local procedure for basic error checking.
============================================================================*/

PROCEDURE lp_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE h_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

h_return = CALLPROC check_inq_ing ( h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = 1,
                                    h_retries_allowed = 1,
                                    h_frpr_name       = 'control_0a_fr');
RETURN :h_return;

END

/*===========================================================================
	      Local procedure for dropping a table if it exists.
============================================================================*/

PROCEDURE lp_drop_table(p_table_name = CHAR(24) NOT NULL) = 

  DECLARE h_return = INTEGER4 NOT NULL WITH DEFAULT,
          lp_table  = CHAR(20) NOT NULL

BEGIN

  SELECT table_name as lp_table 
    FROM iitables
   WHERE table_name = :p_table_name
     AND table_owner = :g_user_id;

  h_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF h_return = 0
  THEN
    RETURN 0;
  ENDIF;

  IF h_return > 1 
  THEN
    MESSAGE 'SYSTEM ERROR: Failed whilst selecting ' 
          +  VARCHAR(:p_table_name) + ' from iitables prior to droping, '
          + 'with error code ' + VARCHAR(:h_return) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9;
  ENDIF;

  MODIFY :p_table_name to TRUNCATED;

  DROP TABLE :p_table_name;

  h_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF h_return != 0 
  THEN 
    MESSAGE 'SYSTEM ERROR: Unable to drop ' + VARCHAR(:p_table_name) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9; 
  ENDIF;

  RETURN 0;

END


/*===========================================================================
	      Local procedure for populating the table field.   
============================================================================*/

PROCEDURE lp_pop_table() = 

  DECLARE h_return = INTEGER4 NOT NULL WITH DEFAULT

BEGIN

h_return = CALLPROC lp_drop_table (p_table_name = 'tt_control0a');
IF h_return != 0 THEN RETURN 9; ENDIF;

MESSAGE '                   Collecting data, please wait...';

CREATE TABLE tt_control0a AS
SELECT 'U' AS status,
       object_name AS application,
       1 AS version, 
       0 AS point, 
       'zzz' AS who
FROM   ii_objects
WHERE  object_class = 2001; 

h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

IF h_return != 0 
THEN
  MESSAGE 'SYSTEM ERROR: Failed to create tt_control0a. Error code '
	+ VARCHAR(:h_return) +'.' +X'0D'
	WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

UPDATE tt_control0a a
  FROM pvc_application_status b
   SET status = b.status,
       version = b.version,
       point   = b.point,
       who     = b.who
 WHERE a.application = b.application;

h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

IF h_return > 1
THEN
  MESSAGE 'ERROR: Failed to update tt_control0a with application info.'+X'0D'
	+ '       Error code ' +VARCHAR(:h_return) +'.' 
	   WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

INITTABLE tf READ;

tf = SELECT status,
	    application, 
            version, 
            point, 
            who
       FROM tt_control0a
   ORDER BY application;

h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

IF h_return != 0
THEN
  MESSAGE 'SYSTEM ERROR: Failed to initiate table field. Error code '
	+ VARCHAR(:h_return) +'.' +X'0D'
	WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

REDISPLAY;

/*----------------------------------------------------------------
        Colours rows:
        Development, Locked = Red
        Working, Test       = Yellow
        Live =              = Green
        Unknown/Unversioned = White. 
-----------------------------------------------------------------*/

   UNLOADTABLE tf
   BEGIN

     IF (tf.status = 'D' OR tf.status = 'H') 
     THEN
       SET_FORMS ROW '' tf (COLOUR(status) = 4);
       SET_FORMS ROW '' tf (COLOUR(application) = 4);
       SET_FORMS ROW '' tf (COLOUR(version) = 4);
       SET_FORMS ROW '' tf (COLOUR(point) = 4);
       SET_FORMS ROW '' tf (COLOUR(who) = 4);

     ELSEIF (tf.status = 'W' OR tf.status = 'T') 
     THEN
       SET_FORMS ROW '' tf (COLOUR(status) = 7);
       SET_FORMS ROW '' tf (COLOUR(application) = 7);
       SET_FORMS ROW '' tf (COLOUR(version) = 7);
       SET_FORMS ROW '' tf (COLOUR(point) = 7);
       SET_FORMS ROW '' tf (COLOUR(who) = 7);

     ELSEIF tf.status = 'L' 
     THEN
       SET_FORMS ROW '' tf (COLOUR(status) = 2);
       SET_FORMS ROW '' tf (COLOUR(application) = 2);
       SET_FORMS ROW '' tf (COLOUR(version) = 2);
       SET_FORMS ROW '' tf (COLOUR(point) = 2);
       SET_FORMS ROW '' tf (COLOUR(who) = 2);

     ELSE
       SET_FORMS ROW '' tf (COLOUR(status) = 0);
       SET_FORMS ROW '' tf (COLOUR(application) = 0);
       SET_FORMS ROW '' tf (COLOUR(version) = 0);
       SET_FORMS ROW '' tf (COLOUR(point) = 0);
       SET_FORMS ROW '' tf (COLOUR(who) = 0);
     ENDIF;
   END;

   REDISPLAY;

END

