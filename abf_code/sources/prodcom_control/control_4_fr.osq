/*****************************************************************************
  DESCRIPTION: Frame to select application to move to UAT. Will only display
               applications with 'W' (working copy) status.

               Making a selection launches control_4a_fr, a pop-up to
               select the required UAT database.

  CREATED: Dom Ford - April 2012

  CHANGES: May 2012 - DF - Added header info now program functional.

*****************************************************************************/

INITIALIZE () =

DECLARE h_retries_allowed = INTEGER1 NOT NULL,
        h_retries         = INTEGER1 NOT NULL,
        h_retry_or_not    = CHAR(5) NOT NULL,
        h_return          = INTEGER1 NOT NULL,
        h_version         = INTEGER1 NOT NULL WITH DEFAULT,
        h_point           = INTEGER1 NOT NULL WITH DEFAULT,
        h_exit            = CHAR(1) NOT NULL,
        h_prompt          = CHAR(1) NOT NULL,
        h_who             = CHAR(3) NOT NULL,
        h_fullname        = VARCHAR(40) NOT NULL,
        h_target          = VARCHAR(36) NOT NULL,
        h_dummy           = INTEGER4 NOT NULL,
        h_frpr_name       = VARCHAR(24) NOT NULL,
        h_message         = VARCHAR(70) NOT NULL,
        h_dir             = VARCHAR(55) NOT NULL,
        h_copy_dir        = VARCHAR(55) NOT NULL,
        h_copy_source     = VARCHAR(55) NOT NULL,
        h_output1         = VARCHAR(55) NOT NULL,
        h_output2         = VARCHAR(55) NOT NULL,
        h_sml_dir         = VARCHAR(55) NOT NULL,
        h_img_dir         = VARCHAR(55) NOT NULL,
        h_command         = VARCHAR(1000) NOT NULL,

        lp_drop_table       = PROCEDURE RETURNING INTEGER,
        lp_pop_table_1      = PROCEDURE RETURNING INTEGER,
        lp_pop_table_2      = PROCEDURE RETURNING INTEGER,
        lp_error_check      = PROCEDURE RETURNING INTEGER,
        lp_full_error_check = PROCEDURE RETURNING INTEGER
{

SELECT DBMSINFO('username') AS g_user_id;
SELECT DBMSINFO('database') AS g_database;

h_frpr_name = 'control_4_fr';
s_trim = 'Select destination test database:';
msa_date = 'now';

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_allowed   = 3;

h_return = CALLPROC lp_pop_table_1;
IF h_return = 1 THEN RETURN; ENDIF;
IF h_return > 1 THEN EXIT; ENDIF;

h_return = CALLPROC lp_pop_table_2;
IF h_return = 1 THEN RETURN; ENDIF;
IF h_return > 1 THEN EXIT; ENDIF;

SET_FORMS FIELD '' (INVISIBLE(s_trim) = 1);
SET_FORMS FIELD '' (INVISIBLE(tf2) = 1);
REDISPLAY;

RESUME FIELD tf1;

END

/*=======================================================================
   FRSKEY4: Go 
======================================================================*/

'Go', KEY FRSKEY4 =
BEGIN

g_application = :tf1.application;
h_who         = :tf1.who;
h_fullname    = :tf1.fullname;
h_version     = :tf1.version;
h_point       = :tf1.point;

IF h_who != g_who
THEN

  h_message = 'This application is being worked on by ';
  h_prompt = '';

  WHILE h_prompt != 'Y'
    AND h_prompt != 'N'
  DO
    h_prompt = PROMPT 'CAUTION: ' + :h_message
             + SQUEEZE(VARCHAR(:h_fullname)) +'.' +X'0D'
             + '         Do you want to continue? [Y/N]'
    WITH STYLE = POPUP;
    h_prompt = UPPER(h_prompt);
  ENDWHILE;

  IF h_prompt != 'Y'
  THEN
    RESUME FIELD tf1;
  ENDIF;

ENDIF;

SET_FORMS FIELD '' (INVISIBLE(s_trim) = 0);
SET_FORMS FIELD '' (INVISIBLE(tf2) = 0);
REDISPLAY;

h_return = CALLFRAME control_4a_fr (p_target = BYREF(:h_target)); 
IF h_return = 1 THEN RETURN; ENDIF;
IF h_return > 1 THEN EXIT; ENDIF;

msa_date = 'now'; /* Needed to sync */

h_dir = '/home/prodcom/admin/produser/';
h_sml_dir = LEFT(:h_target,(LENGTH(:h_target)-2));
h_img_dir = '/prodcom/source/' +:h_sml_dir +'/images';
h_output1 = :g_application + '_copyout.error';
h_output2 = :g_application + '_copyin.error';

/*...........................................................................
     Select destination app directory and source directory.
...........................................................................*/

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_allowed   = 3;

WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
DO

  h_retries = :h_retries + 1;

  SELECT application_dir AS h_copy_dir,
         source_dir      AS h_copy_source
  FROM   pvc_databases
  WHERE  database = :h_target;

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return <> 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return != 0
THEN
  MESSAGE 'ERROR: Failed to select destination directories from '
        + 'pvc_databases table. Error code ' +VARCHAR(:h_return) +'.'
  WITH STYLE = POPUP;
  RETURN;
ENDIF;

/*...........................................................................
     Creates application directory on produatdb
..........................................................................*/

  MESSAGE 'creating new application folder...';

  h_command = '$SCRIPTS/create_app_dir.script '
            + :g_application + ' ' +:h_sml_dir + ' valiant  2>/dev/null';
  h_return = CALLPROC callsys_cp(:h_command);

IF h_return != 0
THEN  
  MESSAGE 'ERROR: Failed to create application folder on '+:h_sml_dir +'. '
        + 'Error code ' +VARCHAR(:h_return) +'. Unable to continue.'
  WITH STYLE = POPUP;
  RETURN;
ENDIF;

/*...........................................................................
     Copying application out.
...........................................................................*/

MESSAGE 'Copying application out..';

h_command = 'cd ' + :h_dir 
          + ';  copyapp out '
          + '-d/admin/scratch/prodcom_copy_area ' 
          + '-tcopyapp_' + :g_application 
          + ' produserdb ' + :g_application 
          + ' > ' + :h_dir + 'copyapp/' 
          + :h_output1 + ' 2>&1' ;

h_return = CALLPROC callsys_cp(:h_command);

IF h_return != 0
THEN
  MESSAGE 'ERROR: Failed to process copyapp out. Error code '
        + VARCHAR(:h_return) +'.' +X'0D'
        + 'Command was: ' +VARCHAR(:h_command)
  WITH STYLE = POPUP;
  EXIT;
ENDIF;

/*...........................................................................
     Copying application in.
...........................................................................*/

MESSAGE 'Copying application in..';

h_command = 'cd ' + :h_copy_dir 
          + ' ; copyapp in'
          + ' -c '        
          + ' -d/admin/scratch/prodcom_copy_area'
          + ' -r' 
          + ' -s' +:h_copy_source + :g_application    
          + ' ' +:h_target 
          + ' copyapp_' +:g_application 
          + ' > ' + :h_copy_dir + 'copyapp/' + :h_output2 
          + ' 2>&1' ;

h_return = CALLPROC callsys_cp(:h_command);

IF h_return != 0
THEN
  MESSAGE 'ERROR: Failed to process copyapp in. Error code '
        + VARCHAR(:h_return) +'.' +X'0D'
        + 'Command was: ' +VARCHAR(:h_command)
  WITH STYLE = POPUP;
  EXIT;
ENDIF;

/*------------------------------------------------------------------
     Insert into pvc_application_testing
-------------------------------------------------------------------*/

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_allowed   = 3;

WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
DO

  h_retries = :h_retries + 1;

  DELETE FROM pvc_application_testing
  WHERE  application = :g_application;

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return <> 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return > 1
THEN
  MESSAGE 'ERROR: Failed to delete from pvc_application_testing. Error code '
        + VARCHAR(:h_return) +'.  You will need to repeat the action ' 
        + 'after fixing the problem.'
  WITH STYLE = POPUP;
  EXIT;
ENDIF;

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_allowed   = 3;

WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
DO

  h_retries = :h_retries + 1;

  INSERT INTO pvc_application_testing
  VALUES    ( :g_application,
              :h_target); 

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return <> 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return > 1
THEN
  MESSAGE 'ERROR: Failed to insert into pvc_application_testing. Error code '
        + VARCHAR(:h_return) +'. Please construct row manually in ' 
        + 'aplication_testing and pvc_copy_log_apps.'
  WITH STYLE = POPUP;
  EXIT;
ENDIF;

/*------------------------------------------------------------------
     Insert into pvc_copy_log_apps
-------------------------------------------------------------------*/

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_allowed   = 3;

WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
DO

  h_retries = :h_retries + 1;

  INSERT INTO pvc_copy_log_apps
  VALUES    ( :g_application,
              :g_option,
              :msa_date,
              :g_who,
              :g_user_id,
              :h_version,
              :h_point); 

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return <> 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return > 1
THEN
  MESSAGE 'ERROR: Failed to insert into pvc_copy_log_apps. Error code '
        + VARCHAR(:h_return) +'. Please construct row manually.'
  WITH STYLE = POPUP;
  EXIT;
ENDIF;


/*------------------------------------------------------------------
     Update application status.
-------------------------------------------------------------------*/

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_allowed   = 3;

WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
DO

  h_retries = :h_retries + 1;

  UPDATE pvc_application_status
  SET    status  = 'T',
         who     = :g_who,
         date    = :msa_date
  WHERE  application = :g_application;

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return <> 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return > 1
THEN
  MESSAGE 'ERROR: Failed to update pvc_application_status. Error code '
        + VARCHAR(:h_return) +'.'
  WITH STYLE = POPUP;
  EXIT;
ENDIF;


/*----------------------------------------------------------------------------
  Creates image of application in the image directory of the target database
-----------------------------------------------------------------------------*/

MESSAGE 'Imaging application...';

h_command = 'cd ' +:h_img_dir +' ;'
          + ' imageapp ' +:h_target + ' ' +:g_application + ' -f -w' 
          + ' 1>/dev/null 2>/dev/null"';

h_return = CALLPROC callsys_cp(:h_command);

IF h_return != 0
THEN
  MESSAGE 'ERROR: Failed to image application. Error code '
        + VARCHAR(:h_return) +'.'
  WITH STYLE = POPUP;
  EXIT;
ENDIF;

RETURN;

END


/*=======================================================================
   FRSKEY6: (F12) Back - Returns to the main menu.                    
======================================================================*/

'Back', KEY FRSKEY12 = 
BEGIN
  RETURN;
END


/****************************************************************************/
/*********************** LOCAL PROCEDURES ***********************************/
/****************************************************************************/

/*===========================================================================
	      Local procedure for error checking within retry loop.
============================================================================*/

PROCEDURE lp_full_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

lp_return = CALLPROC check_inq_ing ( h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = :h_retries,
                                    h_retries_allowed = :h_retries_allowed,
                                    h_frpr_name       = 'control_4_fr');
RETURN :lp_return;

END

/*===========================================================================
	      Local procedure for basic error checking.
============================================================================*/

PROCEDURE lp_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

lp_return = CALLPROC check_inq_ing ( h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = 1,
                                    h_retries_allowed = 1,
                                    h_frpr_name       = 'val_gates_1.fr');
RETURN :lp_return;

END

/*===========================================================================
	      Local procedure for dropping a table if it exists.
============================================================================*/

PROCEDURE lp_drop_table(p_table_name = VARCHAR(36) NOT NULL) = 

  DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT,
          lp_table  = VARCHAR(36) NOT NULL

BEGIN

  SELECT table_name as lp_table 
    FROM iitables
   WHERE table_name = :p_table_name
     AND table_owner = :g_user_id;

  lp_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF lp_return = 0
  THEN
    RETURN 0;
  ENDIF;

  IF lp_return > 1 
  THEN
    MESSAGE 'SYSTEM ERROR: Failed whilst selecting ' 
          +  VARCHAR(:p_table_name) + ' from iitables prior to droping, '
          + 'with error code ' + VARCHAR(:lp_return) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9;
  ENDIF;

  MODIFY :p_table_name to TRUNCATED;

  DROP TABLE :p_table_name;

  lp_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF lp_return != 0 
  THEN 
    MESSAGE 'SYSTEM ERROR: Unable to drop ' + VARCHAR(:p_table_name) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9; 
  ENDIF;

  RETURN 0;

END


/*===========================================================================
	   Local procedure for populating the first table field.   
============================================================================*/

PROCEDURE lp_pop_table_1() = 

  DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT

BEGIN

lp_return = CALLPROC lp_drop_table (p_table_name = 'tt_control4_apps');
IF lp_return != 0 THEN RETURN 9; ENDIF;

MESSAGE '                   Collecting data, please wait...';

CREATE TABLE tt_control4_apps AS
SELECT b.status AS status,
       a.object_name AS application,
       b.version AS version, 
       b.point AS point, 
       b.who AS who,
       'someone                                 ' AS fullname 
FROM   ii_objects a,
       pvc_application_status b 
WHERE  a.object_name = b.application
  AND  a.object_class = 2001
  AND  b.status = 'W'; 

lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

IF lp_return = 1
THEN
  MESSAGE 'NOTE: There are no applications currently marked as waiting for UAT.'
  WITH STYLE = POPUP;
  RETURN 1;
ELSEIF lp_return >1
THEN
  MESSAGE 'SYSTEM ERROR: Failed to create tt_control4_apps. Error code '
	+ VARCHAR(:lp_return) +'.' +X'0D'
  WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

UPDATE tt_control4_apps a
  FROM pvc_developers b
   SET fullname = SQUEEZE(b.first_name) + ' ' +SQUEEZE(b.second_name)
 WHERE a.who = b.initials;

lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

IF lp_return > 1
THEN
  MESSAGE 'ERROR: Failed to update tt_control4_apps with developer info.'+X'0D'
	+ '       Error code ' +VARCHAR(:lp_return) +'.' 
	   WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

INITTABLE tf1 READ;

tf1 = SELECT status,
	    application, 
            version, 
            point, 
            who,
            fullname 
       FROM tt_control4_apps
   ORDER BY application;

lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

IF lp_return != 0
THEN
  MESSAGE 'SYSTEM ERROR: Failed to initiate first table field. Error code '
	+ VARCHAR(:lp_return) +'.' +X'0D'
	WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

REDISPLAY;

END
 
/*===========================================================================
	   Local procedure for populating the second table field.   
============================================================================*/

PROCEDURE lp_pop_table_2() = 

  DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT

BEGIN

lp_return = CALLPROC lp_drop_table (p_table_name = 'tt_control4_dbs');
IF lp_return != 0 THEN RETURN 9; ENDIF;

MESSAGE '                   Collecting data, please wait...';

CREATE TABLE tt_control4_dbs 
AS
SELECT database as target
FROM   pvc_databases
WHERE  database LIKE '%uat%' 
  AND  type = 'TEST';

lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

IF lp_return = 1
THEN
  MESSAGE 'NOTE: There are no UAT databases defined on the databases table.'
  WITH STYLE = POPUP;
  RETURN 1;
ELSEIF lp_return >1
THEN
  MESSAGE 'SYSTEM ERROR: Failed to create tt_control4_dbs. Error code '
	+ VARCHAR(:lp_return) +'.' +X'0D'
  WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

INITTABLE tf2 READ;

tf2 = SELECT   target
      FROM     tt_control4_dbs
      ORDER BY target;

lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

IF lp_return != 0
THEN
  MESSAGE 'SYSTEM ERROR: Failed to initiate table field two. Error code '
	+ VARCHAR(:lp_return) +'.' +X'0D'
	WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

REDISPLAY;

END
 
