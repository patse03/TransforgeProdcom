/*****************************************************************************
  DESCRIPTION: Pop-up to collect user initials, which are used throughout
               the application. The validation of these provides a basic
               level of security, sufficient given the higher level of
               log-on security.

  CREATED: Dom Ford - April 2012

  CHANGES: May 2012 - DF - Added header info now program functional.

*****************************************************************************/

INITIALIZE ()=

DECLARE h_retries_max  = INTEGER1 NOT NULL,
        h_retries      = INTEGER1 NOT NULL,
        h_retry_or_not = CHAR(5) NOT NULL,
        h_return       = INTEGER1 NOT NULL,
        h_frpr_name    = VARCHAR(24) NOT NULL,
        h_who          = CHAR(3) NOT NULL,
        h_firstname    = VARCHAR(20) NOT NULL,
        h_secondname   = VARCHAR(20) NOT NULL,
        h_count        = INTEGER1 NOT NULL,

        lp_error_check          = PROCEDURE RETURNING INTEGER,
        lp_full_error_check     = PROCEDURE RETURNING INTEGER

BEGIN


h_frpr_name = 'control_1a_fr';
h_count = 0;

END

/*----------------------------------------------------------------------
   Developer identification validation.
----------------------------------------------------------------------*/

FIELD s_who =
BEGIN

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;
  h_retries_max   = 3;

  WHILE :h_retries < h_retries_max AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT initials    AS h_who,
           first_name  AS h_firstname,
           second_name AS h_secondname
    FROM   pvc_developers
    WHERE  initials = UPPER(:s_who);

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return <> 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;


  IF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to select initials for validation.'
             WITH STYLE = POPUP;
    EXIT;
  ELSEIF h_return = 1 THEN
     
    h_count = h_count +1;

    IF h_count = 3
    THEN
      MESSAGE 'ERROR: Unable to validate initials. Strike 3, youre out!'
               WITH STYLE = POPUP;
      EXIT; 
    ELSE   
      MESSAGE 'WARNING: Initials entered have not validated. Strike '
            + VARCHAR(:h_count) +'.'
               WITH STYLE = POPUP;

    ENDIF;
    
    RESUME FIELD s_who;

  ENDIF;

  g_who = h_who;

  g_fullname = squeeze(:h_firstname)
             + ' '
             + squeeze(:h_secondname);

  CALLFRAME control_1b_fr();

  RETURN; 
 
END

/*=======================================================================
   FRSKEY4: Back.
======================================================================*/

'EXIT', KEY FRSKEY4 = 
BEGIN

EXIT;

END


/****************************************************************************/
/*********************** LOCAL PROCEDURES ***********************************/
/****************************************************************************/

/*===========================================================================
	      Local procedure for error checking within retry loop.
============================================================================*/

PROCEDURE lp_full_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

lp_return = CALLPROC check_inq_ing (h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = :h_retries,
                                    h_retries_allowed = :h_retries_max,
                                    h_frpr_name       = 'val_gates_1.fr');
RETURN :lp_return;

END

/*===========================================================================
	      Local procedure for basic error checking.
============================================================================*/

PROCEDURE lp_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

lp_return = CALLPROC check_inq_ing (h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = 1,
                                    h_retries_allowed = 1,
                                    h_frpr_name       = 'val_gates_1.fr');
RETURN :lp_return;

END



