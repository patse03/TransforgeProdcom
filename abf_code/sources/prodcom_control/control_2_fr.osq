/*****************************************************************************
  DESCRIPTION: Frame to facilitate the checking out of an aplication from
               the working code store (produserdb) to the development area.
       
               The application folders are created automatically.

  CREATED: Dom Ford - April 2012

  CHANGES: May 2012 - DF - Added header info now program functional.

*****************************************************************************/

INITIALIZE () =

DECLARE h_retries_allowed = INTEGER1 NOT NULL,
        h_retries         = INTEGER1 NOT NULL,
        h_retry_or_not    = CHAR(5) NOT NULL,
        h_return          = INTEGER1 NOT NULL,
        h_return2         = INTEGER1 NOT NULL,
        h_version         = INTEGER1 NOT NULL,
        h_point           = INTEGER1 NOT NULL,
        h_exit            = CHAR(1) NOT NULL,
        h_prompt          = CHAR(1) NOT NULL,
        h_who             = CHAR(3) NOT NULL,
        h_fullname        = VARCHAR(40) NOT NULL,
        h_command         = VARCHAR(1000) NOT NULL,
        h_dummy           = INTEGER4 NOT NULL,
        h_frpr_name       = VARCHAR(24) NOT NULL,
        h_message         = VARCHAR(70) NOT NULL,
        h_dir             = VARCHAR(55) NOT NULL,
        h_copy_dir        = VARCHAR(55) NOT NULL,
        h_copy_source     = VARCHAR(55) NOT NULL,
        h_output1         = VARCHAR(55) NOT NULL,
        h_output2         = VARCHAR(55) NOT NULL,

        lp_drop_table           = PROCEDURE RETURNING INTEGER,
        lp_pop_table            = PROCEDURE RETURNING INTEGER,
        lp_error_check          = PROCEDURE RETURNING INTEGER,
        lp_full_error_check     = PROCEDURE RETURNING INTEGER
{

SELECT DBMSINFO('username') AS g_user_id;
SELECT DBMSINFO('database') AS g_database;

h_frpr_name = 'control_2_fr';
msa_date = 'now';
h_dir = '/home/prodcom/admin/produser/';
h_copy_dir = '/home/prodcom/admin/proddev/';
h_copy_source = '/prodcom/source/proddev/sources/';
h_output1 = :g_application + '_copyout.error';
h_output2 = :g_application + '_copyin.error';

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_allowed   = 3;

h_return = CALLPROC lp_pop_table;

IF h_return > 1 THEN EXIT; ENDIF;

RESUME FIELD tf;

}

/*=======================================================================
   FRSKEY4: Go 
======================================================================*/

'Go', KEY FRSKEY4 =
BEGIN

g_application = :tf.application;
h_who         = :tf.who;
h_fullname    = :tf.fullname;
h_version     = :tf.version;
h_point       = :tf.point;

/*------------------------------------------------------------------
     Checks to see if application is locked or cautioned.
-------------------------------------------------------------------*/

IF tf.status = 'D' 
THEN
  h_message = 'This application is being worked on by '

ELSEIF tf.status = 'H' 
THEN
  h_message = 'This application has been locked by '

ELSEIF tf.status = 'W'
THEN
  h_message = 'This application was recently worked on by '

ELSEIF tf.status = 'T'
THEN
  h_message = 'This application is currently being tested by '

ENDIF;

IF tf.status = 'D'
OR tf.status = 'H'
THEN
  MESSAGE 'WARNING: ' + :h_message
        + SQUEEZE(VARCHAR(:h_fullname)) +X'0D'
	+ '         and cannot be checked out at this time.'
  WITH STYLE = POPUP;
  RESUME FIELD tf;
ENDIF;

IF (tf.status = 'T' OR tf.status = 'W')
AND g_who != h_who
THEN

  h_prompt = '';

  WHILE h_prompt != 'Y'
    AND h_prompt != 'N'
  DO
    h_prompt = PROMPT 'CAUTION: ' + :h_message
             + SQUEEZE(VARCHAR(:h_fullname)) +'.' +X'0D'
      	     + '         Do you want to continue? [Y/N]'
    WITH STYLE = POPUP;
    h_prompt = UPPER(h_prompt);
  ENDWHILE;
  
  IF h_prompt != 'Y'
  THEN
    RESUME FIELD tf;
  ENDIF;  

ENDIF;

msa_date = 'now'; /* Needed to sync */

/*--------------------------------------------------------------------------
     Moves application to proddev.
---------------------------------------------------------------------------*/
/*...........................................................................
     Creates application directory on proddevdb
..........................................................................*/

  MESSAGE 'creating new application folder...';

  h_command = '$SCRIPTS/create_app_dir.script '
            + :g_application + ' proddev valiant';
  h_return = CALLPROC callsys_cp(:h_command);

IF h_return != 0
THEN
  MESSAGE 'ERROR: Failed to create application folder on proddevdb. '
        + 'Error code ' +VARCHAR(:h_return) +'. Unable to continue.'
  WITH STYLE = POPUP;
  RETURN;
ENDIF;


/*...........................................................................
     Copying application out.
...........................................................................*/

MESSAGE 'Copying application out..';

h_command = 'cd ' + :h_dir 
          + '; copyapp out '
          + '-d/admin/scratch/prodcom_copy_area ' 
          + '-tcopyapp_' + :g_application 
          + ' produserdb ' + :g_application 
          + ' > ' + :h_dir + 'copyapp/' 
          + :h_output1 ;

  h_return = CALLPROC callsys_cp(:h_command);

IF h_return != 0
THEN
  MESSAGE 'ERROR: Failed to process copyapp out. Error code '
        + VARCHAR(:h_return) +'.' +X'0D'
        + 'Command was: ' +VARCHAR(:h_command)
  WITH STYLE = POPUP;
  EXIT;
ENDIF;

/*...........................................................................
     Copying application in.
...........................................................................*/

MESSAGE 'Copying application in..';

h_command = 'cd ' + :h_copy_dir 
          + ' ; copyapp in'
      /*  + ' -c '  */       
          + ' -d/admin/scratch/prodcom_copy_area'
          + ' -r' 
          + ' -s' +:h_copy_source + :g_application    
          + ' proddevdb' 
          + ' copyapp_' +:g_application 
          + ' > ' + :h_copy_dir + 'copyapp/' + :h_output2 
          + ' 2>&1';

  h_return = CALLPROC callsys_cp(:h_command);

IF h_return != 0
THEN
  MESSAGE 'ERROR: Failed to process copyapp in. Error code '
        + VARCHAR(:h_return) +'.' +X'0D'
        + 'Command was: ' +VARCHAR(:h_command)
  WITH STYLE = POPUP;
  EXIT;
ENDIF;

/*------------------------------------------------------------------
     Insert into pvc_copy_log_apps
-------------------------------------------------------------------*/

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_allowed   = 3;

WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
DO

  h_retries = :h_retries + 1;

  INSERT INTO pvc_copy_log_apps
  VALUES    ( :g_application,
              :g_option,
              :msa_date,
              :g_who,
              :g_user_id,
              :h_version,
              :h_point); 

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return <> 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return > 1
THEN
  MESSAGE 'ERROR: Failed to insert into pvc_copy_log_apps. Error code '
        + VARCHAR(:h_return) +'. Please construct row manually.'
  WITH STYLE = POPUP;
  EXIT;
ENDIF;


/*------------------------------------------------------------------
     Update application status.
-------------------------------------------------------------------*/

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_allowed   = 3;

WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
DO

  h_retries = :h_retries + 1;

  UPDATE pvc_application_status
  SET    status  = 'D',
         who     = :g_who,
         date    = :msa_date
  WHERE  application = :g_application;

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return <> 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return > 1
THEN
  MESSAGE 'ERROR: Failed to update pvc_application_status. Error code '
        + VARCHAR(:h_return) +'.'
  WITH STYLE = POPUP;
  EXIT;
ENDIF;

IF h_return = 1 /* No previous status */
THEN
 INSERT INTO pvc_application_status
 VALUES    ( :g_application,
             :h_version,
             :h_point,
             'D',
             :g_who,
             :msa_date );  
ENDIF;

RETURN;

END

/*=======================================================================
   FRSKEY6: (F12) Back - Returns to the main menu.                    
======================================================================*/

'Back', KEY FRSKEY12 = 
BEGIN
  RETURN;
END

/****************************************************************************/
/*********************** LOCAL PROCEDURES ***********************************/
/****************************************************************************/

/*===========================================================================
	      Local procedure for error checking within retry loop.
============================================================================*/

PROCEDURE lp_full_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE h_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

h_return = CALLPROC check_inq_ing ( h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = :h_retries,
                                    h_retries_allowed = :h_retries_allowed,
                                    h_frpr_name       = 'control_2_fr');
RETURN :h_return;

END

/*===========================================================================
	      Local procedure for basic error checking.
============================================================================*/

PROCEDURE lp_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE h_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

h_return = CALLPROC check_inq_ing ( h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = 1,
                                    h_retries_allowed = 1,
                                    h_frpr_name       = 'control_2_fr');
RETURN :h_return;

END

/*===========================================================================
	      Local procedure for dropping a table if it exists.
============================================================================*/

PROCEDURE lp_drop_table(p_table_name = CHAR(24) NOT NULL) = 

  DECLARE h_return = INTEGER4 NOT NULL WITH DEFAULT,
          lp_table  = CHAR(20) NOT NULL

BEGIN

  SELECT table_name as lp_table 
    FROM iitables
   WHERE table_name = :p_table_name
     AND table_owner = :g_user_id;

  h_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF h_return = 0
  THEN
    RETURN 0;
  ENDIF;

  IF h_return > 1 
  THEN
    MESSAGE 'SYSTEM ERROR: Failed whilst selecting ' 
          +  VARCHAR(:p_table_name) + ' from iitables prior to droping, '
          + 'with error code ' + VARCHAR(:h_return) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9;
  ENDIF;

  MODIFY :p_table_name to TRUNCATED;

  DROP TABLE :p_table_name;

  h_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF h_return != 0 
  THEN 
    MESSAGE 'SYSTEM ERROR: Unable to drop ' + VARCHAR(:p_table_name) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9; 
  ENDIF;

  RETURN 0;

END


/*===========================================================================
	      Local procedure for populating the table field.   
============================================================================*/

PROCEDURE lp_pop_table() = 

  DECLARE h_return = INTEGER4 NOT NULL WITH DEFAULT

BEGIN

h_return = CALLPROC lp_drop_table (p_table_name = 'tt_control2');
IF h_return != 0 THEN RETURN 9; ENDIF;

MESSAGE '                   Collecting data, please wait...';

CREATE TABLE tt_control2 AS
SELECT 'U' AS status,
       object_name AS application,
       1 AS version, 
       0 AS point, 
       'zzz' AS who,
       'someone                                 ' AS fullname 
FROM   ii_objects
WHERE  object_class = 2001; 

h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

IF h_return != 0 
THEN
  MESSAGE 'SYSTEM ERROR: Failed to create tt_control2. Error code '
	+ VARCHAR(:h_return) +'.' +X'0D'
	WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

UPDATE tt_control2 a
  FROM pvc_application_status b
   SET status = b.status,
       version = b.version,
       point   = b.point,
       who     = b.who
 WHERE a.application = b.application;

h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

IF h_return > 1
THEN
  MESSAGE 'ERROR: Failed to update tt_control2 with application info.'+X'0D'
	+ '       Error code ' +VARCHAR(:h_return) +'.' 
	   WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

UPDATE tt_control2 a
  FROM pvc_developers b
   SET fullname = SQUEEZE(b.first_name) + ' ' +SQUEEZE(b.second_name)
 WHERE a.who = b.initials;

h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

IF h_return > 1
THEN
  MESSAGE 'ERROR: Failed to update tt_control2 with developer info.'+X'0D'
	+ '       Error code ' +VARCHAR(:h_return) +'.' 
	   WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

INITTABLE tf READ;

tf = SELECT status,
	    application, 
            version, 
            point, 
            who,
            fullname 
       FROM tt_control2
   ORDER BY application;

h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

IF h_return != 0
THEN
  MESSAGE 'SYSTEM ERROR: Failed to initiate table field. Error code '
	+ VARCHAR(:h_return) +'.' +X'0D'
	WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

REDISPLAY;

/*----------------------------------------------------------------
        Colours rows:
        Development, Locked = Red
        Working, Test       = Yellow
        Live =              = Green
        Unknown/Unversioned = White. 
-----------------------------------------------------------------*/

   UNLOADTABLE tf
   BEGIN

     IF (tf.status = 'D' OR tf.status = 'H') 
     THEN
       SET_FORMS ROW '' tf (COLOUR(status) = 4);
       SET_FORMS ROW '' tf (COLOUR(application) = 4);
       SET_FORMS ROW '' tf (COLOUR(version) = 4);
       SET_FORMS ROW '' tf (COLOUR(point) = 4);
       SET_FORMS ROW '' tf (COLOUR(who) = 4);

     ELSEIF (tf.status = 'W' OR tf.status = 'T') 
     THEN
       SET_FORMS ROW '' tf (COLOUR(status) = 7);
       SET_FORMS ROW '' tf (COLOUR(application) = 7);
       SET_FORMS ROW '' tf (COLOUR(version) = 7);
       SET_FORMS ROW '' tf (COLOUR(point) = 7);
       SET_FORMS ROW '' tf (COLOUR(who) = 7);

     ELSEIF tf.status = 'L' 
     THEN
       SET_FORMS ROW '' tf (COLOUR(status) = 2);
       SET_FORMS ROW '' tf (COLOUR(application) = 2);
       SET_FORMS ROW '' tf (COLOUR(version) = 2);
       SET_FORMS ROW '' tf (COLOUR(point) = 2);
       SET_FORMS ROW '' tf (COLOUR(who) = 2);

     ELSE
       SET_FORMS ROW '' tf (COLOUR(status) = 0);
       SET_FORMS ROW '' tf (COLOUR(application) = 0);
       SET_FORMS ROW '' tf (COLOUR(version) = 0);
       SET_FORMS ROW '' tf (COLOUR(point) = 0);
       SET_FORMS ROW '' tf (COLOUR(who) = 0);
     ENDIF;
   END;

   REDISPLAY;

END

