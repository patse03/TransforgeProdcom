/*****************************************************************************
  DESCRIPTION: Process to populate pvc_copy_tables_list with all tables
               on VULCAN PRODLIVEDB with no exceptions.

               Obviously, this will overwrite 'system' tables such as 
               password etc and so should be used with caution. It is 
               primarily intended to set up a full simulation of the
               live dataset for new, full UAT environment.

  CREATED: Dom Ford - April 2012

  CHANGES: May 2012 - DF - Added header info now program functional.

*****************************************************************************/

PROCEDURE control_6d_fp () =

DECLARE h_retries_allowed = INTEGER1 NOT NULL,
        h_retries         = INTEGER1 NOT NULL,
        h_retry_or_not    = CHAR(5) NOT NULL,
        h_return          = INTEGER1 NOT NULL,
        h_exit            = CHAR(1) NOT NULL,
        h_prompt          = CHAR(1) NOT NULL,
        h_who             = CHAR(3) NOT NULL,
        h_fullname        = VARCHAR(40) NOT NULL,
        h_dummy           = INTEGER4 NOT NULL,
        h_frpr_name       = VARCHAR(24) NOT NULL,
        h_message         = VARCHAR(70) NOT NULL,
        h_table           = VARCHAR(36) NOT NULL,

        lp_drop_table           = PROCEDURE RETURNING INTEGER,
        lp_error_check          = PROCEDURE RETURNING INTEGER,
        lp_full_error_check     = PROCEDURE RETURNING INTEGER
{

h_frpr_name = 'control_6d_fr';

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_allowed   = 3;

IF g_option = 5
THEN
  h_table = 'pvc_copy_table_list';
ELSE
  h_table = 'pvc_delete_table_list';
ENDIF;

MODIFY :h_table to TRUNCATED; commit;

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_allowed   = 3;

WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
DO

  h_retries = :h_retries + 1;

  INSERT INTO :h_table 
            ( tablename )
  SELECT tablename
  FROM   pvc_export_tablenames;

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return <> 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return != 0
THEN
  MESSAGE 'ERROR: Failed to insert into copy_tables_list. Error code '
        + VARCHAR(:h_return) +'.'
  WITH STYLE = POPUP;
  EXIT;
ENDIF;

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_allowed   = 3;

WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
DO

  h_retries = :h_retries + 1;

  MODIFY :h_table to BTREE ON tablename; commit;

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return <> 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return != 0
THEN
  MESSAGE 'ERROR: Failed to modify ' +:h_table +' to btree. Error code '
        + VARCHAR(:h_return) +'.'
  WITH STYLE = POPUP;
  EXIT;
ENDIF;

RETURN 0;

}

/****************************************************************************/
/*********************** LOCAL PROCEDURES ***********************************/
/****************************************************************************/

/*===========================================================================
	      Local procedure for error checking within retry loop.
============================================================================*/

PROCEDURE lp_full_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE h_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

h_return = CALLPROC check_inq_ing ( h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = :h_retries,
                                    h_retries_allowed = :h_retries_allowed,
                                    h_frpr_name       = 'control_6d_fp');
RETURN :h_return;

END

/*===========================================================================
	      Local procedure for basic error checking.
============================================================================*/

PROCEDURE lp_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE h_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

h_return = CALLPROC check_inq_ing ( h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = 1,
                                    h_retries_allowed = 1,
                                    h_frpr_name       = 'control_6d_fp');
RETURN :h_return;

END

/*===========================================================================
	      Local procedure for dropping a table if it exists.
============================================================================*/

PROCEDURE lp_drop_table(p_table_name = CHAR(24) NOT NULL) = 

  DECLARE h_return = INTEGER4 NOT NULL WITH DEFAULT,
          lp_table  = CHAR(20) NOT NULL

BEGIN

  SELECT table_name as lp_table 
    FROM iitables
   WHERE table_name = :p_table_name
     AND table_owner = :g_user_id;

  h_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF h_return = 0
  THEN
    RETURN 0;
  ENDIF;

  IF h_return > 1 
  THEN
    MESSAGE 'SYSTEM ERROR: Failed whilst selecting ' 
          +  VARCHAR(:p_table_name) + ' from iitables prior to droping, '
          + 'with error code ' + VARCHAR(:h_return) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9;
  ENDIF;

  MODIFY :p_table_name to TRUNCATED;

  DROP TABLE :p_table_name;

  h_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF h_return != 0 
  THEN 
    MESSAGE 'SYSTEM ERROR: Unable to drop ' + VARCHAR(:p_table_name) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9; 
  ENDIF;

  RETURN 0;

END
