/*****************************************************************************
  DESCRIPTION: Frame to create a new table group, prior to it being defined.

               Not selecting any tables for a table group means it will not
               be created after all.

  CREATED: Dom Ford - April 2012

  CHANGES: May 2012 - DF - Added header info now program functional.

*****************************************************************************/

INITIALIZE ()=

DECLARE h_retries_max  = INTEGER1 NOT NULL,
        h_retries      = INTEGER1 NOT NULL,
        h_retry_or_not = CHAR(5) NOT NULL,
        h_return       = INTEGER1 NOT NULL,
        h_frpr_name    = VARCHAR(24) NOT NULL,
        h_groupname    = VARCHAR(24) NOT NULL,

        lp_error_check          = PROCEDURE RETURNING INTEGER,
        lp_full_error_check     = PROCEDURE RETURNING INTEGER

BEGIN

SET_FORMS FRS (MAPFILE='/home/prodcom/admin/prodcom.map');

h_frpr_name = 'control_6z_fr';

END

/*---------------------------------------------------------------------
   Collects new group name
----------------------------------------------------------------------*/

FIELD s_groupname =
BEGIN

  h_groupname = SQUEEZE(:s_groupname);

  h_return = CALLFRAME control_6y_fr(p_groupname = :h_groupname);

  RETURN; 
 
END

/*=======================================================================
   FRSKEY4: Back.
======================================================================*/

'ABORT', KEY FRSKEY4 = 
BEGIN

RETURN;

END


/****************************************************************************/
/*********************** LOCAL PROCEDURES ***********************************/
/****************************************************************************/

/*===========================================================================
	      Local procedure for error checking within retry loop.
============================================================================*/

PROCEDURE lp_full_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

lp_return = CALLPROC check_inq_ing (h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = :h_retries,
                                    h_retries_allowed = :h_retries_max,
                                    h_frpr_name       = 'val_gates_1.fr');
RETURN :lp_return;

END

/*===========================================================================
	      Local procedure for basic error checking.
============================================================================*/

PROCEDURE lp_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

lp_return = CALLPROC check_inq_ing (h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = 1,
                                    h_retries_allowed = 1,
                                    h_frpr_name       = 'val_gates_1.fr');
RETURN :lp_return;

END



