/*****************************************************************************
  DESCRIPTION: Frame to select tables to define the contents of a table group.

               Removing all tables from a table group means it will cease 
               to exist, no need for seperate deletion as its all dynamic.

  CREATED: Dom Ford - April 2012

  CHANGES: May 2012 - DF - Added header info now program functional.

*****************************************************************************/

INITIALIZE (p_groupname = VARCHAR(24) NOT NULL WITH DEFAULT) =

DECLARE h_retries_allowed = INTEGER1 NOT NULL,
        h_retries         = INTEGER1 NOT NULL,
        h_retry_or_not    = CHAR(5) NOT NULL,
        h_return          = INTEGER1 NOT NULL,
        h_exit            = CHAR(1) NOT NULL,
        h_prompt          = CHAR(1) NOT NULL,
        h_who             = CHAR(3) NOT NULL,
        h_fullname        = VARCHAR(40) NOT NULL,
        h_dummy           = INTEGER4 NOT NULL,
        h_frpr_name       = VARCHAR(24) NOT NULL,
        h_message         = VARCHAR(70) NOT NULL,
        h_table           = VARCHAR(36) NOT NULL,

        lp_drop_table           = PROCEDURE RETURNING INTEGER,
        lp_pop_table            = PROCEDURE RETURNING INTEGER,
        lp_error_check          = PROCEDURE RETURNING INTEGER,
        lp_full_error_check     = PROCEDURE RETURNING INTEGER
{

SET_FORMS FRS (MAPFILE='/home/prodcom/admin/prodcom.map');

h_frpr_name = 'control_6y_fr';
msa_date = 'now';

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_allowed   = 3;

s_groupname = SHIFT(:p_groupname, (((36-LENGTH(p_groupname))/2)*1));

h_return = CALLPROC lp_pop_table;

IF h_return = 1 THEN RETURN 1; ENDIF;
IF h_return > 1 THEN EXIT; ENDIF;

RESUME FIELD tf;

}

/*=======================================================================
   FRSKEY4: Go 
======================================================================*/

'Go', KEY FRSKEY4 =
{
  h_retry_or_not      = 'RETRY';
  h_retries           = 0;
  h_retries_allowed   = 3;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    DELETE 
    FROM   pvc_table_groups
    WHERE  groupname = :p_groupname;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return <> 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to delete group ' +:p_groupname 
          + ' from pvc_table_groups. Error code ' + VARCHAR(:h_return) +'.'
    WITH STYLE = POPUP;
    EXIT;
  ENDIF;

  UNLOADTABLE tf
  BEGIN
    IF tf.included = 'Y'
    THEN

      MESSAGE 'Including ' + :tf.tablename +'. . .';

      INSERT INTO pvc_table_groups
      VALUES    ( :p_groupname,
                  tf.tablename); 

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 0
      THEN 
        MESSAGE 'ERROR: Failed to insert table ' +:tf.tablename 
              + 'into pvc_table_groups. Error code ' + VARCHAR(:h_return) +'.'
        WITH STYLE = POPUP;
        RETURN 9;
      ENDIF;

    ENDIF;

  END;

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN 
    MESSAGE 'ERROR: Failed to insert group ' +:p_groupname 
          + 'into pvc_table_groups. Error code ' + VARCHAR(:h_return) +'.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  RETURN 0;

}

/*=======================================================================
   FRSKEY8: (F8) Back 
======================================================================*/

'New Group', KEY FRSKEY8 = 
BEGIN
  CALLFRAME control_6z_fr;
END

/*=======================================================================
   FRSKEY12: (F12) Back 
======================================================================*/

'Back', KEY FRSKEY12 = 
BEGIN
  RETURN 1;
END


/****************************************************************************/
/*********************** LOCAL PROCEDURES ***********************************/
/****************************************************************************/

/*===========================================================================
	      Local procedure for error checking within retry loop.
============================================================================*/

PROCEDURE lp_full_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE h_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

h_return = CALLPROC check_inq_ing ( h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = :h_retries,
                                    h_retries_allowed = :h_retries_allowed,
                                    h_frpr_name       = 'control_6c_fr');
RETURN :h_return;

END

/*===========================================================================
	      Local procedure for basic error checking.
============================================================================*/

PROCEDURE lp_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE h_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

h_return = CALLPROC check_inq_ing ( h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = 1,
                                    h_retries_allowed = 1,
                                    h_frpr_name       = 'control_6c_fr');
RETURN :h_return;

END

/*===========================================================================
	      Local procedure for dropping a table if it exists.
============================================================================*/

PROCEDURE lp_drop_table(p_table_name = CHAR(24) NOT NULL) = 

  DECLARE h_return = INTEGER4 NOT NULL WITH DEFAULT,
          lp_table  = CHAR(20) NOT NULL

BEGIN

  SELECT table_name as lp_table 
    FROM iitables
   WHERE table_name = :p_table_name
     AND table_owner = :g_user_id;

  h_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF h_return = 0
  THEN
    RETURN 0;
  ENDIF;

  IF h_return > 1 
  THEN
    MESSAGE 'SYSTEM ERROR: Failed whilst selecting ' 
          +  VARCHAR(:p_table_name) + ' from iitables prior to droping, '
          + 'with error code ' + VARCHAR(:h_return) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9;
  ENDIF;

  MODIFY :p_table_name to TRUNCATED;

  DROP TABLE :p_table_name;

  h_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF h_return != 0 
  THEN 
    MESSAGE 'SYSTEM ERROR: Unable to drop ' + VARCHAR(:p_table_name) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9; 
  ENDIF;

  RETURN 0;

END


/*===========================================================================
	      Local procedure for populating the table field.   
============================================================================*/

PROCEDURE lp_pop_table() = 

  DECLARE h_return = INTEGER4 NOT NULL WITH DEFAULT

BEGIN

  h_return = CALLPROC lp_drop_table (p_table_name = 'tt_control6y');
  IF h_return != 0 THEN RETURN 9; ENDIF;

  MESSAGE '                   Collecting data, please wait...';
  
  CREATE TABLE tt_control6y 
  AS
  SELECT 'N'            AS included, 
         tablename      AS tablename
  FROM   pvc_export_tablenames;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0 
  THEN
    MESSAGE 'SYSTEM ERROR: Failed to create tt_control6y. Error code '
	  + VARCHAR(:h_return) +'.' +X'0D' 
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  UPDATE tt_control6y a
  FROM   pvc_table_groups b
  SET    included = 'Y'
  WHERE  a.tablename = b.tablename
    AND  b.groupname = :p_groupname; 

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to update tt_control6y with application info.'+X'0D'
	  + '       Error code ' +VARCHAR(:h_return) +'.' 
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  INITTABLE tf FILL;

  tf = SELECT included, 
              tablename
         FROM tt_control6y
     ORDER BY tablename;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    MESSAGE 'SYSTEM ERROR: Failed to initiate table field. Error code '
          + VARCHAR(:h_return) +'.' +X'0D'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  REDISPLAY;

END

