/*****************************************************************************
  DESCRIPTION: Displays current table statuses and provides access
               to a specific tables history of actions.

  CREATED: Dom Ford - April 2012

  CHANGES: May 2012 - DF - Added header info now program functional.

*****************************************************************************/

INITIALIZE (p_target = VARCHAR(10) NOT NULL WITH DEFAULT) =

DECLARE h_retries_allowed = INTEGER1 NOT NULL,
        h_retries         = INTEGER1 NOT NULL,
        h_retry_or_not    = CHAR(5) NOT NULL,
        h_return          = INTEGER1 NOT NULL,
        h_exit            = CHAR(1) NOT NULL,
        h_prompt          = CHAR(1) NOT NULL,
        h_who             = CHAR(3) NOT NULL,
        h_fullname        = VARCHAR(40) NOT NULL,
        h_dummy           = INTEGER4 NOT NULL,
        h_frpr_name       = VARCHAR(24) NOT NULL,
        h_message         = VARCHAR(70) NOT NULL,

        lp_drop_table           = PROCEDURE RETURNING INTEGER,
        lp_pop_table            = PROCEDURE RETURNING INTEGER,
        lp_error_check          = PROCEDURE RETURNING INTEGER,
        lp_full_error_check     = PROCEDURE RETURNING INTEGER
{


h_frpr_name = 'control_0b_fr';
msa_date = 'now';

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_allowed   = 3;

h_return = CALLPROC lp_pop_table;

IF h_return = 1 THEN RETURN; ENDIF;
IF h_return > 1 THEN EXIT; ENDIF;

RESUME FIELD tf;

}

/*=======================================================================
   FRSKEY4: Go 
======================================================================*/

'View Table History', KEY FRSKEY4 =
BEGIN

IF tf.who = ''
THEN
  MESSAGE 'There is no history available for this table.' WITH STYLE = POPUP;
  RESUME;
ENDIF;

h_return = CALLFRAME control_0b_history_fr(p_tablename = :tf.tablename);

IF h_return = 1 THEN RETURN; ENDIF;
IF h_return > 1 THEN EXIT; ENDIF;

RESUME FIELD tf;


RESUME;

END

/*=======================================================================
   FRSKEY6: (F12) Back 
======================================================================*/

'Back', KEY FRSKEY12 = 
BEGIN
  RETURN;
END


/****************************************************************************/
/*********************** LOCAL PROCEDURES ***********************************/
/****************************************************************************/

/*===========================================================================
	      Local procedure for error checking within retry loop.
============================================================================*/

PROCEDURE lp_full_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE h_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

h_return = CALLPROC check_inq_ing ( h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = :h_retries,
                                    h_retries_allowed = :h_retries_allowed,
                                    h_frpr_name       = 'val_gates_1.fr');
RETURN :h_return;

END

/*===========================================================================
	      Local procedure for basic error checking.
============================================================================*/

PROCEDURE lp_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE h_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

h_return = CALLPROC check_inq_ing ( h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = 1,
                                    h_retries_allowed = 1,
                                    h_frpr_name       = 'val_gates_1.fr');
RETURN :h_return;

END

/*===========================================================================
	      Local procedure for dropping a table if it exists.
============================================================================*/

PROCEDURE lp_drop_table(p_table_name = CHAR(24) NOT NULL) = 

  DECLARE h_return = INTEGER4 NOT NULL WITH DEFAULT,
          lp_table  = CHAR(20) NOT NULL

BEGIN

  SELECT table_name as lp_table 
    FROM iitables
   WHERE table_name = :p_table_name
     AND table_owner = :g_user_id;

  h_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF h_return = 0
  THEN
    RETURN 0;
  ENDIF;

  IF h_return > 1 
  THEN
    MESSAGE 'SYSTEM ERROR: Failed whilst selecting ' 
          +  VARCHAR(:p_table_name) + ' from iitables prior to droping, '
          + 'with error code ' + VARCHAR(:h_return) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9;
  ENDIF;

  MODIFY :p_table_name to TRUNCATED;

  DROP TABLE :p_table_name;

  h_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF h_return != 0 
  THEN 
    MESSAGE 'SYSTEM ERROR: Unable to drop ' + VARCHAR(:p_table_name) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9; 
  ENDIF;

  RETURN 0;

END


/*===========================================================================
	      Local procedure for populating the table field.   
============================================================================*/

PROCEDURE lp_pop_table() = 

  DECLARE h_return = INTEGER4 NOT NULL WITH DEFAULT

BEGIN

  h_return = CALLPROC lp_drop_table (p_table_name = 'tt_control0b');
  IF h_return != 0 THEN RETURN 9; ENDIF;

  MESSAGE '                   Collecting data, please wait...';

  CREATE TABLE tt_control0b AS
  SELECT tablename      AS tablename,
         '       '      AS last_action,
         INGRESDATE('') AS last_time,
         '         '    AS last_target,
         '   '          AS who
  FROM   tt_export_tablenames
  WHERE tablename != 'password'
    AND tablename != 'industry_staff'
    AND tablename != 'forms_data_analysts'
    AND tablename != 'access_levels'
    AND  LEFT(tablename,2) NOT IN ('tt','df','js','iq')
    AND  LEFT(tablename,3) NOT IN ('sim')
    AND  LEFT(tablename,4) NOT IN ('temp','form')
    AND  LEFT(tablename,5) NOT IN ('first');

h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

IF h_return != 0 
THEN
  MESSAGE 'SYSTEM ERROR: Failed to create tt_control0b. Error code '
	+ VARCHAR(:h_return) +'.' +X'0D'
	WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

UPDATE tt_control0b a
  FROM pvc_copy_log_tabs b
   SET last_action = b.action,
       last_time = b.date,
       last_target = b.target,
       who         = b.who
 WHERE a.tablename = b.tablename
   AND b.date = (SELECT MAX(c.date) 
                 FROM   pvc_copy_log_tabs c
                 WHERE  b.tablename = c.tablename);

h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

IF h_return > 1
THEN
  MESSAGE 'ERROR: Failed to update tt_control0b with table info.'+X'0D'
	+ '       Error code ' +VARCHAR(:h_return) +'.' 
	   WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

INITTABLE tf READ;

tf = SELECT tablename,
	    last_action, 
	    last_time, 
            last_target, 
            who
       FROM tt_control0b
   ORDER BY tablename;

h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

IF h_return != 0
THEN
  MESSAGE 'SYSTEM ERROR: Failed to initiate table field. Error code '
	+ VARCHAR(:h_return) +'.' +X'0D'
	WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

REDISPLAY;

END

