/*-s--------------------------------------------------------------------
Creates new periods on standard tables:

 industry_period
 question_period
 question_sph_gross
 inquiry_period
 euro_exchange_rate

--------------------------------------------------------------------e-*/

PROCEDURE msah_fp_create () =

DECLARE h_frpr_name       = VARCHAR(24) NOT NULL,
        h_rows            = INTEGER4 NOT NULL,
        h_annual_period   = INTEGER4 NOT NULL,
        h_prev_period     = INTEGER4 NOT NULL,
        h_span            = INTEGER4 NOT NULL,
        ret_val           = INTEGER1 NOT NULL
{
    h_frpr_name = 'msah_fp_create';

    h_annual_period = :g_period / 100 * 100;

    ret_val = CALLPROC msa_fp_prev_periods (
              inquiry      = :g_inquiry,
              period       = :g_period,
              prev_period1 = BYREF(:h_prev_period));

    /*------------------------------------------------------------------
    industry_period
    ------------------------------------------------------------------*/

    MESSAGE 'Deleting from industry_period . . .';

    DELETE FROM industry_period
    WHERE       period = :g_period;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error deleting from industry_period',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;

    MESSAGE 'Inserting into industry_period . . .';

    INSERT INTO industry_period (
                industry,
                period,
                inquiry,
                results_status,
                results_substatus,
                results_substatus_check,
                sales_per_head,
                target_employment,
                actual_employment,
                target_contrib,
                actual_contrib,
                grossing_factor,
                number_of_unders,
                unders_employment,
                results_date,
                emp_cutoff,
                questions_selected,
                prev_pub_sph,
                prev_pub_grossing_factor,
                carryin,
                carryin_ent_count,
                carryin_contrib_count,
                carryout,
                carryout_ent_count,
                carryout_contrib_count,
                prinprod,
                prinprod_ent_count,
                prinprod_contrib_count,
                grossed_rollup_value,
                grossed_roll_ent_count,
                prev_pub_grossed_rollup,
                prev_gross_roll_ent_ct)
    SELECT      industry,
                :g_period,
                :g_inquiry,
                0,
                0,
                '',
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0,
                '',
                present_emp_cutoff,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
    FROM        industry
    WHERE       inquiry_industry_status = 'L'
    AND         inquiry = :g_inquiry;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row    = BYREF(:h_rows),
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error inserting into industry_period',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;

    INSERT INTO error_log
    VALUES(     'now',
                'Creation: industry_period ' + VARCHAR(:h_rows) +
                ' rows inserted',
                :h_frpr_name,
                :ret_val,
                :g_user_id);
    COMMIT;

    /*------------------------------------------------------------------
    question_period
    ------------------------------------------------------------------*/

    MESSAGE 'Deleting from question_period . . .';

    DELETE FROM question_period
    WHERE       period = :g_period;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error deleting from question_period',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;

    MESSAGE 'Inserting into question_period . . .';

    INSERT INTO question_period (
                question,
                period,
                inquiry,
                question_industry,
                total_value,
                imp_total_value,
                con_total_value,
                prinprod,
                imp_prinprod,
                con_prinprod,
                carryin_qsi,
                imp_carryin_qsi,
                con_carryin_qsi,
                carryin_asi,
                imp_carryin_asi,
                con_carryin_asi,
                disclosure_indicator,
                enterprise_count,
                contributor_count,
                prev_pub_ent_count,
                prin_prod_indicator,
                grossed_value,
                grossed_disc_indicator,
                imputation_ratio,
                rollup,
                manual_ratio,
                permission_to_publish,
                pub_indicator,
                prev_pub_total,
                prev_pub_discind,
                prev_pub_grossed_value,
                prev_pub_grossed_dis_ind,
                prev_pub_indicator,
                prev_pub_rollup,
                qu_flag,
                est_flag,
                rev_flag,
                disc_flag,
                round_flag)
    SELECT      question,
                :g_period,
                :g_inquiry,
                question_industry,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                '',
                0,
                0,
                0,
                '',
                0,
                '',
                1,
                '',
                '',
                '',
                '',
                0,
                '',
                0,
                '',
                '',
                '',
                '',
                '',
                '',
                '',
                ''
    FROM        question_library
    WHERE       inquiry = :g_inquiry
    AND         period = :h_annual_period
    AND         lag NOT IN (1,3,9);

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row    = BYREF(:h_rows),
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error inserting into question_period',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;

    INSERT INTO error_log
    VALUES(     'now',
                'Creation: question_period ' + VARCHAR(:h_rows) +
                ' rows inserted',
                :h_frpr_name,
                :ret_val,
                :g_user_id);
    COMMIT;

    /*-s----------------------------------------------------------------
    question_sph_gross
    ----------------------------------------------------------------e-*/

    MESSAGE 'Deleting from question_sph_gross . . .';

    DELETE FROM question_sph_gross
    WHERE       period = :g_period;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error deleting from question_sph_gross',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;

    MESSAGE 'Inserting into question_sph_gross . . .';

    INSERT INTO question_sph_gross (
                question,
                industry,
                period,
                one_sales_per_head,
                pps_sales_per_head,
                und_sales_per_head,
                com_sales_per_head,
                one_gross,
                two_gross,
                gr_meth1_val,
                gr_meth2_val,
                gr_meth1_vol,
                gr_meth2_vol)
    SELECT      question,
                question_industry,
                :g_period,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
    FROM        question_library
    WHERE       inquiry = :g_inquiry
    AND         period = :h_annual_period
    AND         lag NOT IN (1,3,9);

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row    = BYREF(:h_rows),
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error inserting into question_sph_gross',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;

    INSERT INTO error_log
    VALUES(     'now',
                'Creation: question_sph_gross ' + VARCHAR(:h_rows) +
                ' rows inserted',
                :h_frpr_name,
                :ret_val,
                :g_user_id);
    COMMIT;

    /*------------------------------------------------------------------
     inquiry_period
    ------------------------------------------------------------------*/

    MESSAGE 'Deleting from inquiry_period . . .';

    DELETE FROM inquiry_period
    WHERE       period = :g_period;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error deleting from inquiry_period',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;

    SELECT MAX(span_no) AS h_span
    FROM   inquiry_period
    WHERE  inquiry = :g_inquiry;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error finding max(spanno) on inquiry_period',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;

    MESSAGE 'Inserting into inquiry_period . . .';

    INSERT INTO inquiry_period (
                inquiry,
                period,
                span_no,
                week_no)
    VALUES (    :g_inquiry,
                :g_period,
                :h_span + 1,
                1);

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row    = BYREF(:h_rows),
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error inserting into inquiry_period',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;

    INSERT INTO error_log
    VALUES(     'now',
                'Creation: inquiry_period ' + VARCHAR(:h_rows) +
                ' rows inserted',
                :h_frpr_name,
                :ret_val,
                :g_user_id);
    COMMIT;

    /*------------------------------------------------------------------
     euro_exchange_rate
    ------------------------------------------------------------------*/

    MESSAGE 'Deleting from euro_exchange_rate . . .';

    DELETE FROM euro_exchange_rate
    WHERE       period = :g_period;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error deleting from euro_exchange_rate',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;

    MESSAGE 'Inserting into euro_exchange_rate . . .';

    INSERT INTO euro_exchange_rate (
                period,
                euros,
                fixed)
    VALUES (    :g_period,
                1,
                'N');

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row    = BYREF(:h_rows),
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error inserting into euro_exchange_rate',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;

    INSERT INTO error_log
    VALUES(     'now',
                'Creation: euro_exchange_rate ' + VARCHAR(:h_rows) +
                ' rows inserted',
                :h_frpr_name,
                :ret_val,
                :g_user_id);
    COMMIT;

    /*------------------------------------------------------------------
    If the previous period had an exchange rate, copy that across.
    If it didn't, don't worry about it - just use the default 1.000
    ------------------------------------------------------------------*/

    UPDATE euro_exchange_rate a
    FROM   euro_exchange_rate b
    SET    euros = b.euros
    WHERE  a.period = :g_period
    AND    b.period = :h_prev_period;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES(     'now',
                    'Error inserting into euro_exchange_rate',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;


    RETURN 0;
}
