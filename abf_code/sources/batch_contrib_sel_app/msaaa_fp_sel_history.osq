PROCEDURE msaaa_fp_sel_history () =

DECLARE 
  h_frpr_name    = VARCHAR(24) NOT NULL WITH DEFAULT,
  h_text         = VARCHAR(24) NOT NULL WITH DEFAULT,
  h_return       = INTEGER1    NOT NULL WITH DEFAULT,

  lp_error_check = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,

{
  h_frpr_name = 'msaaa_fp_sel_history';

  /*------------------------------------------------------------------
    Log start of process.
  ------------------------------------------------------------------*/

  h_text = 'NOTE: Starting process 4.';
  CALLPROC write_to_process_log
         ( p_frpr_name = :h_frpr_name,
           p_code      = 0,
           p_text      = :h_text);

  /*------------------------------------------------------------------
    Delete any pre-existing data for the period.
  ------------------------------------------------------------------*/

  DELETE FROM csl_selection_history
  WHERE       period = :g_period;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    h_text = 'ERROR: Failed to delete data from csl_selection_history.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
    Insert selection data into csl_selection_history.
  ------------------------------------------------------------------*/

  INSERT INTO csl_selection_history 
            ( contributor_reference,
              contributor_industry,
              period,
              register_emp) 
  SELECT      contributor_reference,
              contributor_industry,
              period,
              register_emp
  FROM        contributor_period
  WHERE       period = :g_period;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to insert data into csl_selection_history.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;
 
  RETURN 0;

}

/*************************** LOCAL PROCEDURES ******************************/


/*=======================================================================
    Local procedure to check sql for errors during sections of code that
    utilise personal temp tables. Committed, no rollback.
=======================================================================*/

PROCEDURE lp_error_check (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC batch_check_inq_ing 
            ( h_num_row_ck = :p_num_row_ck,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

  RETURN IFNULL(:lp_return,9);

}

