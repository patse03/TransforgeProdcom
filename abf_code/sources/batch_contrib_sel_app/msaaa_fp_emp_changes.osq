/*-S--------------------------------------------------------------------
  Procedure msaaa_fp_emp_changes
NB
If this program is resurrected then the reference to 9100 employment
question from cqpv must be amended

This frame creates a temporary table to hold the emp detail.
Contributors that have changes from the previous period to the
current period are output.
--------------------------------------------------------------------e-*/

PROCEDURE msaaa_fp_emp_changes () =

DECLARE h_frpr_name       = VARCHAR(24) NOT NULL,
        h_table           = VARCHAR(24) NOT NULL,
        report_name       = VARCHAR(24) NOT NULL,
        print_name        = VARCHAR(24) NOT NULL,
        ret_val           = INTEGER1 NOT NULL

{
    h_frpr_name = 'msaaa_fp_emp_changes';
    h_table = 'temp_emp_changes';
    report_name = 'msaaa_rw_emp_changes.rw';
    print_name = 'msaaa_rw_emp_changes.rpt';

    /*-s----------------------------------------------------------------
     Create a table of employment changes
    ----------------------------------------------------------------e-*/

    MESSAGE 'Employment Changes . . .';

    ret_val = CALLPROC batch_fp_drop_table(h_table = :h_table);
    IF ret_val <> 0
    THEN
       RETURN ret_val;
    ENDIF;

    CREATE TABLE :h_table
    AS SELECT    a.contributor_industry AS prev_sic,
                 b.contributor_industry AS curr_sic,
                 b.contributor_reference AS ref,
                 a.register_emp AS prev_emp,
                 b.register_emp AS curr_emp,
                 0 AS rtn_emp,
                 0 AS prev_cutoff,
                 0 AS curr_cutoff,
                 '                                   ' AS add_name1
    FROM         contributor_period a,
                 contributor_period b
    WHERE        a.period = :g_prev_period1
    AND          b.period = :g_period
    AND          a.contributor_reference = b.contributor_reference
    AND          ((a.register_emp > b.register_emp * 1.2
                     AND a.register_emp - b.register_emp > 20)
                   OR (b.register_emp > a.register_emp * 1.2
                       AND b.register_emp - a.register_emp > 20));
 
    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
    
    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error creating list of changes',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;
  
    /*-s----------------------------------------------------------------
     Modify
    ----------------------------------------------------------------e-*/

    MODIFY :h_table TO BTREE UNIQUE ON ref;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error modifying ' + :h_table,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;

    /*-s----------------------------------------------------------------
     Update with returned employment
    ----------------------------------------------------------------e-*/

    UPDATE :h_table a
    FROM   cqpv b
    SET    rtn_emp = b.avalue
    WHERE  a.ref = b.contributor_reference
    AND    MOD(b.question,10000) = 9100
    AND    b.period = :g_prev_period1;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error updating returned values',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;

    /*-s----------------------------------------------------------------
     Update with contributor name
    ----------------------------------------------------------------e-*/

    UPDATE :h_table a
    FROM   contributor b
    SET    add_name1 = b.add_name1
    WHERE  a.ref = b.contributor_reference;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error updating with contributor name',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;

    /*-s----------------------------------------------------------------
     Update with previous period employment cutoffs
    ----------------------------------------------------------------e-*/

    UPDATE :h_table a
    FROM   industry_period b
    SET    prev_cutoff = b.emp_cutoff
    WHERE  a.curr_sic = b.industry
    AND    b.period = :g_prev_period1;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error updating with previous period cutoffs',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;

    /*-s----------------------------------------------------------------
     Update with current period employment cutoffs
    ----------------------------------------------------------------e-*/

    UPDATE :h_table a
    FROM   industry_period b
    SET    curr_cutoff = b.emp_cutoff
    WHERE  a.curr_sic = b.industry
    AND    b.period = :g_period;

    ret_val = CALLPROC batch_check_inq_ing(
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
    
    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error updating with current period cutoffs',
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;

    /*-s----------------------------------------------------------------
     Call the report writer program and drop the temporary table
    ----------------------------------------------------------------e-*/

    ret_val = CALLPROC msa_cp_callsys(
              'report ' +
              :g_database +
              ' ''(period = ' + VARCHAR(:g_period) + 
              ',table_name = "' + :h_table + '")''' +
              ' -f$PRINTOUT/' + :print_name +
              ' -i$REPORTS/' + :report_name + '> report.output');

    IF ret_val <> 0
    THEN

        INSERT INTO error_log
        VALUES (    'now',
                    'Error calling ' + :report_name,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;

    ENDIF;

    ret_val = CALLPROC msa_cp_callsys (
              'lp -drxp -oLANZ+NPN+SIMPLEX+?DRILLING? $PRINTOUT/' + 
	      :print_name + ' >> report.output');

    IF ret_val = 9
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error printing ' + :print_name,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN 9;
    ENDIF;

    ret_val = CALLPROC batch_fp_drop_table(h_table = :h_table);

    IF ret_val <> 0
    THEN
       RETURN ret_val;
    ENDIF;

    RETURN 0;
}
