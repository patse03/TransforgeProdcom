/*----------------------------------------------------------------------
 Batch version (no popups) of dropping a table - if it exists

 Calls batch_check_inq_ing and inserts into appropriate process log.
----------------------------------------------------------------------*/

PROCEDURE batch_fp_drop_table ( h_table = VARCHAR(40) NOT NULL) =

DECLARE 
  h_check_table     = VARCHAR(40) NOT NULL,
  h_frpr_name       = VARCHAR(24) NOT NULL,
  h_user_id         = VARCHAR(24) NOT NULL,
  h_text            = VARCHAR(80) NOT NULL,
  h_return          = INTEGER1    NOT NULL,

  lp_error_check = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,

{
  h_frpr_name = 'batch_fp_drop_table';

  SELECT DBMSINFO('username') AS h_user_id;

  SELECT table_name AS h_check_table
  FROM   iitables
  WHERE  table_name = :h_table
    AND  table_owner = :h_user_id;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 0);

  IF h_return > 1
  THEN

    h_text = 'SYSTEM ERROR: Failed to access iitables.';

    INSERT INTO error_log
    VALUES (    'now',
                :h_text,
                :h_frpr_name,
                0,
                :h_user_id);
    COMMIT;

    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;

  ELSEIF h_return = 1
  THEN

    DROP :h_table;

    h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

    IF h_return = 9
    THEN
      h_text = 'ERROR: Failed to drop ' +:h_table +'.';
      CALLPROC write_to_process_log
             ( p_frpr_name = :h_frpr_name,
               p_code      = :h_return,
               p_text      = :h_text);
      RETURN 9;
    ENDIF;

  ENDIF;

  RETURN 0;
}

/*************************** LOCAL PROCEDURES **************************/


/*=======================================================================
    Local procedure to check sql for errors during sections of code that
    utilise personal temp tables. Committed, no rollback.
=======================================================================*/

PROCEDURE lp_error_check (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC batch_check_inq_ing 
            ( h_num_row_ck = :p_num_row_ck,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

  RETURN IFNULL(:lp_return,9);

}

