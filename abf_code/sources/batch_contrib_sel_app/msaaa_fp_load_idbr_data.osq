/*----------------------------------------------------------------------
  Procedure msaaa_fp_load_idbr_data

  This procedure firstly blanks the current version of the Register
  Selection Table using the Modify statement. It then updates the table
  with the data supplied on conventional flat files by Registers.
----------------------------------------------------------------------*/

PROCEDURE msaaa_fp_load_idbr_data () =

DECLARE 
  h_return      = INTEGER4     NOT NULL WITH DEFAULT,
  h_table1      = VARCHAR(24)  NOT NULL WITH DEFAULT,
  h_table2      = VARCHAR(24)  NOT NULL WITH DEFAULT,
  h_table3      = VARCHAR(24)  NOT NULL WITH DEFAULT,
  h_period      = INTEGER4     NOT NULL WITH DEFAULT,
  h_idbr_file   = VARCHAR(100) NOT NULL WITH DEFAULT,
  h_command     = VARCHAR(300) NOT NULL WITH DEFAULT,
  h_text        = VARCHAR(80)  NOT NULL WITH DEFAULT,
  h_frpr_name   = VARCHAR(24)  NOT NULL WITH DEFAULT,

  lp_error_check = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,

{
  h_frpr_name = 'msaaa_fp_load_idbr_data';
  h_table1    = 'tt_welsh_contributor';
  h_table2    = 'tt_welsh_forms';
  h_table3    = 'tt_selection_osmotherly';
  h_period    = :g_period/100;

  h_idbr_file = :g_path_name1 + '/finalsel014_' +VARCHAR(:h_period) +'12';

  /*------------------------------------------------------------------
    Log start of process.
  ------------------------------------------------------------------*/

  h_text = 'NOTE: Starting process 1.';
  CALLPROC write_to_process_log
         ( p_frpr_name = :h_frpr_name,
           p_code      = 0,
           p_text      = :h_text);
  
  /*------------------------------------------------------------------
    Remove any '???' from postcodes of IDBR addresses.
  ------------------------------------------------------------------*/
    
  h_command = 'sed -e"s/???//g" ' 
            + :h_idbr_file + ' > ' 
            + :h_idbr_file + '.tmp; mv ' 
            + :h_idbr_file + '.tmp ' 
            + :h_idbr_file;

  h_return = CALLPROC msa_cp_callsys(:h_command);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to remove "???" marks from IDBR file postcodes.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN h_return;
  ENDIF;

  /*------------------------------------------------------------------
     Create the selection table and copy IDBR data into it
  ------------------------------------------------------------------*/

  h_return = CALLPROC batch_fp_drop_table (h_table = :g_reg_table);

  IF h_return != 0
  THEN
    /* Error message handled in external procedure. */
    RETURN h_return;
  ENDIF;

  CREATE TABLE :g_reg_table 
             ( ruref          CHAR (11)   NOT NULL WITH DEFAULT,
               checkletter    CHAR (1)    NOT NULL WITH DEFAULT,
               frosic2007     CHAR (5)    NOT NULL WITH DEFAULT,
               rusic2007      CHAR (5)    NOT NULL WITH DEFAULT,
               frosic92       CHAR (5)    NOT NULL WITH DEFAULT,
               rusic92        CHAR (5)    NOT NULL WITH DEFAULT,
               froempees      INTEGER4    NOT NULL WITH DEFAULT,
               employees      INTEGER4    NOT NULL WITH DEFAULT,
               froempment     INTEGER4    NOT NULL WITH DEFAULT,
               employment     INTEGER4    NOT NULL WITH DEFAULT,
               froFTEempt     FLOAT8      NOT NULL WITH DEFAULT,
               FTEempt        FLOAT8      NOT NULL WITH DEFAULT,
               frotover       INTEGER4    NOT NULL WITH DEFAULT,
               turnover       INTEGER4    NOT NULL WITH DEFAULT,
               entref         CHAR (10)   NOT NULL WITH DEFAULT,
               wowentref      CHAR (10)   NOT NULL WITH DEFAULT,
               vatref         VARCHAR(12) NOT NULL WITH DEFAULT,
               payeref        VARCHAR(13) NOT NULL WITH DEFAULT,
               crn            VARCHAR(8)  NOT NULL WITH DEFAULT,
               live_lu        INTEGER2    NOT NULL WITH DEFAULT,
               live_vat       INTEGER2    NOT NULL WITH DEFAULT,
               live_paye      INTEGER2    NOT NULL WITH DEFAULT,
               legalstatus    CHAR (1)    NOT NULL WITH DEFAULT,
               entrepmkr      CHAR (1)    NOT NULL WITH DEFAULT,
               region         CHAR (2)    NOT NULL WITH DEFAULT,
               birthdate      DATE        NOT NULL WITH DEFAULT,
               entname1       CHAR (35)   NOT NULL WITH DEFAULT,
               entname2       CHAR (35)   NOT NULL WITH DEFAULT,
               entname3       CHAR (35)   NOT NULL WITH DEFAULT,
               runame1        CHAR (35)   NOT NULL WITH DEFAULT,
               runame2        CHAR (35)   NOT NULL WITH DEFAULT,
               runame3        CHAR (35)   NOT NULL WITH DEFAULT,
               ruaddr1        CHAR (30)   NOT NULL WITH DEFAULT,
               ruaddr2        CHAR (30)   NOT NULL WITH DEFAULT,
               ruaddr3        CHAR (30)   NOT NULL WITH DEFAULT,
               ruaddr4        CHAR (30)   NOT NULL WITH DEFAULT,
               ruaddr5        CHAR (30)   NOT NULL WITH DEFAULT,
               rupostcode     VARCHAR(8)  NOT NULL WITH DEFAULT,
               tradstyle1     CHAR (35)   NOT NULL WITH DEFAULT,
               tradstyle2     CHAR (35)   NOT NULL WITH DEFAULT,
               tradstyle3     CHAR (35)   NOT NULL WITH DEFAULT,
               contact        CHAR (30)   NOT NULL WITH DEFAULT,
               telephone      CHAR (20)   NOT NULL WITH DEFAULT,
               fax            CHAR (20)   NOT NULL WITH DEFAULT,
               seltype        CHAR (1)    NOT NULL WITH DEFAULT,
               inclexcl       CHAR (1)    NOT NULL WITH DEFAULT,
               cell_no        INTEGER2    NOT NULL WITH DEFAULT,
               formtype       CHAR (4)    NOT NULL WITH DEFAULT,
               cso_tel        CHAR (7)    NOT NULL WITH DEFAULT,
               currency       CHAR (1)    NOT NULL WITH DEFAULT);

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    h_text = 'ERROR: Failed to create ' +:g_reg_table +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN h_return;
  ENDIF;

  COPY TABLE :g_reg_table 
     ( ruref           =   c0colon,
       checkletter     =   c0colon,
       frosic2007      =   c0colon,
       rusic2007       =   c0colon,
       frosic92        =   c0colon,
       rusic92         =   c0colon,
       froempees       =   c0colon,
       employees       =   c0colon,
       froempment      =   c0colon,
       employment      =   c0colon,
       froFTEempt      =   c0colon,
       FTEempt         =   c0colon,
       frotover        =   c0colon,
       turnover        =   c0colon,
       entref          =   c0colon,
       wowentref       =   c0colon,
       vatref          =   c0colon,
       payeref         =   c0colon,
       crn             =   c0colon,
       live_lu         =   c0colon,
       live_vat        =   c0colon,
       live_paye       =   c0colon,
       legalstatus     =   c0colon,
       entrepmkr       =   c0colon,
       region          =   c0colon,
       birthdate       =   c0colon,
       entname1        =   c0colon,
       entname2        =   c0colon,
       entname3        =   c0colon,
       runame1         =   c0colon,
       runame2         =   c0colon,
       runame3         =   c0colon,
       ruaddr1         =   c0colon,
       ruaddr2         =   c0colon,
       ruaddr3         =   c0colon,
       ruaddr4         =   c0colon,
       ruaddr5         =   c0colon,
       rupostcode      =   c0colon,
       tradstyle1      =   c0colon,
       tradstyle2      =   c0colon,
       tradstyle3      =   c0colon,
       contact         =   c0colon,
       telephone       =   c0colon,
       fax             =   c0colon,
       seltype         =   c0colon,
       inclexcl        =   c0colon,
       cell_no         =   c0colon,
       formtype        =   c0colon,
       cso_tel         =   c0colon,
       currency        =   c0nl)
  FROM :h_idbr_file;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to populate ' +:g_reg_table +' from IDBR file.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
     Delete existing rows if re-running a period for any reason then
     insert register selection file into finalsel_period table
  ------------------------------------------------------------------*/

  DELETE FROM finalsel_period
  WHERE       period = :g_period;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    h_text = 'ERROR: Failed to delete pre-existing data from finalsel_period.'; 
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  INSERT INTO finalsel_period 
            ( ruref,
              period,
              inquiry,
              checkletter,
              frosic92,  
              rusic92,  
              froempees,
              employees,
              froempment,
              employment,
              frotover,
              turnover,
              entref,
              wowentref,
              vatref,
              payeref,
              crn,
              live_lu,
              live_vat,
              live_paye,
              legalstatus,
              entrepmkr,
              region,
              birthdate,
              entname1,
              entname2,
              entname3,
              runame1,
              runame2,
              runame3,
              ruaddr1,
              ruaddr2,
              ruaddr3,
              ruaddr4,
              ruaddr5,
              rupostcode,
              tradstyle1,
              tradstyle2,
              tradstyle3,
              contact,
              telephone,
              fax,
              seltype,
              inclexcl,
              cell_no,
              formtype,
              cso_tel,
              currency)
  SELECT      ruref,
              :g_period,
              :g_inquiry,
              checkletter,
              frosic92,
              rusic92,
              froempees,
              employees,
              froempment,
              employment,
              frotover,
              turnover,
              entref,
              wowentref,
              vatref,
              payeref,
              crn,
              live_lu,
              live_vat,
              live_paye,
              legalstatus,
              entrepmkr,
              region,
              birthdate,
              entname1,
              entname2,
              entname3,
              runame1,
              runame2,
              runame3,
              ruaddr1,
              ruaddr2,
              ruaddr3,
              ruaddr4,
              ruaddr5,
              rupostcode,
              tradstyle1,
              tradstyle2,
              tradstyle3,
              contact,
              telephone,
              fax,
              seltype,
              inclexcl,
              cell_no,
              formtype,
              cso_tel,
              currency
  FROM        :g_reg_table;
                 
  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to insert IDBR data into finalsel_period.'; 
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
     Add new references to idbr_lookup
  ------------------------------------------------------------------*/

  INSERT INTO  idbr_lookup
  SELECT       ruref AS dummy_reference,
               ruref AS new_reference
  FROM         :g_reg_table
  WHERE        ruref NOT IN 
                   ( SELECT new_reference FROM idbr_lookup );
    
  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    h_text = 'ERROR: Failed to insert new refs into idbr_lookup table.'; 
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
    Load Welsh postcode file
  ------------------------------------------------------------------*/

  h_return = CALLPROC batch_fp_drop_table (h_table = :h_table1);

  IF h_return != 0
  THEN
    /* Error message handled in external procedure. */
    RETURN h_return;
  ENDIF;

  CREATE TABLE :h_table1 (contributor_reference CHAR(11) NOT NULL);

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    h_text = 'ERROR: Failed to create temporary welsh postcodes table.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  h_idbr_file = :g_path_name1 +'/welshpcd014_' +VARCHAR(:h_period) +'12';

  COPY TABLE :h_table1 
             ( contributor_reference = c0nl)
  FROM :h_idbr_file;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    h_text = 'ERROR: Failed to populate temporary welsh '
           + 'postcode table from file.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
     Delete existing rows if re-running a period for any reason then
     insert data into welsh contributor table.
  ------------------------------------------------------------------*/

  DELETE FROM welsh_contributor
  WHERE       period = :g_period;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    h_text = 'ERROR: Failed to delete pre-existing data '
           + 'from welsh_contributor.'; 
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  INSERT INTO welsh_contributor 
            ( contributor_reference,
              period)
  SELECT      contributor_reference,
              :g_period
  FROM        :h_table1;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    h_text = 'ERROR: Failed to insert data into welsh_contributor.'; 
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
    Tidy up temp table. 
  ------------------------------------------------------------------*/

  h_return = CALLPROC batch_fp_drop_table (h_table = :h_table1);
  
  IF h_return > 1
  THEN
    /* Error message handled in external procedure. */
    RETURN h_return;
  ENDIF;

  /*------------------------------------------------------------------
    Load Welsh forms file
  ------------------------------------------------------------------*/

  h_return = CALLPROC batch_fp_drop_table (h_table = :h_table2);

  IF h_return != 0
  THEN
    /* Error message handled in external procedure. */
    RETURN h_return;
  ENDIF;

  CREATE TABLE :h_table2 (contributor_reference CHAR(11) NOT NULL);

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    h_text = 'ERROR: Failed to create temporary welsh forms table.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  h_idbr_file = :g_path_name1 + '/welshforms014_' +VARCHAR(:h_period) +'12';

  COPY TABLE :h_table2 
           ( contributor_reference = c0nl)
  FROM :h_idbr_file;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    h_text = 'ERROR: Failed to populate temporary welsh forms table from file.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
     Delete existing rows if re-running a period for any reason then
     insert data into welsh contributor table.
  ------------------------------------------------------------------*/

  DELETE FROM welsh_forms
  WHERE       period = :g_period;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    h_text = 'ERROR: Failed to delete pre-existing data from welsh_forms.'; 
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  INSERT INTO welsh_forms 
            ( contributor_reference,
              period)
  SELECT      contributor_reference,
              :g_period
  FROM        :h_table2;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    h_text = 'ERROR: Failed to insert data into welsh_forms.'; 
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
    Tidy up temp table. 
  ------------------------------------------------------------------*/

  h_return = CALLPROC batch_fp_drop_table (h_table = :h_table2);
  
  IF h_return > 1
  THEN
    /* Error message handled in external procedure. */
    RETURN h_return;
  ENDIF;

  /*--------------------------------------------------------------------
    Drop, create, then populate Osmotherly reference table from file
  --------------------------------------------------------------------*/

  h_return = CALLPROC batch_fp_drop_table (h_table = :h_table3);

  IF h_return != 0
  THEN
    /* Error message handled in external procedure. */
    RETURN h_return;
  ENDIF;

  CREATE TABLE :h_table3 
       ( contributor_reference CHAR(11) NOT NULL);

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    h_text = 'ERROR: Failed to create temporary osmotherly table.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  h_idbr_file = :g_path_name1 + '/osmbirths014_' +VARCHAR(:h_period) +'12';

  COPY TABLE :h_table3 
           ( contributor_reference = c0nl)
  FROM :h_idbr_file;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    h_text = 'ERROR: Failed to populate temporary osmotherly table from file.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
     Delete existing rows if re-running a period for any reason then
     insert data into osmotherly births table.
  ------------------------------------------------------------------*/

  DELETE FROM csl_osm_births
  WHERE       period = :g_period;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    h_text = 'ERROR: Failed to delete pre-existing data from csl_osm_births.'; 
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  INSERT INTO csl_osm_births 
            ( contributor_reference,
              period)
  SELECT      contributor_reference,
              :g_period
  FROM        :h_table3;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    h_text = 'ERROR: Failed to insert data into csl_osm_births.'; 
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
    Tidy up temp table. 
  ------------------------------------------------------------------*/

  h_return = CALLPROC batch_fp_drop_table (h_table = :h_table3);
  
  IF h_return > 1
  THEN
    /* Error message handled in external procedure. */
    RETURN h_return;
  ENDIF;

  /*------------------------------------------------------------------
    All done, successful return noted in main program.
  ------------------------------------------------------------------*/

  RETURN 0;

}

/*************************** LOCAL PROCEDURES ********************************/


/*=======================================================================
    Local procedure to check sql for errors during sections of code that
    utilise personal temp tables. Committed, no rollback.
=======================================================================*/

PROCEDURE lp_error_check (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC batch_check_inq_ing 
            ( h_num_row_ck = :p_num_row_ck,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

  RETURN IFNULL(:lp_return,9);

}

