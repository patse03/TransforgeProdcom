/*----------------------------------------------------------------------
  Processes the CAD substitutions for teh specified industry.

  Rewritten to match completed program, which was left unfinished with
  instructions to perform the last steps manually. Also removed code
  relating to quarterly that is no longer relevant. DF 2012.

  The stopped CADS outweigh the added CADS, so the order is:

    1  Add Blanket CADS
    2  Add CADS
    3  Delete CADS
----------------------------------------------------------------------*/

PROCEDURE quest_select_02a_pr () =

DECLARE h_frpr_name     = VARCHAR(24) NOT NULL,
        h_cad_table     = VARCHAR(36) NOT NULL,
        h_ind_table     = VARCHAR(36) NOT NULL,
        h_text          = VARCHAR(70) NOT NULL,
        h_return        = INTEGER1 NOT NULL,

        lp_error_check       = PROCEDURE RETURNING INTEGER NOT NULL,
        lp_drop_table        = PROCEDURE RETURNING INTEGER NOT NULL,

{
  h_frpr_name = 'quest_select_02a_pr';
  h_cad_table = 'tt_quest_select_2a_'+VARCHAR(:g_industry);
  h_ind_table = 'tt_quest_select_2_' +VARCHAR(:g_industry);

  /*------------------------------------------------------------------
    1. Add Blanket CADS

    Create for all volumes as it's quicker matching question_library on
    question=question than it is on question/10*10+1=question
  ------------------------------------------------------------------*/

  MESSAGE '[' + VARCHAR(:g_count) +'/' + VARCHAR(:g_total) + '] '
        + 'INDUSTRY ' +VARCHAR(:g_industry) + ': '
        + 'Adding blanket CADS. . .';

  h_return = CALLPROC lp_drop_table (p_table_name = :h_cad_table);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed on first drop of working table ' 
           + :h_cad_table + '.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  CREATE TABLE :h_cad_table
  AS 
    SELECT question
    FROM   blanket_cads
    WHERE  :g_period BETWEEN start_period AND end_period
      AND  contributor_industry = :g_industry
  UNION 
    SELECT question + 1
    FROM   blanket_cads
    WHERE  :g_period BETWEEN start_period AND end_period
      AND  contributor_industry = :g_industry
  UNION 
    SELECT question + 3
    FROM   blanket_cads
    WHERE  :g_period BETWEEN start_period AND end_period
      AND   contributor_industry = :g_industry
  UNION
    SELECT question + 4
    FROM   blanket_cads
    WHERE  :g_period BETWEEN start_period AND end_period
      AND  contributor_industry = :g_industry
  UNION 
    SELECT question + 5
    FROM   blanket_cads
    WHERE  :g_period BETWEEN start_period AND end_period
      AND  contributor_industry = :g_industry
  UNION 
    SELECT question + 7
    FROM   blanket_cads
    WHERE  :g_period BETWEEN start_period AND end_period
      AND  contributor_industry = :g_industry
  UNION 
    SELECT question + 8
    FROM   blanket_cads
    WHERE  :g_period BETWEEN start_period AND end_period
      AND  contributor_industry = :g_industry;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    h_text = 'ERROR: Failed to create first instance of working table ' 
           + :h_cad_table + '.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
    Delete from :h_ind_table where contributors have already got the
    questions now being added via Blanket CADS
  ------------------------------------------------------------------*/

  DELETE FROM :h_ind_table
  WHERE  question IN (SELECT question FROM :h_cad_table);

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    h_text = 'ERROR: Failed to delete blanket CADS from ' +:h_ind_table + '.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
    Add the Blanket CADS for all contributors regardless of how many 
    questions they were originally asked
  ------------------------------------------------------------------*/

  INSERT INTO :h_ind_table 
            ( contributor_reference,
              quest_order,
              question,
              period,
              contributor_inquiry,
              contributor_industry,
              question_industry,
              acell,
              avalue,
              acell_type,
              aconstruction_type,
              evalue,
              fcell,
              fvalue,
              fcell_type,
              fconstruction_type,
              confirmation_code,
              confirmation_date,
              atypical)
  SELECT      a.contributor_reference,
              b.quest_order,
              b.question,
              :g_period,
              14,
              a.contributor_industry,
              b.question_industry,
              'N',
              0,
              '',
              0,
              0,
              'N',
              0,
              '',
              0,
              '',
              '',
              'N'
  FROM        contributor_period a,
              question_library b,
              :h_cad_table c
  WHERE       a.period = :g_period
  AND         a.contributor_industry = :g_industry
  AND         b.question = c.question
  AND         b.period = :g_period
  AND         b.lag IN (0,2,5);

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    h_text = 'ERROR: Failed to insert blanket CADS into ' +:h_ind_table + '.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
    2. Add CADS

    Create for all volumes as it's quicker matching question_library on
    question=question than it is on question/10*10+1=question

    Select CADS for contributors on :h_ind_table (use quest_order = 10
    to restrict the match to just one row).
  ------------------------------------------------------------------*/

  MESSAGE '[' + VARCHAR(:g_count) +'/' + VARCHAR(:g_total) + '] '
        + 'INDUSTRY ' +VARCHAR(:g_industry) + ': '
        + 'Adding standard CADS. . .';

  h_return = CALLPROC lp_drop_table (p_table_name = :h_cad_table);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed on second drop of working table ' 
           + :h_cad_table + '.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  CREATE TABLE :h_cad_table
  AS 
    SELECT a.question,
           a.contributor_reference
    FROM   cads a,
           :h_ind_table b
    WHERE  :g_period BETWEEN start_period AND end_period
      AND  a.contributor_reference = b.contributor_reference
      AND  b.quest_order = 10
      AND  action = 'A'
  UNION
    SELECT a.question + 1,
           a.contributor_reference
    FROM   cads a, 
           :h_ind_table b
    WHERE  :g_period BETWEEN start_period AND end_period
      AND  a.contributor_reference = b.contributor_reference
      AND  b.quest_order = 10
      AND  action = 'A'
  UNION 
    SELECT a.question + 3,
           a.contributor_reference
    FROM   cads a, 
           :h_ind_table b
    WHERE  :g_period BETWEEN start_period AND end_period
      AND  a.contributor_reference = b.contributor_reference
      AND  b.quest_order = 10
      AND  action = 'A'
  UNION 
    SELECT a.question + 4,
           a.contributor_reference
    FROM   cads a,
           :h_ind_table b
    WHERE  :g_period BETWEEN start_period AND end_period
      AND  a.contributor_reference = b.contributor_reference
      AND  b.quest_order = 10
      AND  action = 'A'
  UNION 
    SELECT a.question + 5,
           a.contributor_reference
    FROM   cads a,
           :h_ind_table b
    WHERE  :g_period BETWEEN start_period AND end_period
      AND  a.contributor_reference = b.contributor_reference
      AND  b.quest_order = 10
      AND  action = 'A'
  UNION 
    SELECT a.question + 7,
           a.contributor_reference
    FROM   cads a,
           :h_ind_table b
    WHERE  :g_period BETWEEN start_period AND end_period
      AND  a.contributor_reference = b.contributor_reference
      AND  b.quest_order = 10
      AND  action = 'A'
  UNION 
    SELECT a.question + 8,
           a.contributor_reference
    FROM   cads a, 
           :h_ind_table b
    WHERE  :g_period BETWEEN start_period AND end_period
      AND  a.contributor_reference = b.contributor_reference
      AND  b.quest_order = 10
      AND  action = 'A';

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    h_text = 'ERROR: Failed to create second instance of working table ' 
           + :h_cad_table + '.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
    Delete from :h_ind_table where contributors have already got the
    questions now being added via CADS
  ------------------------------------------------------------------*/

  DELETE FROM :h_ind_table a
  WHERE       question IN 
            ( SELECT question
              FROM   :h_cad_table b
              WHERE  a.contributor_reference = b.contributor_reference);

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    h_text = 'ERROR: Failed to delete added CADS from ' +:h_ind_table + '.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
    Add the CADS
  ------------------------------------------------------------------*/

  INSERT INTO :h_ind_table (
              contributor_reference,
              quest_order,
              question,
              period,
              contributor_inquiry,
              contributor_industry,
              question_industry,
              acell,
              avalue,
              acell_type,
              aconstruction_type,
              evalue,
              fcell,
              fvalue,
              fcell_type,
              fconstruction_type,
              confirmation_code,
              confirmation_date,
              atypical)
  SELECT      a.contributor_reference,
              b.quest_order,
              b.question,
              :g_period,
              14,
              a.contributor_industry,
              b.question_industry,
              'N',
              0,
              '',
              0,
              0,
              'N',
              0,
              '',
              0,
              '',
              '',
              'N'
  FROM        contributor_period a,
              question_library b,
              :h_cad_table c
  WHERE       a.period = :g_period
  AND         a.contributor_industry = :g_industry
  AND         b.question = c.question
  AND         a.contributor_reference = c.contributor_reference
  AND         b.period = :g_period
  AND         b.lag IN (0,2,5);

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    h_text = 'ERROR: Failed to insert added CADS into ' +:h_ind_table + '.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
    3. Stop CADS

    Create for all volumes as it's quicker matching question_library on
    question=question than it is on question/10*10+1=question
  ------------------------------------------------------------------*/

  MESSAGE '[' + VARCHAR(:g_count) +'/' + VARCHAR(:g_total) + '] '
        + 'INDUSTRY ' +VARCHAR(:g_industry) + ': '
        + 'Deleting stop CADS. . .';

  h_return = CALLPROC lp_drop_table (p_table_name = :h_cad_table);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed on third drop of working table ' 
           + :h_cad_table + '.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  CREATE TABLE :h_cad_table
  AS 
    SELECT a.question,
           a.contributor_reference
    FROM   cads a,
           :h_ind_table b
    WHERE  :g_period BETWEEN start_period AND end_period
      AND  a.contributor_reference = b.contributor_reference
      AND  b.quest_order = 10
      AND  action = 'S'
  UNION
    SELECT a.question + 1,
           a.contributor_reference
    FROM   cads a, 
           :h_ind_table b
    WHERE  :g_period BETWEEN start_period AND end_period
      AND  a.contributor_reference = b.contributor_reference
      AND  b.quest_order = 10
      AND  action = 'S'
  UNION 
    SELECT a.question + 3,
           a.contributor_reference
    FROM   cads a, 
           :h_ind_table b
    WHERE  :g_period BETWEEN start_period AND end_period
      AND  a.contributor_reference = b.contributor_reference
      AND  b.quest_order = 10
      AND  action = 'S'
  UNION 
    SELECT a.question + 4,
           a.contributor_reference
    FROM   cads a,
           :h_ind_table b
    WHERE  :g_period BETWEEN start_period AND end_period
      AND  a.contributor_reference = b.contributor_reference
      AND  b.quest_order = 10
      AND  action = 'S'
  UNION 
    SELECT a.question + 5,
           a.contributor_reference
    FROM   cads a,
           :h_ind_table b
    WHERE  :g_period BETWEEN start_period AND end_period
      AND  a.contributor_reference = b.contributor_reference
      AND  b.quest_order = 10
      AND  action = 'S'
  UNION 
    SELECT a.question + 7,
           a.contributor_reference
    FROM   cads a,
           :h_ind_table b
    WHERE  :g_period BETWEEN start_period AND end_period
      AND  a.contributor_reference = b.contributor_reference
      AND  b.quest_order = 10
      AND  action = 'S'
  UNION 
    SELECT a.question + 8,
           a.contributor_reference
    FROM   cads a, 
           :h_ind_table b
    WHERE  :g_period BETWEEN start_period AND end_period
      AND  a.contributor_reference = b.contributor_reference
      AND  b.quest_order = 10
      AND  action = 'S';

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    h_text = 'ERROR: Failed to create third instance of working table ' 
           + :h_cad_table + '.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
    Delete the stop CADS
  ------------------------------------------------------------------*/

  DELETE FROM :h_ind_table a
  WHERE       question IN 
            ( SELECT question
              FROM   :h_cad_table b
              WHERE  a.contributor_reference = b.contributor_reference);

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    h_text = 'ERROR: Failed to delete stop CADS from ' +:h_ind_table + '.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
   Tidying up...
  ------------------------------------------------------------------*/

  MESSAGE '[' + VARCHAR(:g_count) +'/' + VARCHAR(:g_total) + '] '
        + 'INDUSTRY ' +VARCHAR(:g_industry) + ': '
        + 'Tidying up. . .';

  h_return = CALLPROC lp_drop_table (p_table_name = :h_cad_table);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed on tidy up of working table ' 
           + :h_cad_table + '.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  RETURN 0
}

/**************************** LOCAL PROCEDURES ***************************/


/*=======================================================================
    Local procedure to check sql for errors during sections of code that
    utilise personal temp tables. Committed, no rollback.
=======================================================================*/

PROCEDURE lp_error_check (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing (
              h_num_row_ck = :p_num_row_ck,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

  RETURN IFNULL(:lp_return,9);

}


/*===========================================================================
	      Local procedure for dropping a table if it exists.
============================================================================*/

PROCEDURE lp_drop_table(p_table_name = CHAR(36) NOT NULL) = 

  DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT,
          lp_table  = CHAR(36) NOT NULL

BEGIN

  SELECT table_name as lp_table 
    FROM iitables
   WHERE table_name  = :p_table_name
     AND table_owner = :g_user_id;

  lp_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF lp_return = 0
  THEN
    RETURN 0;
  ENDIF;

  IF lp_return > 1 
  THEN
    MESSAGE 'SYSTEM ERROR: Failed whilst selecting ' 
          +  VARCHAR(:p_table_name) + ' from iitables prior to droping, '
          + 'with error code ' + VARCHAR(:lp_return) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9;
  ENDIF;

  MODIFY :p_table_name to TRUNCATED;

  DROP TABLE :p_table_name;

  h_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF h_return != 0 
  THEN 
    MESSAGE 'SYSTEM ERROR: Unable to drop ' + VARCHAR(:p_table_name) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9; 
  ENDIF;

  RETURN 0;

END

