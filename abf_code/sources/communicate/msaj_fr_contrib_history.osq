/*----------------------------------------------------------------------
msaj_fr_contrib_history
----------------------------------------------------------------------*/

INITIALIZE ( p_contributor_reference = CHAR(11) NOT NULL,
             phone_contact           = CHAR(30) NOT NULL,
             contributor_name        = CHAR(35) NOT NULL) =

    DECLARE  h_reply                 = CHAR(1)  NOT NULL,
             h_frpr_name             = VARCHAR(25) NOT NULL,
             h_retries_allowed       = INTEGER1 NOT NULL,
             h_retries               = INTEGER1 NOT NULL,
             h_retry_or_not          = CHAR(5)  NOT NULL,
             h_rows                  = INTEGER4 NOT NULL,
             h_counter               = INTEGER4 NOT NULL,
             h_record                = INTEGER4 NOT NULL,
             h_tid                   = INTEGER4 NOT NULL,
             contributor_industry    = INTEGER4 NOT NULL,
             h_return                = INTEGER1 NOT NULL,
             h_keyresp               = INTEGER1 NOT NULL,
             region                  = CHAR(2)  NOT NULL,
             tf.user_id              = VARCHAR(10)  NOT NULL,
             h_user_id               = CHAR(8)  NOT NULL,
             inquiry                 = INTEGER1 NOT NULL,
             output_category         = CHAR(1) NOT NULL,
             h_currency              = CHAR(1) NOT NULL,
             h_msg_txt               = VARCHAR(80) NOT NULL,

             lp_setup_screen         = PROCEDURE RETURNING INTEGER,
             lp_full_error_check     = PROCEDURE RETURNING INTEGER,

{
  h_frpr_name = 'msaj_fr_contrib_history';
  h_retries_allowed = 3;
  diary_date = '';

  SET_FORMS FIELD '' (MODE(tf) = 'READ',
                      INVISIBLE(msg) = 1,
                      INVISIBLE(euro_msg) = 1,
                      INVISIBLE(key_disp) = 1);

  /*------------------------------------------------------------------
     Find out the most recent selection for this contributor
  ------------------------------------------------------------------*/

  h_return = CALLPROC msa_fp_latest_details 
           ( contributor_reference = :p_contributor_reference,
             contributor_industry  = BYREF(:contributor_industry),
             region                = BYREF(:region),
             keyresp               = BYREF(:h_keyresp),
             output_category       = BYREF(:output_category),
             currency              = BYREF(:h_currency),
             inquiry               = BYREF(:inquiry));

  /*------------------------------------------------------------------
     Highlight Head Office and CBU Contributors
  ------------------------------------------------------------------*/

  SET_FORMS FIELD '' (INVISIBLE(msg) = 1);

  msg = '';

  IF output_category = 'I'
  THEN
    msg = 'This reporting unit is a Head Office Activity only';
    SET_FORMS FIELD '' (INVISIBLE(msg) = 0);
  ENDIF;

  IF output_category = 'V' OR output_category = 'Z'
  THEN
    msg = 'This is a Business Profiling Team Contributor' + X'0D' +
          'Any restructuring must be done by the BPT';
    SET_FORMS FIELD '' (INVISIBLE(msg) = 0);
  ENDIF;

  IF :h_keyresp = 1
  THEN
    key_disp = 'KEY';
    SET_FORMS FIELD '' (INVISIBLE(key_disp) = 0);
  ENDIF;

  IF :h_currency = 'E'
  THEN
    euro_msg = 'EURO CONTRIBUTOR';
    SET_FORMS FIELD '' (INVISIBLE(euro_msg) = 0);
  ENDIF;

  h_return = CALLPROC lp_setup_screen;

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT diary_date
    FROM   contributor_diary
    WHERE  contributor_reference = :p_contributor_reference;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return >1
  THEN
    MESSAGE 'ERROR: Failed to access contributor_diary. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;

  ELSEIF h_return = 1
  THEN
    SET_FORMS FIELD '' (INVISIBLE(diary_date) = 1);

  ELSE
    SET_FORMS FIELD '' (INVISIBLE(diary_date) = 0);

  ENDIF;

}

'New', KEY FRSKEY4 =
{
    h_return = CALLFRAME msaj_fr_new_details
             ( inquiry                  = 14,
               p_contributor_reference  = :p_contributor_reference,
               phone_contact            = :phone_contact,
               contributor_name         = :contributor_name);

    IF h_return != 0
    THEN
        MESSAGE 'ERROR: Failed in call to new details screen. '
              + 'Error code ' +VARCHAR(:h_return) +'. '
              + 'Please contact IM immediately.'
        WITH STYLE = POPUP;
        RETURN h_return;
    ENDIF;

    h_return = CALLPROC lp_setup_screen;

    IF h_return != 0
    THEN
        RETURN h_return;
    ENDIF;
}

'View', KEY FRSKEY5 =
{
  INQUIRE_FORMS TABLE '' (h_rows = DATAROWS(tf));

  IF :h_rows = 0
  THEN
    MESSAGE 'NOTE: There is nothing to view.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  h_tid = tf.contrib_tid;

  h_return = CALLFRAME msaj_fr_view_details
           ( p_contributor_reference  = :p_contributor_reference,
             contributor_name         = :contributor_name,
             period                   = :tf.period,
             h_tid                    = BYREF(:h_tid));

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed in call to view details screen. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN h_return;
  ENDIF;

  /*------------------------------------------------------------------
    Resume on the contact you were last looking at
  ------------------------------------------------------------------*/

  UNLOADTABLE tf (h_record = _record)
  BEGIN

    IF tf.contrib_tid = h_tid
    THEN
      SCROLL tf TO h_record;
      RESUME;
    ENDIF;

  END;

}

'Update', KEY FRSKEY6 =
{
  INQUIRE_FORMS TABLE '' (h_rows = DATAROWS(tf));

  IF :h_rows = 0
  THEN
    MESSAGE 'NOTE: There is nothing to update.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  h_return = CALLFRAME msaj_fr_update_details
           ( p_contributor_reference = :p_contributor_reference,
             phone_contact    = :phone_contact,
             contributor_name = :contributor_name,
             inquiry          = :inquiry,
             h_tid            = :tf.contrib_tid);

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed in call to update details screen. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN h_return;
  ENDIF;

  h_return = CALLPROC lp_setup_screen;

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

}

'Delete', KEY FRSKEY7 =
{

  IF :g_user_id != tf.user_id
  THEN
    MESSAGE 'WARNING: You can only delete your own contact messages.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  INQUIRE_FORMS TABLE '' (h_rows = DATAROWS(tf));

  IF :h_rows = 0
  THEN
    MESSAGE 'NOTE: There is nothing to delete.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  IF h_rows = 1 AND diary_date != ''
  THEN
    MESSAGE 'WARNING: You cannot delete the last contact message while ' 
          + 'there is still a Diary Date present.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  h_reply = '';
  WHILE LOWERCASE(h_reply) != 'n' AND LOWERCASE(h_reply) != 'y'
  DO
    h_reply = PROMPT 'WARNING: Do you really want to delete these details? ' 
                   + '[Y/N] '
    WITH STYLE = POPUP;
  ENDWHILE;

  IF LOWERCASE(h_reply) = 'n'
  THEN
    RESUME FIELD tf;
  ENDIF;

  /*------------------------------------------------------------------
     delete from contrib_communication2
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    DELETE FROM contrib_communication2
    WHERE       contrib_tid = :tf.contrib_tid
      AND       contributor_reference = :p_contributor_reference;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to delete from contrib_communication2. ' 
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN :h_return;
  ENDIF;

  /*------------------------------------------------------------------
     delete from extra information table
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    DELETE FROM contrib_extra_info2
    WHERE       contrib_tid = :tf.contrib_tid
      AND         contributor_reference = :p_contributor_reference;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to delete from contrib_extra_info2. ' 
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  h_return = CALLPROC lp_setup_screen;

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

}

'Diary', KEY FRSKEY8 =
{
  IF :g_user_class != 'I'
  THEN
    MESSAGE 'WARNING: This function can only be used by Inquiry staff.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  INQUIRE_FORMS TABLE '' (h_rows = DATAROWS(tf));

  IF :h_rows = 0
  THEN
    MESSAGE 'WARNING: You can only enter a Diary Date if there is at '
          + 'least one contact message stored.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  MESSAGE 'Loading Diary Date . . .';

  IF diary_date = ''
  THEN
    diary_date = 'today';
    SET_FORMS FIELD '' (INVISIBLE(diary_date) = 0);

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;
    
    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO
    
      h_retries = :h_retries + 1;
    
      INSERT INTO contributor_diary 
                ( contributor_reference,
                  contributor_industry,
                  diary_date)
      VALUES    ( :p_contributor_reference,
                  :contributor_industry,
                  :diary_date);

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);
    
      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;
    
    ENDWHILE;
    
    IF h_return = 7
    THEN
      RETURN 7;
    
    ELSEIF h_return != 0
    THEN
      MESSAGE 'ERROR: Failed to insert into contributor_diary. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN :h_return;
    ENDIF;
    
  ENDIF;

  h_return = CALLFRAME msaj_fr_diary_date ( diary_date = BYREF(:diary_date));

  IF h_return = 0 
  OR h_return = 1
  THEN

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;
    
    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO
    
      h_retries = :h_retries + 1;
    
      IF h_return = 1
      THEN
        DELETE FROM contributor_diary
        WHERE       contributor_reference = :p_contributor_reference;
        h_msg_txt = 'deleting from';
      ELSE
        UPDATE contributor_diary
        SET    diary_date = :diary_date
        WHERE  contributor_reference = :p_contributor_reference;
        h_msg_txt = 'updating';
      ENDIF;

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);
    
      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;
    
    ENDWHILE;
    
    IF h_return = 7
    THEN
      RETURN 7;
    
    ELSEIF h_return > 0
    THEN
      MESSAGE 'ERROR: Failed to ' +:h_msg_txt + ' contributor_diary. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN :h_return;
    ENDIF;

  ENDIF;
    
  IF diary_date = ''
  THEN
    SET_FORMS FIELD '' (INVISIBLE(diary_date) = 1);
  ELSE
    SET_FORMS FIELD '' (INVISIBLE(diary_date) = 0);
  ENDIF;

}

'End', KEY FRSKEY14  =
{
    RETURN 0;
}

/*----------------------------------------------------------------------
 TIMEOUT activation
----------------------------------------------------------------------*/

ON TIMEOUT =
{
    IF :g_user_id NOT LIKE 'pr%'
    THEN
        EXIT;
    ENDIF;
}

/*********************** LOCAL PROCEDURES *****************************/

/*======================================================================
     Local procedure to populate the screen.
======================================================================*/

PROCEDURE lp_setup_screen () =
{

  MESSAGE 'Loading Contact History . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;
 
    tf = SELECT   contact_date,
                  period,
                  IFNULL(contact_method,' ') AS contact_method,
                  IFNULL(contact_reason,' ') AS contact_reason,
                  IFNULL(contact_inorout,' ') AS contact_inorout,
                  IFNULL(contact_message,' ') AS contact_message,
                  user_id,
                  contrib_tid
         FROM     contrib_communication2
         WHERE    contributor_reference = :p_contributor_reference
         ORDER BY contact_date DESC,
                  contrib_tid DESC;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed whilst loading contact history onto screen.'
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
    Load the same select (but in reverse order as you want the oldest
    first) into an array
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    g_contact_array = 

    SELECT   contact_date,
             contrib_tid
    FROM     contrib_communication2
    WHERE    contributor_reference = :p_contributor_reference
    ORDER BY contact_date,
             contrib_tid;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    RETURN 7;

  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to load contact history into array sstorage.'
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  RETURN 0;

}


/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing (
                  h_num_row_ck = :p_num_row_ck,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}

