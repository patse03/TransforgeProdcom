/******************************************************************************
     Key Contributors by Industry
******************************************************************************/

INITIALIZE ()=

DECLARE h_return               = INTEGER4 NOT NULL,
        h_pages                = INTEGER4 NOT NULL,
        h_retries              = INTEGER1 NOT NULL,
        h_retries_allowed      = INTEGER1 NOT NULL,
        h_retry_or_not         = CHAR(5)  NOT NULL,
        h_yesno                = CHAR(1)  NOT NULL,
        h_table                = VARCHAR(24) NOT NULL,
        h_command              = VARCHAR(200) NOT NULL,
        h_file                 = VARCHAR(24) NOT NULL,
        h_field_name           = VARCHAR(24) NOT NULL,
        h_rows                 = INTEGER4 NOT NULL,
        h_frpr_name            = VARCHAR(30) NOT NULL,
        h_rowcount             = INTEGER4     NOT NULL,
        h_response             = FLOAT8 NOT NULL WITH DEFAULT,

  lp_error_check      = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,
  lp_full_error_check = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,



{
  SELECT DBMSINFO('username') AS g_user_id;
  SELECT DBMSINFO('database') AS g_database;

  SET_FORMS FRS (MAPFILE='/home/prodcom/admin/prodcom.map');

  msa_date = 'now';
  h_retries_allowed   = 3;
  h_frpr_name = 'msaeb_fr_iq_despatch';
  h_table = 'tt_key_despatch';

  s_count     = 0;
  s_receipted = 0;
  s_response  = 0.0;

  SET_FORMS FIELD '' (MODE(tf) = 'READ',

                      DISPLAYONLY(s_mode)     = 0,
                      UNDERLINE  (s_mode)     = 1,
                      REVERSE    (s_mode)     = 0,

                      DISPLAYONLY(s_industry) = 0,
                      UNDERLINE  (s_industry) = 1,
                      REVERSE    (s_industry) = 0,

                      DISPLAYONLY(s_period)   = 0,
                      UNDERLINE  (s_period)   = 1,
                      REVERSE    (s_period)   = 0,

                      COLOR  (s_receipted)    = 1,
                      REVERSE(s_receipted)    = 1,

                      COLOR  (s_response)     = 1,
                      REVERSE(s_response)     = 1);

  /*----------------------------------------------------------------------
       Access check. (Error messages handled by procedure.)
  ----------------------------------------------------------------------*/
  
  h_return = CALLPROC check_access_frames (p_frpr_name = :h_frpr_name);

  IF h_return = 1 
  THEN
    RETURN 0;
  ELSEIF h_return > 1
  THEN
    RETURN 9;
  ENDIF;
  
}

/*************************** FIELD ACTIVATIONS ****************************/

FIELD s_mode =
{
  IF s_mode != 'NON' AND s_mode != 'ALL'
  THEN
    MESSAGE 'WARNING: Response mode must be "NON" or "ALL".'
    WITH STYLE = POPUP;
    RESUME FIELD s_mode;
  ENDIF;

  SET_FORMS FIELD '' ( DISPLAYONLY(s_mode) = 1,
                       UNDERLINE  (s_mode) = 0,
                       REVERSE    (s_mode) = 1);

  RESUME FIELD s_industry;
}

FIELD s_industry =
{
  IF :s_industry != 'ALL' AND
  :s_industry NOT LIKE '/[0-9/]/[0-9/]/[0-9/]/[0-9/]/[0-9/]' escape '/'
  THEN
    MESSAGE 'WARNING: Industry must be "ALL" or a 5 digit industry code.'
    WITH STYLE = POPUP;
    RESUME FIELD s_industry;
  ENDIF;

  IF :s_industry != 'ALL'
  THEN

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE (:h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY')
    DO
      h_retries = :h_retries + 1;

      SELECT VARCHAR(industry) AS s_industry
      FROM   industry
      WHERE  industry = INT4(:s_industry);

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return = 1
    THEN
      MESSAGE 'WARNING: That is not a valid ProdCom industry code. '
            + 'Please try again...'
      WITH STYLE = POPUP;
      RESUME FIELD s_industry;
    ELSEIF h_return > 1
    THEN
      MESSAGE 'ERROR: Failed to validate industry. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN 9;
    ENDIF;

  ENDIF;

  SET_FORMS FIELD '' ( DISPLAYONLY(s_industry) = 1,
                       UNDERLINE  (s_industry) = 0,
                       REVERSE    (s_industry) = 1);

  RESUME FIELD s_period;

}

FIELD s_period =
{

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE (:h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY')
  DO

    h_retries = :h_retries + 1;

    SELECT period AS s_period
    FROM   inquiry_period
    WHERE  period = :s_period
    AND    inquiry = 14;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 1
  THEN
    MESSAGE 'WARNING: That is not a valid period for ProdCom. '
          + 'Please try again...'
    WITH STYLE = POPUP;
    RESUME FIELD s_industry;
  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to validate inquiry period.. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  SET_FORMS FIELD '' ( DISPLAYONLY(s_period) = 1,
                       UNDERLINE  (s_period) = 0,
                       REVERSE    (s_period) = 1);

  /*------------------------------------------------------------------
      Create table of all contributors for required industry/period
  ------------------------------------------------------------------*/

  MESSAGE 'Selecting Data . . .';

  h_return = CALLPROC msa_fp_drop_table (h_table = :h_table);

  IF h_return != 0
  THEN
    /* Error message handled by extarenal procedure */
    RETURN 9;
  ENDIF;

  MESSAGE 'Creating List of Contributors . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE (:h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY')
  DO

    h_retries = :h_retries + 1;

    IF :s_mode = 'NON'
    THEN

      IF :s_industry = 'ALL'
      THEN

        CREATE TABLE :h_table
        AS 
        SELECT contributor_reference,
               contributor_industry,
               '                                   ' AS add_name1,
               '  ' AS country,
               ' '  AS key_disp,
               keyresp,
               register_emp,
               receipt_date
        FROM   contributor_period
        WHERE  period        = :s_period
          AND  receipt_date  =  ''      
          AND  keyresp       = 1;

      ELSE

        CREATE TABLE :h_table
        AS 
        SELECT contributor_reference,
               contributor_industry,
               '                                   ' AS add_name1,
               '  ' AS country,
               ' '  AS key_disp,
               keyresp,
               register_emp,
               receipt_date
        FROM   contributor_period
        WHERE  period               = :s_period
          AND  contributor_industry = :s_industry
          AND  receipt_date         = ''      
          AND  keyresp              = 1;

      ENDIF;

    ELSE  /* s_mode = "ALL" */

      IF :s_industry = 'ALL'
      THEN

        CREATE TABLE :h_table
        AS
        SELECT contributor_reference,
               contributor_industry,
               '                                   ' AS add_name1,
               '  ' AS country,
               ' '  AS key_disp,
               keyresp,
               register_emp,
               receipt_date
        FROM   contributor_period
        WHERE  period  = :s_period
          AND  keyresp = 1;

      ELSE

        CREATE TABLE :h_table
        AS 
        SELECT contributor_reference,
               contributor_industry,
               '                                   ' AS add_name1,
               '  ' AS country,
               ' '  AS key_disp,
               keyresp,
               register_emp,
               receipt_date
        FROM   contributor_period
        WHERE  period               = :s_period
          AND  contributor_industry = :s_industry
          AND  keyresp              = 1;
      ENDIF;

    ENDIF;

        h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

        IF h_return != 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

  IF h_return = 1
  THEN
    MESSAGE 'WARNING: There are no contributors that fit the given criteria.'
    WITH STYLE = POPUP;
    RETURN 0;
  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to select data for given criteria. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
     Modify
  ------------------------------------------------------------------*/

  MESSAGE 'Modifying Table . . .';

  MODIFY :h_table TO BTREE UNIQUE 
      ON contributor_industry, contributor_reference ;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to modify storage structure of ' +h_table +'. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
     Add keyresp marker
  ------------------------------------------------------------------*/

  MESSAGE 'Adding Keyresp Display Marker . . .';

  UPDATE :h_table
  SET    key_disp = 'K'
  WHERE  keyresp  = 1;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to update ' +h_table +' with key markers. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
       Add contributor name
  ------------------------------------------------------------------*/

  MESSAGE 'Updating Contributor List . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE (:h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY')
  DO
    h_retries = :h_retries + 1;

    UPDATE  :h_table a
    FROM    contributor b
    SET     add_name1 = b.add_name1
    WHERE   a.contributor_reference = b.contributor_reference;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to update ' +h_table +' with contributor names. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
       Set up screen table
  ------------------------------------------------------------------*/

  MESSAGE 'Selecting to Screen . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    tf =

    SELECT   contributor_reference,
             contributor_industry,
             add_name1,
             register_emp,
             receipt_date,
             key_disp
    FROM     :h_table
    ORDER BY contributor_industry,
             contributor_reference;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  s_count = :h_rowcount;

  IF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to load data to screen. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*--------------------------------------------------------------------------
     If mode is "ALL" then calculate response rate. 
     Otherwise, blank it.
  --------------------------------------------------------------------------*/
  
  IF s_mode = 'ALL'
  THEN

    SELECT COUNT(contributor_reference) AS s_receipted
    FROM   :h_table
    WHERE  receipt_date != '';

    h_return = lp_error_check (p_num_row_ck = 1);

    IF h_return != 0
    THEN 
      MESSAGE 'ERROR: Failed to count receipted key responders. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immidiately.'
      WITH STYLE = POPUP; 
      RETURN 9;
    ENDIF;

    REDISPLAY; 

    IF :s_count > 0
    THEN
      s_response = (100.00/:s_count) * :s_receipted;
    ELSE
      s_response = 0.0;
    ENDIF;

    REDISPLAY; 

  ELSE /* Mode = "NON" */

      SET_FORMS FIELD '' ( COLOR(s_receipted)   = 6,
                           REVERSE(s_receipted) = 0,

                           COLOR(s_response)   = 6,
                           REVERSE(s_response) = 0);
      REDISPLAY;

  ENDIF;

  RESUME FIELD tf;

}

/**************************** KEY ACTIVATIONS *****************************/


'Retrieve', KEY FRSKEY4 =
{

  INQUIRE_FORMS FORM (h_field_name = FIELD);

  IF :h_field_name != 'tf'
  THEN
    MESSAGE 'WARNING: Please highlight the required Contributor.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  INQUIRE_FORMS TABLE '' (h_rows = DATAROWS(tf));

  IF :h_rows = 0
  THEN
    MESSAGE 'WARNING: Please highlight the required Contributor.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  h_return = CALLFRAME msaeb_fr_desp_contrib 
           ( industry              = :tf.contributor_industry,
             period                = :s_period,
             inquiry               = 14,
             contributor_reference = :tf.contributor_reference);

  msa_date = 'now';
  RESUME;
}

'Print', KEY FRSKEY8 =
{
  IF s_count = 0
  THEN
    MESSAGE 'WARNING: There is no data to print.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  MESSAGE 'Preparing Report . . .';

  msa_date = 'now';

  h_return = CALLPROC msa_cp_callsys 
           ( 'report ' + :g_database 
           + ' ''(h_table = "' + :h_table + '"' 
           + ',user_name = "' + :g_user_name + '"' 
           + ',inquiry = 14' 
           + ',period = ' + VARCHAR(:s_period) 
           + ')'' -i$REPORTS/msaeb_rw_despatch_key.rw' 
           + ' > report.output 2> report.output');

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to produce report for printing. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immidiately.'
    WITH STYLE = POPUP;
  ELSE

    /*--------------------------------------------------------------
         Prompt if print will be 5 pages or more
    --------------------------------------------------------------*/

    h_pages = (:s_count / 71) + 1;

    IF :h_pages >= 5
    THEN

      h_yesno = '';

      WHILE h_yesno != 'Y' AND h_yesno != 'N'
      DO

         h_yesno = PROMPT 'NOTE: This report will require ' 
                        + VARCHAR(:h_pages) + ' '
                        + 'pages. Do you wish to continue? [Y/N] : '
                   WITH STYLE = POPUP;

         h_yesno = UPPER(h_yesno);

      ENDWHILE;

      IF h_yesno = 'N'
      THEN
        RESUME;
      ENDIF;

    ENDIF;

    /*--------------------------------------------------------------
         Remove last line - so a blank end page is not printed
    --------------------------------------------------------------*/

    h_return = CALLPROC msa_cp_callsys 
             ( 'lines=`wc -l < msaeb_rw_despatch_key.rpt`;' 
             + 'lines=`expr ${lines} - 1`;' 
             + 'head -${lines} msaeb_rw_despatch_key.rpt | ' 
             + 'lp -o16p -d' + :g_printer 
             + ' >> report.output 2>> report.output');

    IF h_return != 0
    THEN
      MESSAGE 'ERROR: Failed to send report to printer ' +:g_printer +'. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immidiately.'
      WITH STYLE = POPUP;
    ELSE
      MESSAGE 'SUCCESS: Report produced and sent to printer ' +:g_printer +'.'
      WITH STYLE = POPUP;
    ENDIF;

  ENDIF;
}

'Clear', KEY FRSKEY12 =
{
  CLEAR FIELD s_mode, 
              s_industry,
              s_period, 
              tf;

  s_count     = 0;
  s_receipted = 0;
  s_response  = 0.0;

  SET_FORMS FIELD '' (DISPLAYONLY(s_mode)     = 0,
                      UNDERLINE  (s_mode)     = 1,
                      REVERSE    (s_mode)     = 0,

                      DISPLAYONLY(s_industry) = 0,
                      UNDERLINE  (s_industry) = 1,
                      REVERSE    (s_industry) = 0,

                      DISPLAYONLY(s_period)   = 0,
                      UNDERLINE  (s_period)   = 1,
                      REVERSE    (s_period)   = 0,

                      COLOR  (s_receipted)    = 1,
                      REVERSE(s_receipted)    = 1,

                      COLOR  (s_response)     = 1,
                      REVERSE(s_response)     = 1);
      REDISPLAY;

    msa_date = 'now';

    RESUME FIELD s_mode;
}

'End', KEY FRSKEY14 =
{
  MESSAGE 'Exiting Despatch Screen . . .';

  h_return = CALLPROC msa_fp_drop_table (h_table = :h_table);

  RETURN 0;
}

/**************************** LOCAL PROCEDURES ****************************/

/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing 
            ( h_num_row_ck      = :p_num_row_ck,
              h_num_row         = BYREF(:h_rowcount),
              h_commit          = 'Y',
              h_rollback        = 'N',
              h_retries         = :h_retries,
              h_retries_allowed = :h_retries_allowed,
              h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}

/*=======================================================================
    Local procedure to check sql for errors during sections of code that
    utilise personal temp tables. Committed, no rollback.
=======================================================================*/

PROCEDURE lp_error_check (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing 
            ( h_num_row_ck = :p_num_row_ck,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

  RETURN IFNULL(:lp_return,9);

}

