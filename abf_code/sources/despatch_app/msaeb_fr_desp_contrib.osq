INITIALIZE ( inquiry        = INTEGER1     NOT NULL WITH DEFAULT) =

DECLARE h_return            = INTEGER4     NOT NULL WITH DEFAULT,
        h_dummy             = CHAR(11)     NOT NULL WITH DEFAULT,
        h_varchar_variable  = VARCHAR(100) NOT NULL WITH DEFAULT,
        h_param_list        = VARCHAR(100) NOT NULL WITH DEFAULT,
        h_integer_variable  = INTEGER1     NOT NULL WITH DEFAULT,
        h_param1            = VARCHAR(20)  NOT NULL WITH DEFAULT,
        h_param2            = VARCHAR(20)  NOT NULL WITH DEFAULT,
        h_param3            = VARCHAR(20)  NOT NULL WITH DEFAULT,
        h_param4            = VARCHAR(20)  NOT NULL WITH DEFAULT,
        h_retries           = INTEGER1     NOT NULL WITH DEFAULT,
        h_retries_allowed   = INTEGER1     NOT NULL WITH DEFAULT,
        h_retry_or_not      = CHAR(5)      NOT NULL WITH DEFAULT,
        h_currency          = CHAR(1)      NOT NULL WITH DEFAULT,
        h_frpr_name         = VARCHAR(24)  NOT NULL WITH DEFAULT,
        h_sp_start          = INTEGER4     NOT NULL WITH DEFAULT,
        h_output_category   = CHAR(1)      NOT NULL WITH DEFAULT,
        h_field_name        = VARCHAR(30)  NOT NULL WITH DEFAULT,
        h_keyresp           = INTEGER1     NOT NULL WITH DEFAULT,
        h_rows              = INTEGER4     NOT NULL WITH DEFAULT,

        lp_load_data        = PROCEDURE RETURNING INTEGER,
        lp_error_check      = PROCEDURE RETURNING INTEGER,
        lp_full_error_check = PROCEDURE RETURNING INTEGER,

{
  h_frpr_name = 'msaeb_fr_desp_contrib';
  h_retries_allowed = 3;
  enforcement = 'UNDER ENFORCEMENT';
  msa_date = 'now';

  SET_FORMS FIELD '' (INVISIBLE(country)      = 1,
                      INVISIBLE(enforcement)  = 1,
                      INVISIBLE(key_disp)     = 1,
                      INVISIBLE(euro_msg)     = 1,
                      INVISIBLE(receipt_date) = 1,
                      MODE(tf_questions)      = 'READ',
                      MODE(tf_periods)        = 'READ');

  h_param_list = CALLPROC CommandLineParameters();

  h_varchar_variable = SQUEEZE (h_param_list);

  h_integer_variable = LOCATE (h_varchar_variable, ' ');
  h_param1           = LEFT (h_varchar_variable,h_integer_variable - 1);
  h_varchar_variable = SHIFT (h_varchar_variable, - h_integer_variable);
  h_integer_variable = LOCATE (h_varchar_variable, ' ');
  h_param2           = LEFT (h_varchar_variable,h_integer_variable - 1);

/* --- OBSOLETE: INQ ALWAYS 14, INDUSTRY CALCULATED. - DF

  h_varchar_variable = SHIFT (h_varchar_variable, - h_integer_variable);
  h_integer_variable = LOCATE (h_varchar_variable, ' ');
  h_param3         =   LEFT (h_varchar_variable,h_integer_variable - 1);
  h_varchar_variable = SHIFT (h_varchar_variable, - h_integer_variable);
  h_integer_variable = LOCATE (h_varchar_variable, ' ');
  h_param4         =   LEFT (h_varchar_variable,h_integer_variable - 1);

*/

  IF h_param1 != ''
  THEN
    period = INT4(h_param1);
    contributor_reference = VARCHAR(h_param2);
  ENDIF;

  SELECT DBMSINFO('username') AS g_user_id;

  IF g_user_id = 'produser'
  OR g_user_id = 'prodlive'
  THEN
    MESSAGE 'DEBUG: period = {' +VARCHAR(:period) +'}' +X'0D'
          + '       conref = {' +VARCHAR(:contributor_reference) +'}'
    WITH STYLE = POPUP;
  ENDIF;

  h_return = CALLPROC lp_load_data();

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

  IF g_user_id = 'produser'
  OR g_user_id = 'prodlive'
  THEN
    MESSAGE 'DEBUG: period = {' +VARCHAR(:period) +'}' +X'0D'
    WITH STYLE = POPUP;
  ENDIF;

}

'Help', KEY FRSKEY1 =
{
}

'Update Contributor' =
{
  CALL APPLICATION (
  exec ='$IMAGES/online_cont_sel_app -numeric_overflow=ignore msafd_fr_up_cont',
  param = VARCHAR(:contributor_reference));
  msa_date = 'now';
}

'QuestionText' =
{
  INQUIRE_FORMS FORM (h_field_name = FIELD);

  IF :h_field_name != 'tf_questions'
  THEN
    MESSAGE 'Please highlight the required question'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  INQUIRE_FORMS TABLE '' (h_rows = DATAROWS(tf_questions));

  IF :h_rows = 0
  THEN
    MESSAGE 'There are no questions'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  h_return = CALLFRAME msaeb_fr_desp_question (
            period   = :period,
            question = :tf_questions.question);

  IF h_return != 0
  THEN
    RETURN h_return;
  ENDIF;

  msa_date = 'now';

}

'QuickView', KEY FRSKEY7 =
{
    CALL APPLICATION (exec = '$IMAGES/quickview_app -numeric_overflow=ignore ');
}


'End', KEY FRSKEY6 =
{
    RETURN 0;
}

/************************** LOCAL PROCEDURES ***************************/

/*=======================================================================
    Local procedure to load data to screen fields.
=======================================================================*/

PROCEDURE lp_load_data () =

DECLARE   lp_return  = INTEGER4 NOT NULL WITH DEFAULT,
          lp_return2 = INTEGER4 NOT NULL WITH DEFAULT,

{

  MESSAGE 'Selecting Contributor Data . . .';

  /*------------------------------------------------------------------
     Find current span start
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT span_start as h_sp_start
    FROM   inquiry
    WHERE  inquiry = 14;

    lp_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF lp_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF lp_return != 0
  THEN
    MESSAGE 'ERROR: Failed to select span start from inquiry table. '
          + 'Error code ' +VARCHAR(:lp_return) +'. '
          + 'Please contact IM immedieately.'
    WITH STYLE = POPUP;
    RETURN 9
  ENDIF;

  /*------------------------------------------------------------------
     Get contributor period data
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT a.enterprise,
           a.structure,
           a.contributor_industry AS industry,
           a.keyresp AS h_keyresp,
           a.register_emp,
           a.currency AS h_currency,
           b.country,
           a.receipt_date
    FROM   contributor_period a,
           region b
    WHERE  a.period = :period
    AND    a.contributor_reference = :contributor_reference
    AND    a.region = b.region;

    lp_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF lp_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  /*.........................................................................
     As this is now being called from diferent locations, some of which
     display multiple periods, it is possible that a non-selected period
     may have been passed. If this is teh case, we need to switch periods
     to the latest selected and try again.
  .........................................................................*/

  IF lp_return = 1
  THEN

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      SELECT MAX(period) AS period
      FROM   contributor_period
      WHERE  contributor_reference = :contributor_reference;

      lp_return2 = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF lp_return2 != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF lp_return2 != 0
    THEN
      MESSAGE 'ERROR: Failed to select latest contributor period '
            + 'for contributor ' +:contributor_reference +'. '
            + 'Error code ' +VARCHAR(:lp_return2) +'. '
            + 'Please contact IM immedieately.'
      WITH STYLE = POPUP;
      RETURN 9
    ENDIF;

    /*..................................................................
       Now try again.
    ..................................................................*/

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      SELECT a.enterprise,
             a.structure,
             a.contributor_industry AS industry,
             a.keyresp AS h_keyresp,
             a.register_emp,
             a.currency AS h_currency,
             b.country,
             a.receipt_date
      FROM   contributor_period a,
             region b
      WHERE  a.period = :period
      AND    a.contributor_reference = :contributor_reference
      AND    a.region = b.region;

      lp_return2 = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF lp_return2 != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    lp_return = :lp_return2;

    REDISPLAY;

  ENDIF;

  IF lp_return != 0
  THEN
    MESSAGE 'ERROR: Failed to select contributor period data. '
          + 'Error code ' +VARCHAR(:lp_return) +'. '
          + 'Please contact IM immedieately.'
    WITH STYLE = POPUP;
    RETURN 9
  ENDIF;

  IF country != ''
  THEN
    SET_FORMS FIELD '' (INVISIBLE(country) = 0);
  ELSE
    SET_FORMS FIELD '' (INVISIBLE(country) = 1);
  ENDIF;

  IF :h_keyresp = 1
  THEN
    key_disp = 'KEY';
    SET_FORMS FIELD '' (INVISIBLE(key_disp) = 0);
  ELSE
    SET_FORMS FIELD '' (INVISIBLE(key_disp) = 1);
  ENDIF;

  IF :h_currency = 'E'
  THEN
    euro_msg = 'EURO CONTRIBUTOR';
    SET_FORMS FIELD '' (INVISIBLE(euro_msg) = 0);
  ELSE
    SET_FORMS FIELD '' (INVISIBLE(euro_msg) = 1);
  ENDIF;

  IF receipt_date != ''
  THEN
    SET_FORMS FIELD '' (INVISIBLE(receipt_date) = 0);
  ELSE
    SET_FORMS FIELD '' (INVISIBLE(receipt_date) = 1);
  ENDIF;

  /*------------------------------------------------------------------
       Get contributor data
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT add_name1,
           add_name2,
           add_name3
    FROM   contributor
    WHERE  contributor_reference = :contributor_reference;

    lp_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF lp_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF lp_return != 0
  THEN
    MESSAGE 'ERROR: Failed to select contributor name from contributor table. '
          + 'Error code ' +VARCHAR(:lp_return) +'. '
          + 'Please contact IM immedieately.'
    WITH STYLE = POPUP;
    RETURN 9
  ENDIF;

  /*------------------------------------------------------------------
       Check for enforcement
  ------------------------------------------------------------------*/

  lp_return = CALLPROC msa_fp_latest_details (
             contributor_reference = :contributor_reference,
             output_category       = BYREF(:h_output_category));

  IF lp_return > 1
  THEN
    /* Error message handled in external procedure */
    RETURN lp_return;
  ENDIF;

  IF :h_output_category = 'Y'
  THEN
    SET_FORMS FIELD '' (INVISIBLE(enforcement) = 0);
  ELSE
    SET_FORMS FIELD '' (INVISIBLE(enforcement) = 1);
  ENDIF;

  /*------------------------------------------------------------------
       Load up contributor questions
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    tf_questions =

    SELECT question
    FROM   cqpv
    WHERE  contributor_reference = :contributor_reference
      AND  period = :period;

    lp_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF lp_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF lp_return != 0
  THEN
    MESSAGE 'ERROR: Failed to select questions for contributor from cqpv. '
          + 'Error code ' +VARCHAR(:lp_return) +'. '
          + 'Please contact IM immedieately.'
    WITH STYLE = POPUP;
    RETURN 9
  ENDIF;

  /*------------------------------------------------------------------
       Select outstanding periods
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    tf_periods =

    SELECT period
    FROM   contributor_period
    WHERE  contributor_reference = :contributor_reference
      AND  period      >= :h_sp_start
      AND  inquiry      = 14
      AND  receipt_date = ''
    ORDER  BY period DESC;

    lp_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF lp_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF lp_return > 1
  THEN
    MESSAGE 'ERROR: Failed to select outstanding contributor periods. '
          + 'Error code ' +VARCHAR(:lp_return) +'. '
          + 'Please contact IM immedieately.'
    WITH STYLE = POPUP;
    RETURN 9
  ENDIF;

    RETURN 0;
}


/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing
            ( h_num_row_ck      = :p_num_row_ck,
              h_commit          = 'Y',
              h_rollback        = 'N',
              h_retries         = :h_retries,
              h_retries_allowed = :h_retries_allowed,
              h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}

/*=======================================================================
    Local procedure to check sql for errors during sections of code that
    utilise personal temp tables. Committed, no rollback.
=======================================================================*/

PROCEDURE lp_error_check (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing
            ( h_num_row_ck = :p_num_row_ck,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

  RETURN IFNULL(:lp_return,9);

}
