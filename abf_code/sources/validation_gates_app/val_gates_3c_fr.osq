INITIALIZE (p_amended      = INGRESDATE NOT NULL) =

DECLARE h_retries_max  = INTEGER1 NOT NULL,
        h_retries      = INTEGER1 NOT NULL,
        h_retry_or_not = CHAR(5) NOT NULL,
        h_return       = INTEGER1 NOT NULL,
        h_exit         = CHAR(1) NOT NULL,
        h_change       = CHAR(1) NOT NULL,
        h_confirm      = CHAR(1) NOT NULL,
        h_dummy        = INTEGER4 NOT NULL,
        h_frpr_name    = VARCHAR(24) NOT NULL,
        h_comments     = VARCHAR(250) NOT NULL,
        h_amended      = INGRESDATE NOT NULL,

        l_minimum_change     = INTEGER4 NOT NULL,
        l_maximum_value      = INTEGER4 NOT NULL,
        l_increase           = INTEGER4 NOT NULL,
        l_decrease           = INTEGER4 NOT NULL,
        l_uv_increase        = INTEGER4 NOT NULL,
        l_uv_decrease        = INTEGER4 NOT NULL,
        l_sph_increase       = INTEGER4 NOT NULL,
        l_sph_decrease       = INTEGER4 NOT NULL,
        l_key_minimum_change = INTEGER4 NOT NULL,
        l_key_maximum_value  = INTEGER4 NOT NULL,
        l_key_increase       = INTEGER4 NOT NULL,
        l_key_decrease       = INTEGER4 NOT NULL,
        l_key_uv_increase    = INTEGER4 NOT NULL,
        l_key_uv_decrease    = INTEGER4 NOT NULL,
        l_new_uv_range_from  = FLOAT8   NOT NULL,
        l_new_uv_range_to    = FLOAT8   NOT NULL,
        l_new_sph_range_from = INTEGER4 NOT NULL,
        l_new_sph_range_to   = INTEGER4 NOT NULL,

        lp_drop_table           = PROCEDURE RETURNING INTEGER,
        lp_error_check          = PROCEDURE RETURNING INTEGER,
        lp_full_error_check     = PROCEDURE RETURNING INTEGER
{

SET_FORMS FRS (TIMEOUT = gc_timeout);

h_frpr_name = 'val_gate_3c';
msa_date = 'now';

/*----------------------------------------------------------------------
    Resets any previously changed fields to standard inverse video.
----------------------------------------------------------------------*/

  SET_FORMS FIELD val_gates_3c_fr (intensity(minimum_change)=0);
  SET_FORMS FIELD val_gates_3c_fr (intensity(maximum_value)=0);
  SET_FORMS FIELD val_gates_3c_fr (intensity(increase)=0);
  SET_FORMS FIELD val_gates_3c_fr (intensity(decrease)=0);
  SET_FORMS FIELD val_gates_3c_fr (intensity(uv_increase)=0);
  SET_FORMS FIELD val_gates_3c_fr (intensity(uv_decrease)=0);
  SET_FORMS FIELD val_gates_3c_fr (intensity(sph_increase)=0);
  SET_FORMS FIELD val_gates_3c_fr (intensity(sph_decrease)=0);
  SET_FORMS FIELD val_gates_3c_fr (intensity(key_minimum_change)=0);
  SET_FORMS FIELD val_gates_3c_fr (intensity(key_maximum_value)=0);
  SET_FORMS FIELD val_gates_3c_fr (intensity(key_increase)=0);
  SET_FORMS FIELD val_gates_3c_fr (intensity(key_decrease)=0);
  SET_FORMS FIELD val_gates_3c_fr (intensity(key_uv_increase)=0);
  SET_FORMS FIELD val_gates_3c_fr (intensity(key_uv_decrease)=0);
  SET_FORMS FIELD val_gates_3c_fr (intensity(new_uv_range_from)=0);
  SET_FORMS FIELD val_gates_3c_fr (intensity(new_uv_range_to)=0);
  SET_FORMS FIELD val_gates_3c_fr (intensity(new_sph_range_from)=0);
  SET_FORMS FIELD val_gates_3c_fr (intensity(new_sph_range_to)=0);

  SET_FORMS FIELD val_gates_3c_fr (intensity(spacer_3a)=0);
  SET_FORMS FIELD val_gates_3c_fr (intensity(spacer_3b)=0);
  SET_FORMS FIELD val_gates_3c_fr (intensity(spacer_3c)=0);
  SET_FORMS FIELD val_gates_3c_fr (intensity(spacer_3d)=0);
  SET_FORMS FIELD val_gates_3c_fr (intensity(spacer_3e)=0);
  SET_FORMS FIELD val_gates_3c_fr (intensity(spacer_5a)=0);
  SET_FORMS FIELD val_gates_3c_fr (intensity(spacer_5b)=0);
  SET_FORMS FIELD val_gates_3c_fr (intensity(spacer_5c)=0);
  SET_FORMS FIELD val_gates_3c_fr (intensity(spacer_5d)=0);
  SET_FORMS FIELD val_gates_3c_fr (intensity(spacer_5e)=0);

REDISPLAY;

/*----------------------------------------------------------------------
             Selects values for screen display.
----------------------------------------------------------------------*/

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_max       = 100;

WHILE :h_retries < h_retries_max AND :h_retry_or_not = 'RETRY'
DO

  MESSAGE '                   Selecting data, please wait...';

  h_retries = :h_retries + 1;

  SELECT   question, 
           amended AS h_amended,
           minimum_change,
           maximum_value,
           increase,
           decrease,
           uv_increase,
           uv_decrease,
           sph_increase,
           sph_decrease,
           key_minimum_change,
           key_maximum_value,
           key_increase,
           key_decrease,
           key_uv_increase,
           key_uv_decrease,
           new_uv_range_from,
           new_uv_range_to,
           new_sph_range_from,
           new_sph_range_to
  FROM     credibility_changes
  WHERE    question = :g_question_no
    AND    amended = :p_amended;

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return != 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return != 0
THEN
  MESSAGE 'SYSTEM ERROR: Failed to access credibility_changes table. '
	+ 'Error code '+VARCHAR(:h_return)+'.' +X'0D'
	+ 'Please contact I.M. immediately. Process cannot continue.'
  WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

/*----------------------------------------------------------------------
             Selects live values for comparison.
----------------------------------------------------------------------*/

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_max       = 100;

WHILE :h_retries < h_retries_max AND :h_retry_or_not = 'RETRY'
DO

  MESSAGE '                   Selecting data, please wait...';

  h_retries = :h_retries + 1;

  SELECT   minimum_change     AS l_minimum_change,
           maximum_value      AS l_maximum_value,
           increase           AS l_increase,
           decrease           AS l_decrease,
           uv_increase        AS l_uv_increase,
           uv_decrease        AS l_uv_decrease,
           sph_increase       AS l_sph_increase,
           sph_decrease       AS l_sph_decrease,
           key_minimum_change AS l_key_minimum_change,
           key_maximum_value  AS l_key_maximum_value,
           key_increase       AS l_key_increase,
           key_decrease       AS l_key_decrease,
           key_uv_increase    AS l_key_uv_increase,
           key_uv_decrease    AS l_key_uv_decrease,
           new_uv_range_from  AS l_new_uv_range_from,
           new_uv_range_to    AS l_new_uv_range_to,
           new_sph_range_from AS l_new_sph_range_from,
           new_sph_range_to   AS l_new_sph_range_to
  FROM     credibility
  WHERE    question = :g_question_no;

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return != 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return != 0
THEN
  MESSAGE 'SYSTEM ERROR: Failed to access credibility_changes table. '
	+ 'Error code '+VARCHAR(:h_return)+'.' +X'0D'
	+ 'Please contact I.M. immediately. Process cannot continue.'
  WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

REDISPLAY;

/*----------------------------------------------------------------------
    Highlights any changed fields for easy on-screen reference.
----------------------------------------------------------------------*/

IF minimum_change != l_minimum_change
THEN
  SET_FORMS FIELD val_gates_3c_fr (intensity(minimum_change)=1);
ENDIF;

IF maximum_value  != l_maximum_value
THEN
  SET_FORMS FIELD val_gates_3c_fr (intensity(maximum_value)=1);
ENDIF;

IF increase != l_increase
THEN
  SET_FORMS FIELD val_gates_3c_fr (intensity(increase)=1);
  SET_FORMS FIELD val_gates_3c_fr (intensity(spacer_3c)=1);
ENDIF;

IF decrease != l_decrease
THEN
  SET_FORMS FIELD val_gates_3c_fr (intensity(decrease)=1);
  SET_FORMS FIELD val_gates_3c_fr (intensity(spacer_5c)=1);
ENDIF;


IF uv_increase != l_uv_increase
THEN
  SET_FORMS FIELD val_gates_3c_fr (intensity(uv_increase)=1);
  SET_FORMS FIELD val_gates_3c_fr (intensity(spacer_3d)=1);
ENDIF;

IF uv_decrease != l_uv_decrease
THEN
  SET_FORMS FIELD val_gates_3c_fr (intensity(uv_decrease)=1);
  SET_FORMS FIELD val_gates_3c_fr (intensity(spacer_5d)=1);
ENDIF;

IF sph_increase != l_sph_increase
THEN
  SET_FORMS FIELD val_gates_3c_fr (intensity(sph_increase)=1);
  SET_FORMS FIELD val_gates_3c_fr (intensity(spacer_3e)=1);
ENDIF;

IF sph_decrease != l_sph_decrease
THEN
  SET_FORMS FIELD val_gates_3c_fr (intensity(sph_decrease)=1);
  SET_FORMS FIELD val_gates_3c_fr (intensity(spacer_5e)=1);
ENDIF;

IF key_minimum_change != l_key_minimum_change
THEN
  SET_FORMS FIELD val_gates_3c_fr (intensity(key_minimum_change)=1);
ENDIF;

IF key_maximum_value != l_key_maximum_value
THEN
  SET_FORMS FIELD val_gates_3c_fr (intensity(key_maximum_value)=1);
ENDIF;

IF key_increase != l_key_increase
THEN
  SET_FORMS FIELD val_gates_3c_fr (intensity(key_increase)=1);
  SET_FORMS FIELD val_gates_3c_fr (intensity(spacer_3a)=1);
ENDIF;

IF key_decrease != l_key_decrease
THEN
  SET_FORMS FIELD val_gates_3c_fr (intensity(key_decrease)=1);
  SET_FORMS FIELD val_gates_3c_fr (intensity(spacer_5a)=1);
ENDIF;

IF key_uv_increase != l_key_uv_increase
THEN
  SET_FORMS FIELD val_gates_3c_fr (intensity(key_uv_increase)=1);
  SET_FORMS FIELD val_gates_3c_fr (intensity(spacer_3b)=1);
ENDIF;

IF key_uv_decrease != l_key_uv_decrease
THEN
  SET_FORMS FIELD val_gates_3c_fr (intensity(key_uv_decrease)=1);
  SET_FORMS FIELD val_gates_3c_fr (intensity(spacer_5b)=1);
ENDIF;

IF new_uv_range_from != l_new_uv_range_from
THEN
  SET_FORMS FIELD val_gates_3c_fr (intensity(new_uv_range_from)=1);
ENDIF;

IF new_uv_range_to != l_new_uv_range_to
THEN
  SET_FORMS FIELD val_gates_3c_fr (intensity(new_uv_range_to)=1);
ENDIF;

IF new_sph_range_from != l_new_sph_range_from
THEN
  SET_FORMS FIELD val_gates_3c_fr (intensity(new_sph_range_from)=1);
ENDIF;

IF new_sph_range_to   != l_new_sph_range_to
THEN
  SET_FORMS FIELD val_gates_3c_fr (intensity(new_sph_range_to)=1);
ENDIF;


REDISPLAY;

END

/*=======================================================================
   FRSKEY4: Accept proposal - Following confirmation of intent,
	    asks for comments, updates credibility changes table with
            comments, user name, datestamp and new status. Then updates
	    live credibility table with accepted values.
======================================================================*/

'Accept', KEY FRSKEY4 = 
BEGIN

h_confirm = PROMPT 'WARNING: You are about to accept a credibility change '
                 + 'proposal'+X'0D' 
                 + '         for question '+VARCHAR(:question) +'.'+X'0D' 
                 + '         Please confirm this is what you intend. [Y/N] >'
		 WITH STYLE = POPUP;

h_confirm = UPPER(:h_confirm);

IF h_confirm != 'Y'
THEN
  RESUME;
ENDIF;

/*----------------------------------------------------------------------
     Calls popup comments box for up to 250 characters of note
----------------------------------------------------------------------*/
h_comments = ' ';

h_return = CALLFRAME val_gates_3d_fr (p_comments = BYREF(:h_comments));

IF h_return != 0 
THEN
  MESSAGE 'SYSTEM ERROR: Failed during call to val_gates_3d_fr.'+X'0D'
	+ 'Error code ' +VARCHAR(:h_return) +'. '
	+ 'Please contact I.M. immediately.'
  WITH STYLE = POPUP;
ENDIF;

/*----------------------------------------------------------------------
     Updates credibility_changes for the last time.             
----------------------------------------------------------------------*/

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_max       = 100;

WHILE :h_retries < h_retries_max AND :h_retry_or_not = 'RETRY'
DO

  MESSAGE '                 Updating credibility changes, please wait...';

  h_retries = :h_retries + 1;

  UPDATE credibility_changes
     SET finalised    = :msa_date,
	 finalised_by = :g_user_name,
	 comments     = :h_comments,
	 status       = 'A'
   WHERE question = :g_question_no
     AND amended  = :h_amended;

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return != 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return != 0
THEN
  MESSAGE 'SYSTEM ERROR: Failed to update credibility_changes table. '
	+ 'Error code '+VARCHAR(:h_return)+'.' +X'0D'
	+ 'Please contact I.M. immediately. Process cannot continue.'
  WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

/*----------------------------------------------------------------------
     Updates live credibility values. Horay!              
----------------------------------------------------------------------*/

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_max       = 100;

WHILE :h_retries < h_retries_max AND :h_retry_or_not = 'RETRY'
DO

  MESSAGE '                 Updating credibility values, please wait...';

  h_retries = :h_retries + 1;

  UPDATE credibility
     SET minimum_change     = :minimum_change,
         maximum_value      = :maximum_value,
         increase           = :increase,
         decrease           = :decrease ,  
         uv_increase        = :uv_increase,
         uv_decrease        = :uv_decrease,
         sph_increase       = :sph_increase,
         sph_decrease       = :sph_decrease,
         key_minimum_change = :key_minimum_change,
         key_maximum_value  = :key_maximum_value,
         key_increase       = :key_increase,    
         key_decrease       = :key_decrease,   
         key_uv_increase    = :key_uv_increase,
         key_uv_decrease    = :key_uv_decrease,
         new_uv_range_from  = :new_uv_range_from,
         new_uv_range_to    = :new_uv_range_to,
         new_sph_range_from = :new_sph_range_from,
         new_sph_range_to   = :new_sph_range_to
   WHERE question = :g_question_no;

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return != 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return != 0
THEN
  MESSAGE 'SYSTEM ERROR: Failed to update live credibility values. '
	+ 'Error code '+VARCHAR(:h_return)+'.' +X'0D'
	+ 'Please contact I.M. immediately. Process cannot continue.'
  WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

MESSAGE 'Change Proposal accepted successfully and made live.' 
WITH STYLE = POPUP;

RETURN 0;

END

/*=======================================================================
   FRSKEY5: Rejects proposal - Following confirmation of intent,
	    asks for comments, updates credibility changes table with
            comments, user name, datestamp and new status.
======================================================================*/

'Reject', KEY FRSKEY5 = 
BEGIN

h_confirm = PROMPT 'WARNING: You are about to reject a credibility change '
                 + 'proposal'+X'0D' 
                 + '         for question '+VARCHAR(:question) +'.'+X'0D' 
                 + '         Please confirm this is what you intend. [Y/N] >'
		 WITH STYLE = POPUP;

h_confirm = UPPER(:h_confirm);

IF h_confirm != 'Y'
THEN
  RESUME;
ENDIF;

/*----------------------------------------------------------------------
     Calls popup comments box for up to 250 characters of note
----------------------------------------------------------------------*/

h_comments = ' ';

h_return = CALLFRAME val_gates_3d_fr (p_comments = BYREF(:h_comments));

IF h_return != 0 
THEN
  MESSAGE 'SYSTEM ERROR: Failed during call to val_gates_3d_fr.'+X'0D'
	+ 'Error code ' +VARCHAR(:h_return) +'. '
	+ 'Please contact I.M. immediately.'
  WITH STYLE = POPUP;
ENDIF;

/*----------------------------------------------------------------------
     Updates credibility_changes for the last time.             
----------------------------------------------------------------------*/

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_max       = 100;

WHILE :h_retries < h_retries_max AND :h_retry_or_not = 'RETRY'
DO

  MESSAGE '                 Updating credibility changes, please wait...';

  h_retries = :h_retries + 1;

  UPDATE credibility_changes
     SET finalised    = :msa_date,
	 finalised_by = :g_user_name,
	 comments     = :h_comments,
	 status       = 'R'
   WHERE question = :g_question_no
     AND amended  = :h_amended;

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return != 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return != 0
THEN
  MESSAGE 'SYSTEM ERROR: Failed to update credibility changes table. '
	+ 'Error code '+VARCHAR(:h_return)+'.' +X'0D'
	+ 'Please contact I.M. immediately. Process cannot continue.'
  WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

MESSAGE 'Change Proposal rejected successfully and archived away.' 
WITH STYLE = POPUP;

RETURN 0;

END

/*=======================================================================
   FRSKEY8: Back - Returns to the previous screen with no action.
======================================================================*/

'Live Values', KEY FRSKEY8 = 
BEGIN

h_return = CALLFRAME val_gates_3ca_fr;

IF h_return !=0 THEN RETURN :h_return; ENDIF;

RESUME;

END


/*=======================================================================
   FRSKEYAlt-F1: Quickview
   ======================================================================*/

   'Quickview', KEY FRSKEY20 =
   BEGIN

   CALL APPLICATION (name = 'quickview_app', frame = 'msau_fr_select');

   RESUME MENU;

   END

/*=======================================================================
   FRSKEY12: Back - Returns to the previous screen with no action.
======================================================================*/

'No Action', KEY FRSKEY12 = 
BEGIN

RETURN 0;

END

/*=====================================================================
                              Timeout Errors
======================================================================*/

ON TIMEOUT =
BEGIN

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_max   = 3;

WHILE :h_retries < h_retries_max AND :h_retry_or_not = 'RETRY'
DO

  h_retries = :h_retries + 1;

  DELETE FROM   inter_image_params
  WHERE         user_id = :g_user_id;

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return <> 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return = 7
THEN
  EXIT;

 ELSEIF h_return = 9
 THEN
  MESSAGE 'Timeout: System error in deleting IIP record'
           WITH STYLE = POPUP;

 ELSEIF h_return = 1
 THEN
  MESSAGE 'Timeout: no IIP record could be updated'
           WITH STYLE = POPUP;

ENDIF;

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_max   = 3;

WHILE :h_retries < h_retries_max AND :h_retry_or_not = 'RETRY'
DO

  h_retries = :h_retries + 1;

  INSERT INTO error_log (
              error_time,
              error_text,
              frpr_name,
              error_code,
              user_id)
  VALUES (    'now',
              'TIMEOUT',
              :h_frpr_name,
               0,
              :g_user_id);

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return <> 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return = 7
THEN
  EXIT;

 ELSEIF h_return = 9
 THEN
   MESSAGE 'Timeout: System error inserting into error_log'
            WITH STYLE = POPUP;

 ELSEIF h_return = 1
 THEN
  MESSAGE 'Timeout: No record inserted into error_log'
           WITH STYLE = POPUP;
ENDIF;

EXIT;

END


/****************************************************************************/
/*********************** LOCAL PROCEDURES ***********************************/
/****************************************************************************/

/*===========================================================================
	      Local procedure for error checking within retry loop.
============================================================================*/

PROCEDURE lp_full_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

lp_return = CALLPROC check_inq_ing (h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = :h_retries,
                                    h_retries_allowed = :h_retries_max,
                                    h_frpr_name       = 'val_gates_1.fr');
RETURN :lp_return;

END

/*===========================================================================
	      Local procedure for basic error checking.
============================================================================*/

PROCEDURE lp_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

lp_return = CALLPROC check_inq_ing (h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = 1,
                                    h_retries_allowed = 1,
                                    h_frpr_name       = 'val_gates_1.fr');
RETURN :lp_return;

END

/*===========================================================================
	      Local procedure for dropping a table if it exists.
============================================================================*/

PROCEDURE lp_drop_table(p_table_name = CHAR(24) NOT NULL) = 

  DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT,
          lp_table  = CHAR(20) NOT NULL

BEGIN

  SELECT table_name as lp_table 
    FROM iitables
   WHERE table_name = :p_table_name
     AND table_owner = :g_user_id;

  lp_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF lp_return = 0
  THEN
    RETURN 0;
  ENDIF;

  IF lp_return > 1 
  THEN
    MESSAGE 'SYSTEM ERROR: Failed whilst selecting ' 
          +  VARCHAR(:p_table_name) + ' from iitables prior to droping, '
          + 'with error code ' + VARCHAR(:lp_return) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9;
  ENDIF;

  MODIFY :p_table_name to TRUNCATED;

  DROP TABLE :p_table_name;

  lp_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF lp_return != 0 
  THEN 
    MESSAGE 'SYSTEM ERROR: Unable to drop ' + VARCHAR(:p_table_name) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9; 
  ENDIF;

  RETURN 0;

END



















