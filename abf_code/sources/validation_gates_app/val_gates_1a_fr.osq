
INITIALIZE () =

DECLARE h_retries_allowed = INTEGER1 NOT NULL,
        h_retries         = INTEGER1 NOT NULL,
        h_retry_or_not    = CHAR(5) NOT NULL,
        h_return           = INTEGER1 NOT NULL,
        h_exit            = CHAR(1) NOT NULL,
        h_dummy           = INTEGER4 NOT NULL,
        h_frpr_name       = VARCHAR(24) NOT NULL,

        lp_validate_industry_no = PROCEDURE RETURNING INTEGER,
        lp_validate_question_no = PROCEDURE RETURNING INTEGER,
        lp_error_check          = PROCEDURE RETURNING INTEGER,
        lp_full_error_check     = PROCEDURE RETURNING INTEGER
{

SET_FORMS FRS (TIMEOUT = gc_timeout);

h_frpr_name = 'val_gates_1a_fr';
msa_date = 'now';
question_no = 0;
industry_no = 0;

/*----------------------------------------------------------------------
     Access check. (Error messages handled by procedure.)
----------------------------------------------------------------------*/

h_return = CALLPROC check_access_frames (p_frpr_name = :h_frpr_name);

IF h_return = 1
THEN
  RETURN 0;
ELSEIF h_return > 1
THEN
  RETURN 9;
ENDIF;

RESUME FIELD industry_no;

}

/*=======================================================================
   FRSKEY4: Go - decides which field has been completed, completes
    (F11)        the globals, then routes to 1b or 1c as appropriate.
======================================================================*/

'Go', KEY FRSKEY4 = 
BEGIN

IF question_no != 0
THEN
 
 /*------------------------------------------------------------------
	 Validating the given question number.
 -------------------------------------------------------------------*/

  h_return = CALLPROC lp_validate_question_no;

  IF h_return = 1
  THEN
    MESSAGE 'ERROR: That is not a valid question number. ' 
	  + 'Please try again.' 
             WITH STYLE = POPUP;
    RESUME FIELD question_no;
  ENDIF;

  IF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed whilst validating question number. ' 
	  + 'Error code ' + VARCHAR(:h_return) +'.' +X'0D'
	  + 'Please contact I.M. Immediately.'
	     WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  g_question_no = :question_no;

 /*------------------------------------------------------------------
	 Using valid question number to set industry number global.
 -------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;
  h_retries_allowed   = 3;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT question_industry AS g_industry_no
      FROM question_library
     WHERE question = :g_question_no
       AND period   = (SELECT MAX(period)
       		         FROM question_library
		        WHERE question = :g_question_no);

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return <> 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 7
  THEN
    EXIT;

   ELSEIF h_return = 9
   THEN
    MESSAGE 'SYSTEM ERROR: Failed whilst setting g_industry_no.' +X'0D'
  	  + '              Error code 9. Please contact I.M. immediately.'
    WITH STYLE = POPUP;
    RETURN 9;   

   ELSEIF h_return = 1
   THEN
    MESSAGE 'ERROR: Unable to set g_industry_no using question_library.' +X'0D'
  	  + '       Error code 1. Please contact I.M. immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
	As industry and question number are both known, routes to 1c.
  -------------------------------------------------------------------*/

  h_return = CALLFRAME val_gates_1c_fr;

 ELSEIF industry_no != 0
 THEN

  /*------------------------------------------------------------------
	 Validating the given industry number.
  -------------------------------------------------------------------*/

  h_return = CALLPROC lp_validate_industry_no;

  IF h_return = 1
  THEN
    MESSAGE 'ERROR: That is not a valid industry number. ' 
	  + 'Please try again.' 
             WITH STYLE = POPUP;
    RESUME FIELD industry_no;
  ENDIF;

  IF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed whilst validating industry number. ' 
	  + 'Error code ' + VARCHAR(:h_return) +'.' +X'0D'
	  + 'Please contact I.M. Immediately.'
	     WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  g_industry_no = :industry_no;

  /*---------------------------------------------------------------------
     As only industry number is known, routes to 1b to get question no.
  ----------------------------------------------------------------------*/

  h_return = CALLFRAME val_gates_1b_fr;

 ELSE
  /*---------------------------------------------------------------------
       Deals with premature F11 key press.                              
  ----------------------------------------------------------------------*/

  MESSAGE 'Please enter either a question number or an industry '
	+ 'number before hitting "Go".'
  WITH STYLE = POPUP;
  RESUME FIELD industry_no;
ENDIF;
  
/*---------------------------------------------------------------------
    Deals with the h_return coming back from either 1b or 1c.
----------------------------------------------------------------------*/

IF h_return != 0 THEN EXIT; ENDIF;

msa_date = 'now';
question_no = 0;
industry_no = 0;
RESUME FIELD industry_no;

END

/*=======================================================================
   FRSKEY6: (F12) Back - Returns to the val gate menu.                    
======================================================================*/

'Back', KEY FRSKEY12 = 
BEGIN
  RETURN 0;
END

/*=====================================================================
                              Timeout Errors
======================================================================*/

ON TIMEOUT =
BEGIN

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_allowed   = 3;

WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
DO

  h_retries = :h_retries + 1;

  DELETE FROM   inter_image_params
  WHERE         user_id = :g_user_id;

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return <> 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return = 7
THEN
  EXIT;

 ELSEIF h_return = 9
 THEN
  MESSAGE 'Timeout: System error in deleting IIP record'
           WITH STYLE = POPUP;

 ELSEIF h_return = 1
 THEN
  MESSAGE 'Timeout: no IIP record could be updated'
           WITH STYLE = POPUP;

ENDIF;

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_allowed   = 3;

WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
DO

  h_retries = :h_retries + 1;

  INSERT INTO error_log (
              error_time,
              error_text,
              frpr_name,
              error_code,
              user_id)
  VALUES (    'now',
              'TIMEOUT',
              :h_frpr_name,
               0,
              :g_user_id);

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return <> 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return = 7
THEN
  EXIT;

 ELSEIF h_return = 9
 THEN
   MESSAGE 'Timeout: System error inserting into error_log'
            WITH STYLE = POPUP;

 ELSEIF h_return = 1
 THEN
  MESSAGE 'Timeout: No record inserted into error_log'
           WITH STYLE = POPUP;
ENDIF;

EXIT;

END


/****************************************************************************/
/*********************** LOCAL PROCEDURES ***********************************/
/****************************************************************************/

/*===========================================================================
	      Local procedure for error checking within retry loop.
============================================================================*/

PROCEDURE lp_full_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

lp_return = CALLPROC check_inq_ing ( h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = :h_retries,
                                    h_retries_allowed = :h_retries_allowed,
                                    h_frpr_name       = 'val_gates_1.fr');
RETURN :lp_return;

END

/*===========================================================================
	      Local procedure for basic error checking.
============================================================================*/

PROCEDURE lp_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

lp_return = CALLPROC check_inq_ing ( h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = 1,
                                    h_retries_allowed = 1,
                                    h_frpr_name       = 'val_gates_1.fr');
RETURN :lp_return;

END

/*===========================================================================
	      Local procedure for validating industry number. 
============================================================================*/

PROCEDURE lp_validate_industry_no () =

DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT,
        lp_dummy  = INTEGER4 NOT NULL WITH DEFAULT,

BEGIN

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;
  h_retries_allowed   = 3;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT DISTINCT question_industry AS lp_dummy
      FROM question_library
     WHERE question_industry = :industry_no;

    lp_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF lp_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF lp_return = 7
  THEN
    EXIT;
   ELSE
    RETURN :lp_return;
  ENDIF; 

END

/*===========================================================================
	      Local procedure for validating question number. 
============================================================================*/

PROCEDURE lp_validate_question_no()=

DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT,
        lp_dummy  = INTEGER4 NOT NULL WITH DEFAULT,

BEGIN

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;
  h_retries_allowed   = 3;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT DISTINCT question AS lp_dummy
      FROM question_library
     WHERE question = :question_no;

    lp_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF lp_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF lp_return = 7
  THEN
    EXIT;
   ELSE
    RETURN :lp_return;
  ENDIF; 

END
