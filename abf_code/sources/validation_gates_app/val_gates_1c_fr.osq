/******************************************************************
  Note that saved values for the on-screen variables are prefixed
  with s rather than the usual h to ensure they remain untouched.
******************************************************************/

INITIALIZE () =

DECLARE h_retries_max        = INTEGER1 NOT NULL,
        h_retries            = INTEGER1 NOT NULL,
        h_retry_or_not       = CHAR(5) NOT NULL,
        h_return             = INTEGER1 NOT NULL,
        h_exit               = CHAR(1) NOT NULL,
        h_change             = CHAR(1) NOT NULL,
        h_confirm            = CHAR(1) NOT NULL,
        h_dummy              = INTEGER4 NOT NULL,
        h_frpr_name          = VARCHAR(24) NOT NULL,

        h_question_order     = INTEGER4 NOT NULL,

        s_question           = INTEGER4 NOT NULL,
        s_minimum_change     = INTEGER4 NOT NULL,
        s_maximum_value      = INTEGER4 NOT NULL,
        s_increase           = INTEGER4 NOT NULL,
        s_decrease           = INTEGER4 NOT NULL,
        s_uv_increase        = INTEGER4 NOT NULL,
        s_uv_decrease        = INTEGER4 NOT NULL,
        s_sph_increase       = INTEGER4 NOT NULL,
        s_sph_decrease       = INTEGER4 NOT NULL,
        s_key_minimum_change = INTEGER4 NOT NULL,
        s_key_maximum_value  = INTEGER4 NOT NULL,
        s_key_increase       = INTEGER4 NOT NULL,
        s_key_decrease       = INTEGER4 NOT NULL,
        s_key_uv_increase    = INTEGER4 NOT NULL,
        s_key_uv_decrease    = INTEGER4 NOT NULL,
        s_new_uv_range_from  = FLOAT8 NOT NULL,
        s_new_uv_range_to    = FLOAT8 NOT NULL,
        s_new_sph_range_from = INTEGER4 NOT NULL,
        s_new_sph_range_to   = INTEGER4 NOT NULL,

        lp_drop_table           = PROCEDURE RETURNING INTEGER,
        lp_error_check          = PROCEDURE RETURNING INTEGER,
        lp_full_error_check     = PROCEDURE RETURNING INTEGER
{

SET_FORMS FRS (TIMEOUT = gc_timeout);

h_frpr_name = 'val_gate_1c';
h_change = 'N';
msa_date = 'now';
pending_1  = ' ';
pending_2  = ' ';  /* Needed for screen display only */

/*----------------------------------------------------------------------
    Resets all validation gate fields to editable.
----------------------------------------------------------------------*/

  SET_FORMS FIELD val_gates_1c_fr (displayonly(minimum_change)=0);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(maximum_value)=0);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(increase)=0);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(decrease)=0);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(uv_increase)=0);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(uv_decrease)=0);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(sph_increase)=0);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(sph_decrease)=0);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(key_minimum_change)=0);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(key_maximum_value)=0);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(key_increase)=0);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(key_decrease)=0);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(key_uv_increase)=0);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(key_uv_decrease)=0);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(new_uv_range_from)=0);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(new_uv_range_to)=0);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(new_sph_range_from)=0);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(new_sph_range_to)=0);

REDISPLAY;

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_max       = 3;

WHILE :h_retries < h_retries_max AND :h_retry_or_not = 'RETRY'
DO

  h_retries = :h_retries + 1;

  SELECT   question, 
           quest_order AS h_question_order,
           minimum_change,
           maximum_value,
           increase,
           decrease,
           uv_increase,
           uv_decrease,
           sph_increase,
           sph_decrease,
           key_minimum_change,
           key_maximum_value,
           key_increase,
           key_decrease,
           key_uv_increase,
           key_uv_decrease,
           new_uv_range_from,
           new_uv_range_to,
           new_sph_range_from,
           new_sph_range_to
  FROM     credibility
  WHERE    question = :g_question_no;

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return != 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return = 7
THEN
  RETURN 7;

 ELSEIF h_return > 1
  THEN
  MESSAGE 'SYSTEM ERROR: Failed to access credibility table. '
	+ 'Error code '+VARCHAR(:h_return)+'.' +X'0D'
	+ 'Please contact I.M. immediately. Process cannot continue.'
  WITH STYLE = POPUP;
  RETURN 9;

  ELSEIF h_return = 1
  THEN
  MESSAGE 'WARNING: Question ' + VARCHAR(:g_question_no) + ' does not have' +
          ' any Credibility Gates set.'
  WITH STYLE = POPUP;
  RETURN 0;
ENDIF;

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_max       = 3;

WHILE :h_retries < h_retries_max AND :h_retry_or_not = 'RETRY'
DO

  h_retries = :h_retries + 1;

  SELECT question AS h_dummy
  FROM   credibility_changes
  WHERE  question = :g_question_no
    AND status IN ('P','L');

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 0);

  IF h_return != 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return = 7
THEN
  RETURN 7;

 ELSEIF h_return > 1
  THEN
  MESSAGE 'SYSTEM ERROR: Failed to check pending on credibility table. '
	+ 'Error code '+VARCHAR(:h_return)+'.' +X'0D'
	+ 'Please contact I.M. immediately. Process cannot continue.'
  WITH STYLE = POPUP;
  RETURN 9;

  ELSEIF h_return = 1
  THEN
    pending_1 = 'CHANGE PENDING';
    pending_2 = 'CHANGE PENDING'; /* Needed for screen display only */

ENDIF;

s_minimum_change     = :minimum_change;
s_maximum_value      = :maximum_value;
s_increase           = :increase;
s_decrease           = :decrease;   
s_uv_increase        = :uv_increase;
s_uv_decrease        = :uv_decrease;
s_sph_increase       = :sph_increase;
s_sph_decrease       = :sph_decrease;
s_key_minimum_change = :key_minimum_change;
s_key_maximum_value  = :key_maximum_value;
s_key_increase       = :key_increase;    
s_key_decrease       = :key_decrease;   
s_key_uv_increase    = :key_uv_increase;
s_key_uv_decrease    = :key_uv_decrease;
s_new_uv_range_from  = :new_uv_range_from;
s_new_uv_range_to    = :new_uv_range_to;
s_new_sph_range_from = :new_sph_range_from;
s_new_sph_range_to   = :new_sph_range_to;
h_change = 'N';

/*----------------------------------------------------------------------
 Turns any non-permitted fields based on question_order to display only.
----------------------------------------------------------------------*/

IF h_question_order = 10 THEN
  SET_FORMS FIELD val_gates_1c_fr (displayonly(maximum_value)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(uv_increase)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(uv_decrease)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(key_maximum_value)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(key_uv_increase)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(key_uv_decrease)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(new_uv_range_from)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(new_uv_range_to)=1);
 ELSEIF h_question_order = 9 THEN 
  SET_FORMS FIELD val_gates_1c_fr (displayonly(maximum_value)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(uv_increase)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(uv_decrease)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(sph_increase)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(sph_decrease)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(key_maximum_value)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(key_uv_increase)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(key_uv_decrease)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(new_uv_range_from)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(new_uv_range_to)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(new_sph_range_from)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(new_sph_range_to)=1);
 ELSEIF h_question_order = 8 THEN 
  SET_FORMS FIELD val_gates_1c_fr (displayonly(uv_increase)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(uv_decrease)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(sph_increase)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(sph_decrease)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(key_uv_increase)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(key_uv_decrease)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(new_uv_range_from)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(new_uv_range_to)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(new_sph_range_from)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(new_sph_range_to)=1);
 ELSEIF h_question_order = 1 THEN
  SET_FORMS FIELD val_gates_1c_fr (displayonly(maximum_value)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(sph_increase)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(sph_decrease)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(key_maximum_value)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(new_sph_range_from)=1);
  SET_FORMS FIELD val_gates_1c_fr (displayonly(new_sph_range_to)=1);
ENDIF;

REDISPLAY;

END

/*=======================================================================
   FRSKEY4: Propose Change - If any changes made, prompts for
	    confirmation, then inserts change proposal into 
	    credibility_changes table.
======================================================================*/

'Propose Change', KEY FRSKEY4 = 
BEGIN

IF  s_minimum_change     != :minimum_change
 OR s_maximum_value      != :maximum_value
 OR s_increase           != :increase
 OR s_decrease           != :decrease   
 OR s_uv_increase        != :uv_increase
 OR s_uv_decrease        != :uv_decrease
 OR s_sph_increase       != :sph_increase
 OR s_sph_decrease       != :sph_decrease
 OR s_key_minimum_change != :key_minimum_change
 OR s_key_maximum_value  != :key_maximum_value
 OR s_key_increase       != :key_increase    
 OR s_key_decrease       != :key_decrease   
 OR s_key_uv_increase    != :key_uv_increase
 OR s_key_uv_decrease    != :key_uv_decrease
 OR s_new_uv_range_from  != :new_uv_range_from
 OR s_new_uv_range_to    != :new_uv_range_to
 OR s_new_sph_range_from != :new_sph_range_from
 OR s_new_sph_range_to   != :new_sph_range_to
THEN
  h_change = 'Y';
ENDIF;

IF h_change = 'N'
THEN
  MESSAGE 'ERROR: No change to credibility values detected.' +X'0D'
	+ '       No change proposal created.'
  WITH STYLE = POPUP;
  RESUME;
ENDIF;

IF pending_1 = 'CHANGE PENDING'
THEN
  MESSAGE 'ERROR: There is already a change proposal pending ' 
	+ 'for this question.' +X'0D'
	+ '       No change proposal created.'
  WITH STYLE = POPUP;
  RESUME;
ENDIF;

IF new_uv_range_from > :new_uv_range_to
THEN
  MESSAGE 'ERROR: New UV range incorrectly set. Please amend.' +X'0D'
	+ '       No change proposal created.'
  WITH STYLE = POPUP;
  RESUME;
ENDIF;

IF new_sph_range_from > :new_sph_range_to
THEN
  MESSAGE 'ERROR: New sph range incorrectly set. Please amend.' +X'0D'
	+ '       No change proposal created.'
  WITH STYLE = POPUP;
  RESUME;
ENDIF;

h_confirm = PROMPT 'WARNING: You are about to create a credibility change '
                 + 'proposal'+X'0D' 
                 + '         for question '+VARCHAR(:question) +'.'+X'0D' 
                 + '         Please confirm this is what you intend. [Y/N] >'
		 WITH STYLE = POPUP;

h_confirm = UPPER(:h_confirm);

IF h_confirm != 'Y'
THEN
  RESUME;
ENDIF;

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_max       = 10;

WHILE :h_retries < h_retries_max AND :h_retry_or_not = 'RETRY'
DO

  h_retries = :h_retries + 1;

  INSERT INTO   credibility_changes
         VALUES (:g_question_no,
    	         :g_industry_no,
	         'P',
	         :msa_date,
	         :g_user_name,
	         :msa_date,
	         'Still pending.',
                 :minimum_change,
                 :maximum_value,
                 :increase,
                 :decrease,   
                 :uv_increase,
                 :uv_decrease,
                 :sph_increase,
                 :sph_decrease,
                 :key_minimum_change,
                 :key_maximum_value,
                 :key_increase,    
                 :key_decrease,   
                 :key_uv_increase,
                 :key_uv_decrease,
                 :new_uv_range_from,
                 :new_uv_range_to,
                 :new_sph_range_from,
                 :new_sph_range_to,
		 ' ');

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return != 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return = 7
THEN
  RETURN 7;

 ELSEIF h_return != 0
  THEN
  MESSAGE 'SYSTEM ERROR: Failed to insert into credibility_changes table. '
	+ 'Error code '+VARCHAR(:h_return)+'.' +X'0D'
	+ 'Please contact I.M. immediately. Process cannot continue.'
  WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

MESSAGE 'Change Proposal created successfully.' WITH STYLE = POPUP;

RETURN 0;

END

/*=======================================================================
   FRSKEY12: Back - Returns to the previous screen after prompting
		    if changes have been made on screen.
======================================================================*/

'Back', KEY FRSKEY12 = 
BEGIN
IF  s_minimum_change     != :minimum_change
 OR s_maximum_value      != :maximum_value
 OR s_increase           != :increase
 OR s_decrease           != :decrease   
 OR s_uv_increase        != :uv_increase
 OR s_uv_decrease        != :uv_decrease
 OR s_sph_increase       != :sph_increase
 OR s_sph_decrease       != :sph_decrease
 OR s_key_minimum_change != :key_minimum_change
 OR s_key_maximum_value  != :key_maximum_value
 OR s_key_increase       != :key_increase    
 OR s_key_decrease       != :key_decrease   
 OR s_key_uv_increase    != :key_uv_increase
 OR s_key_uv_decrease    != :key_uv_decrease
 OR s_new_uv_range_from  != :new_uv_range_from
 OR s_new_uv_range_to    != :new_uv_range_to
 OR s_new_sph_range_from != :new_sph_range_from
 OR s_new_sph_range_to   != :new_sph_range_to
THEN
  h_change = 'Y';
ENDIF;

IF h_change = 'Y'
THEN
  h_confirm = PROMPT 'WARNING: You have changed some values on this '
                 + 'screen.' +X'0D' 
		 + 'Going back will discard these without creating a '
		 + 'change proposal.' +X'0D'
                 + 'Please confirm this is what you intend. [Y/N] >'
		 WITH STYLE = POPUP;

  h_confirm = UPPER(:h_confirm);

  IF h_confirm != 'Y'
  THEN
    RESUME;
  ENDIF;

ENDIF;

RETURN 0;

END

/*=====================================================================
                              Timeout Errors
======================================================================*/

ON TIMEOUT =
BEGIN

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_max   = 3;

WHILE :h_retries < h_retries_max AND :h_retry_or_not = 'RETRY'
DO

  h_retries = :h_retries + 1;

  DELETE FROM   inter_image_params
  WHERE         user_id = :g_user_id;

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return <> 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return = 7
THEN
  EXIT;

 ELSEIF h_return = 9
 THEN
  MESSAGE 'Timeout: System error in deleting IIP record'
           WITH STYLE = POPUP;

 ELSEIF h_return = 1
 THEN
  MESSAGE 'Timeout: no IIP record could be updated'
           WITH STYLE = POPUP;

ENDIF;

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_max   = 3;

WHILE :h_retries < h_retries_max AND :h_retry_or_not = 'RETRY'
DO

  h_retries = :h_retries + 1;

  INSERT INTO error_log (
              error_time,
              error_text,
              frpr_name,
              error_code,
              user_id)
  VALUES (    'now',
              'TIMEOUT',
              :h_frpr_name,
               0,
              :g_user_id);

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return <> 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return = 7
THEN
  EXIT;

 ELSEIF h_return = 9
 THEN
   MESSAGE 'Timeout: System error inserting into error_log'
            WITH STYLE = POPUP;

 ELSEIF h_return = 1
 THEN
  MESSAGE 'Timeout: No record inserted into error_log'
           WITH STYLE = POPUP;
ENDIF;

EXIT;

END


/****************************************************************************/
/*********************** LOCAL PROCEDURES ***********************************/
/****************************************************************************/

/*===========================================================================
	      Local procedure for error checking within retry loop.
============================================================================*/

PROCEDURE lp_full_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

lp_return = CALLPROC check_inq_ing (h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = :h_retries,
                                    h_retries_allowed = :h_retries_max,
                                    h_frpr_name       = 'val_gates_1.fr');
RETURN :lp_return;

END

/*===========================================================================
	      Local procedure for basic error checking.
============================================================================*/

PROCEDURE lp_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

lp_return = CALLPROC check_inq_ing (h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = 1,
                                    h_retries_allowed = 1,
                                    h_frpr_name       = 'val_gates_1.fr');
RETURN :lp_return;

END

/*===========================================================================
	      Local procedure for dropping a table if it exists.
============================================================================*/

PROCEDURE lp_drop_table(p_table_name = CHAR(24) NOT NULL) = 

  DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT,
          lp_table  = CHAR(20) NOT NULL

BEGIN

  SELECT table_name as lp_table 
    FROM iitables
   WHERE table_name = :p_table_name
     AND table_owner = :g_user_id;

  lp_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF lp_return = 0
  THEN
    RETURN 0;
  ENDIF;

  IF lp_return > 1 
  THEN
    MESSAGE 'SYSTEM ERROR: Failed whilst selecting ' 
          +  VARCHAR(:p_table_name) + ' from iitables prior to droping, '
          + 'with error code ' + VARCHAR(:lp_return) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9;
  ENDIF;

  MODIFY :p_table_name to TRUNCATED;

  DROP TABLE :p_table_name;

  lp_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF lp_return != 0 
  THEN 
    MESSAGE 'SYSTEM ERROR: Unable to drop ' + VARCHAR(:p_table_name) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9; 
  ENDIF;

  RETURN 0;

END



















