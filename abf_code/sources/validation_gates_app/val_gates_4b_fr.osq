INITIALIZE () =

DECLARE h_retries_allowed = INTEGER1 NOT NULL,
        h_retries         = INTEGER1 NOT NULL,
        h_retry_or_not    = CHAR(5) NOT NULL,
        h_return          = INTEGER1 NOT NULL,
        h_exit            = CHAR(1) NOT NULL,
        h_gate            = CHAR(1) NOT NULL,
        h_dummy           = INTEGER4 NOT NULL,
        h_frpr_name       = VARCHAR(24) NOT NULL,
        h_comments        = VARCHAR(250) NOT NULL,
        h_search_for      = CHAR(9) NOT NULL,
        h_search_sub      = INTEGER4 NOT NULL,
        h_rows            = INTEGER4 NOT NULL,
        h_option_no       = INTEGER1 NOT NULL,

        lp_drop_table           = PROCEDURE RETURNING INTEGER,
        lp_pop_table            = PROCEDURE RETURNING INTEGER,
        lp_error_check          = PROCEDURE RETURNING INTEGER,
        lp_full_error_check     = PROCEDURE RETURNING INTEGER
{

SET_FORMS FRS (TIMEOUT = gc_timeout);

h_frpr_name   = 'val_gates_4b_fr';
msa_date      = 'now';
g_industry_no = 0;
g_question_no = 0;
h_option_no   = 1;

/*----------------------------------------------------------------------
     Access check. (Error messages handled by procedure.)
----------------------------------------------------------------------*/

h_return = CALLPROC check_access_frames (p_frpr_name = :h_frpr_name);

IF h_return = 1
THEN
  RETURN 0;
ELSEIF h_return > 1
THEN
  RETURN 9;
ENDIF;

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_allowed   = 3;

h_return = CALLPROC lp_pop_table;

IF h_return = 1 
THEN
  RETURN 0; 

 ELSEIF h_return > 1 
 THEN 
  RETURN :h_return; 

ENDIF;

RESUME FIELD tf;

END


/*=======================================================================
   FRSKEY4: Go - Selects the question_no and finalised date from the  
		 the current row to set the globals, then routes to 4c.
======================================================================*/

'View', KEY FRSKEY4 =
BEGIN

g_finalised   = IFNULL(:tf.finalised,'now');
g_question_no = :tf.question;
g_industry_no = INTEGER(LEFT(VARCHAR(:g_question_no),5));

h_return = CALLFRAME val_gates_4c_fr(p_decision = :tf.status);

/*---------------------------------------------------------------------
   Deals with the h_return coming back from 4c.
----------------------------------------------------------------------*/

IF h_return != 0 THEN RETURN 9; ENDIF;

h_return = CALLPROC lp_pop_table;
IF h_return != 0 THEN RETURN :h_return; ENDIF;

RESUME FIELD tf;

END

/*=======================================================================
   FRSKEY5: Notes - Displays the decision's notes as a popup.  
======================================================================*/

'View Comments', KEY FRSKEY5 =
BEGIN

g_finalised   = IFNULL(:tf.finalised,'now');
g_question_no = :tf.question;
g_industry_no = INTEGER(LEFT(VARCHAR(:g_question_no),5));

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_allowed   = 3;

WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
DO

  h_retries = :h_retries + 1;

  SELECT comments AS h_comments
    FROM credibility_changes
   WHERE question = :g_question_no
     AND finalised = :g_finalised;

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return != 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return = 7
THEN
  EXIT;

 ELSEIF h_return != 0
 THEN
   MESSAGE 'SYSTEM ERROR: Unable to load comments from '
         + 'credibility_changes table.' +X'0D'
         + '              Error code ' +VARCHAR(:h_return) +'. '  
         + 'Please contact I.M. immediately'    
   WITH STYLE = POPUP;

ENDIF;

  h_return = CALLFRAME val_gates_4d_fr(p_comments = :h_comments);

/*---------------------------------------------------------------------
   Deals with the h_return coming back from 4d.
----------------------------------------------------------------------*/

IF h_return != 0 THEN RETURN 9; ENDIF;

RESUME FIELD tf;

END

/*=======================================================================
   FRSKEY8: Search - Selects first entry for given question number.
======================================================================*/

'Search', KEY FRSKEY8 = 
BEGIN

h_search_for = '';

h_search_for = PROMPT 'Enter the number of the question you want '
                    + 'to go to then press <Enter>'+X'0D'
               WITH STYLE = POPUP;

h_search_sub = 0;

IF h_search_for != '' 
THEN

  INQUIRE_FORMS TABLE '' (h_rows = DATAROWS);

  UNLOADTABLE tf
  BEGIN
    h_search_sub = :h_search_sub + 1;

    IF tf.question = :h_search_for 
    THEN
      ENDLOOP;
    ENDIF;

  END;

  IF h_search_sub >= :h_rows 
  THEN
    MESSAGE 'Question ' + :h_search_for + ' was not found on the table.'
          + ' Please check the number and try again.'
    WITH STYLE = POPUP;
   ELSE
    SCROLL tf TO :h_search_sub;
    REDISPLAY;
  ENDIF;
ENDIF;

END

/*=======================================================================
   FRSKEY9: Sort - Changes the sort order of the table.  
======================================================================*/

'Sort', KEY FRSKEY9 =
BEGIN

h_option_no = :h_option_no +1;
IF h_option_no = 4 THEN h_option_no = 1; ENDIF;

h_return = CALLPROC lp_pop_table;

IF h_return = 1 
THEN
  RETURN 0; 

 ELSEIF h_return > 1 
 THEN 
  RETURN :h_return; 

ENDIF;

RESUME FIELD tf;

END



/*=======================================================================
   FRSKEY12: Back - Returns to the val gate menu.                    
======================================================================*/

'Back', KEY FRSKEY12 = 
BEGIN
  RETURN 0;
END

/*=====================================================================
                              Timeout Errors
======================================================================*/

ON TIMEOUT =
BEGIN

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_allowed   = 3;

WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
DO

  h_retries = :h_retries + 1;

  DELETE FROM   inter_image_params
  WHERE         user_id = :g_user_id;

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return <> 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return = 7
THEN
  EXIT;

 ELSEIF h_return = 9
 THEN
  MESSAGE 'Timeout: System error in deleting IIP record'
           WITH STYLE = POPUP;

 ELSEIF h_return = 1
 THEN
  MESSAGE 'Timeout: no IIP record could be updated'
           WITH STYLE = POPUP;

ENDIF;

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_allowed   = 3;

WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
DO

  h_retries = :h_retries + 1;

  INSERT INTO error_log (
              error_time,
              error_text,
              frpr_name,
              error_code,
              user_id)
  VALUES (    'now',
              'TIMEOUT',
              :h_frpr_name,
               0,
              :g_user_id);

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return <> 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return = 7
THEN
  EXIT;

 ELSEIF h_return = 9
 THEN
   MESSAGE 'Timeout: System error inserting into error_log'
            WITH STYLE = POPUP;

 ELSEIF h_return = 1
 THEN
  MESSAGE 'Timeout: No record inserted into error_log'
           WITH STYLE = POPUP;
ENDIF;

EXIT;

END


/****************************************************************************/
/*********************** LOCAL PROCEDURES ***********************************/
/****************************************************************************/

/*===========================================================================
	      Local procedure for error checking within retry loop.
============================================================================*/

PROCEDURE lp_full_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

lp_return = CALLPROC check_inq_ing ( h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = :h_retries,
                                    h_retries_allowed = :h_retries_allowed,
                                    h_frpr_name       = 'val_gates_1.fr');
RETURN :lp_return;

END

/*===========================================================================
	      Local procedure for basic error checking.
============================================================================*/

PROCEDURE lp_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

lp_return = CALLPROC check_inq_ing ( h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = 1,
                                    h_retries_allowed = 1,
                                    h_frpr_name       = 'val_gates_1.fr');
RETURN :lp_return;

END

/*===========================================================================
	      Local procedure for dropping a table if it exists.
============================================================================*/

PROCEDURE lp_drop_table(p_table_name = CHAR(24) NOT NULL) = 

  DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT,
          lp_table  = CHAR(20) NOT NULL

BEGIN

  SELECT table_name as lp_table 
    FROM iitables
   WHERE table_name = :p_table_name
     AND table_owner = :g_user_id;

  lp_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF lp_return = 0
  THEN
    RETURN 0;
  ENDIF;

  IF lp_return > 1 
  THEN
    MESSAGE 'SYSTEM ERROR: Failed whilst selecting ' 
          +  VARCHAR(:p_table_name) + ' from iitables prior to droping, '
          + 'with error code ' + VARCHAR(:lp_return) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9;
  ENDIF;

  MODIFY :p_table_name to TRUNCATED;

  DROP TABLE :p_table_name;

  lp_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF lp_return != 0 
  THEN 
    MESSAGE 'SYSTEM ERROR: Unable to drop ' + VARCHAR(:p_table_name) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9; 
  ENDIF;

  RETURN 0;

END


/*===========================================================================
	      Local procedure for populating the table field.   
============================================================================*/

PROCEDURE lp_pop_table() = 

  DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT

BEGIN

lp_return = CALLPROC lp_drop_table (p_table_name = 'tt_valgate4');
IF lp_return != 0 THEN RETURN 9; ENDIF;

MESSAGE '                   Collecting data, please wait...';

CREATE TABLE tt_valgate4 AS
SELECT status,
       question,
       amended, 
       amended_by, 
       finalised, 
       finalised_by 
FROM   credibility_changes
WHERE  status IN ('A','R');

lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

IF lp_return = 1
THEN
  MESSAGE 'NOTE: Unable to display change proposal decisions'+X'0D'
	+ '      as no decisions have been made at this time.'
	   WITH STYLE = POPUP;
  RETURN 1;
 ELSEIF lp_return > 1
 THEN
  MESSAGE 'SYSTEM ERROR:' +X'0D'  
        + 'Failed to create tt_valgate4 on option ' +VARCHAR(:h_option_no) 
	+'. Error code ' + VARCHAR(:lp_return) +'.' +X'0D'
	+ 'Please contact I.M. immediately. '
	+ 'Exiting as process cannot continue.'
	WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

INITTABLE tf READ;
IF h_option_no = 2 THEN
  tf = SELECT status,
	      question, 
              finalised, 
              finalised_by, 
              amended, 
              amended_by 
         FROM tt_valgate4
     ORDER BY finalised, question;
  option = 'Finalised';

 ELSEIF h_option_no = 3 THEN
  tf = SELECT status,
    	      question, 
              finalised, 
              finalised_by, 
              amended, 
              amended_by 
         FROM tt_valgate4
     ORDER BY amended_by, amended, question;
     option = 'Proposer';

 ELSE
  tf = SELECT status,
  	      question, 
              finalised, 
              finalised_by, 
              amended, 
              amended_by 
         FROM tt_valgate4
     ORDER BY question, finalised;
  option = 'Question';
ENDIF;     

lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

IF lp_return != 0
THEN
  MESSAGE 'SYSTEM ERROR: ' +X'0D'
	+ 'Failed to initiate table field on option '
	+  VARCHAR(:h_option_no) + '. Error code '
	+ VARCHAR(:lp_return) +'.' +X'0D'
	+ 'Please contact I.M. immediately. Exiting as process cannot continue.'
	WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

REDISPLAY;

END

