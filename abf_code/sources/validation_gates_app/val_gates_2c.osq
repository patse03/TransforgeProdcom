INITIALIZE () =

DECLARE h_retries_allowed = INTEGER1 NOT NULL,
        h_retries         = INTEGER1 NOT NULL,
        h_retry_or_not    = CHAR(5) NOT NULL,
        h_return           = INTEGER1 NOT NULL,
        h_exit            = CHAR(1) NOT NULL,
        h_gate            = CHAR(1) NOT NULL,
        h_dummy           = INTEGER4 NOT NULL,
        h_frpr_name       = VARCHAR(24) NOT NULL,

        lp_drop_table           = PROCEDURE RETURNING INTEGER,
        lp_error_check          = PROCEDURE RETURNING INTEGER,
        lp_full_error_check     = PROCEDURE RETURNING INTEGER
{

SET_FORMS FRS (TIMEOUT = gc_timeout);

h_frpr_name = 'val_gate_2c';
msa_date = 'now';
question_no = :g_question_no;
industry_no = :g_industry_no;

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_allowed   = 3;

WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
DO

  h_retries = :h_retries + 1;

  SELECT UPPER(industry_text) AS industry_text
    FROM industry
   WHERE industry = :g_industry_no;

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return != 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return > 1
THEN
  MESSAGE 'ERRROR: Failed to select industry text from industry table.'
        + X'0D'
        + 'Error code '+VARCHAR(:h_return) + '. '
	+ 'Please contact I.M. immediately.'
           WITH STYLE = POPUP;

 ELSEIF h_return = 1
 THEN
  industry_text = '(There is an industry description missing. '      
	        + 'Please contact I.M.)'
ENDIF;

h_return = CALLPROC lp_drop_table (p_table_name = 'tt_valgate1b');
IF h_return != 0 THEN RETURN 9; ENDIF;

CREATE TABLE tt_valgate1b AS
SELECT ' ' AS gate_mark,
       a.question, 
       a.period, 
       a.brief_text
  FROM quest_library a
WHERE a.question_industry = :g_industry_no
  AND a.period   = (SELECT MAX(period)
                      FROM quest_library b
                     WHERE a.question = b.question);

h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

IF h_return = 1
THEN
  MESSAGE 'ERROR: There are no questions for this industry.'+X'0D'
	+ '       This should not be possibe. '
	+ 'Please contact I.M. immediately.'
	   WITH STYLE = POPUP;
 ELSEIF h_return > 1
 THEN
  MESSAGE 'SYSTEM ERROR: Failed to create tt_valgate1b. Error code '
	+ VARCHAR(:h_return) +'.' +X'0D'
	+ '              Please contact I.M. immediately. Exiting '+X'0D'
	+ '              as process cannot continue.'
	WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

UPDATE tt_valgate1b a
   SET gate_mark = '*'
 WHERE a.question IN (SELECT DISTINCT b.question
			FROM credibility b);

h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

IF h_return != 0
THEN
  MESSAGE 'ERROR: Failed to locate any questions in credibility table.'+X'0D'
	+ '       Error code ' +VARCHAR(:h_return) +'. ' 
	+ 'Please contact I.M. immediately.'
	   WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

UPDATE tt_valgate1b a
   SET gate_mark = 'P'
 WHERE a.question IN (SELECT DISTINCT b.question
			FROM credibility_changes b
			WHERE b.status = 'P'
			   OR b.status = 'L');

h_return = CALLPROC lp_error_check (p_num_row_ck = 0);

IF h_return > 1
THEN
  MESSAGE 'SYSTEM ERROR: Failed getting pendings from credibility table.'+X'0D'
	+ '              Error code ' +VARCHAR(:h_return) +'. ' 
	+ 'Please contact I.M. immediately.'
	   WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

REDISPLAY;

INITTABLE tf READ;

tf = SELECT gate_mark,
	    question, 
            period, 
            brief_text
       FROM tt_valgate1b;

h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

IF h_return != 0
THEN
  MESSAGE 'SYSTEM ERROR: Failed to initiate table field. Error code '
	+ VARCHAR(:h_return) +'.' +X'0D'
	+ '              Please contact I.M. immediately. Exiting '+X'0D'
	+ '              as process cannot continue.'
	WITH STYLE = POPUP;
  RETURN 9;
ENDIF;

RESUME FIELD tf;

END
/*=======================================================================
   FRSKEY4: Go - Selects the question_no from the current field   
    (F11)        to set the global, then routes to 1c.
======================================================================*/

'Go', KEY FRSKEY4 = 
BEGIN

g_question_no = :tf.question;

/*------------------------------------------------------------------
    As industry and question number are both known, routes to 1c.
-------------------------------------------------------------------*/

h_return = CALLFRAME val_gates_1c_fr; 

/*---------------------------------------------------------------------
   Deals with the h_return coming back from 1c.
----------------------------------------------------------------------*/

IF h_return != 0 THEN RETURN 9; ENDIF;

RESUME FIELD tf;

END

/*=======================================================================
   FRSKEY6: (F12) Back - Returns to the val gate menu.                    
======================================================================*/

'Back', KEY FRSKEY12 = 
BEGIN
  RETURN 0;
END

/*=====================================================================
                              Timeout Errors
======================================================================*/

ON TIMEOUT =
BEGIN

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_allowed   = 3;

WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
DO

  h_retries = :h_retries + 1;

  DELETE FROM   inter_image_params
  WHERE         user_id = :g_user_id;

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return <> 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return = 7
THEN
  EXIT;

 ELSEIF h_return = 9
 THEN
  MESSAGE 'Timeout: System error in deleting IIP record'
           WITH STYLE = POPUP;

 ELSEIF h_return = 1
 THEN
  MESSAGE 'Timeout: no IIP record could be updated'
           WITH STYLE = POPUP;

ENDIF;

h_retry_or_not      = 'RETRY';
h_retries           = 0;
h_retries_allowed   = 3;

WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
DO

  h_retries = :h_retries + 1;

  INSERT INTO error_log (
              error_time,
              error_text,
              frpr_name,
              error_code,
              user_id)
  VALUES (    'now',
              'TIMEOUT',
              :h_frpr_name,
               0,
              :g_user_id);

  h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

  IF h_return <> 7
  THEN
    h_retry_or_not = '';
  ENDIF;

ENDWHILE;

IF h_return = 7
THEN
  EXIT;

 ELSEIF h_return = 9
 THEN
   MESSAGE 'Timeout: System error inserting into error_log'
            WITH STYLE = POPUP;

 ELSEIF h_return = 1
 THEN
  MESSAGE 'Timeout: No record inserted into error_log'
           WITH STYLE = POPUP;
ENDIF;

EXIT;

END


/****************************************************************************/
/*********************** LOCAL PROCEDURES ***********************************/
/****************************************************************************/

/*===========================================================================
	      Local procedure for error checking within retry loop.
============================================================================*/

PROCEDURE lp_full_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

lp_return = CALLPROC check_inq_ing ( h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = :h_retries,
                                    h_retries_allowed = :h_retries_allowed,
                                    h_frpr_name       = 'val_gates_1.fr');
RETURN :lp_return;

END

/*===========================================================================
	      Local procedure for basic error checking.
============================================================================*/

PROCEDURE lp_error_check
	  (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT)=

DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT


BEGIN

lp_return = CALLPROC check_inq_ing ( h_num_row_ck      = :p_num_row_ck,
 				    h_commit          = 'Y',
				    h_rollback        = 'N',
				    h_retries         = 1,
                                    h_retries_allowed = 1,
                                    h_frpr_name       = 'val_gates_1.fr');
RETURN :lp_return;

END

/*===========================================================================
	      Local procedure for dropping a table if it exists.
============================================================================*/

PROCEDURE lp_drop_table(p_table_name = CHAR(24) NOT NULL) = 

  DECLARE lp_return = INTEGER4 NOT NULL WITH DEFAULT,
          lp_table  = CHAR(20) NOT NULL

BEGIN

  SELECT table_name as lp_table 
    FROM iitables
   WHERE table_name = :p_table_name
     AND table_owner = :g_user_id;

  lp_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF lp_return = 0
  THEN
    RETURN 0;
  ENDIF;

  IF lp_return > 1 
  THEN
    MESSAGE 'SYSTEM ERROR: Failed whilst selecting ' 
          +  VARCHAR(:p_table_name) + ' from iitables prior to droping, '
          + 'with error code ' + VARCHAR(:lp_return) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9;
  ENDIF;

  MODIFY :p_table_name to TRUNCATED;

  DROP TABLE :p_table_name;

  lp_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF lp_return != 0 
  THEN 
    MESSAGE 'SYSTEM ERROR: Unable to drop ' + VARCHAR(:p_table_name) + '. '
          + 'Process cannot continue so exiting.';
    RETURN 9; 
  ENDIF;

  RETURN 0;

END



















