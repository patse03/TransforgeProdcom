/*************************************************************************

  Writes process feedback to process_log.
  
  Part of a change to move generic process feedback out of error_log
  and into process specific permanent tables.

  DF 2012

***********************************************************************/

PROCEDURE write_to_process_log 
        ( p_frpr_name = VARCHAR(32) NOT NULL WITH DEFAULT,
          p_code      = INTEGER1    NOT NULL WITH DEFAULT,
          p_text      = VARCHAR(70) NOT NULL WITH DEFAULT) =

DECLARE 
          h_frpr_name = VARCHAR(32) NOT NULL WITH DEFAULT,
          h_return    = INTEGER2    NOT NULL WITH DEFAULT,
          h_table     = VARCHAR(32) NOT NULL WITH DEFAULT,
          h_top       = VARCHAR(70) NOT NULL WITH DEFAULT, 

          lp_error_check = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,

{
  h_table = :g_run_type + '_process_log';
  h_frpr_name = 'write_to_process_log';

  h_top ='********************************************************************';

  IF p_text = '*SIGNON*'
  THEN

    MODIFY :h_table TO TRUNCATED; 
    COMMIT;

    INSERT INTO :h_table 
    VALUES    ( 'now',
                0,
                0,
                :h_top,
                :p_frpr_name);

    h_return = CALLPROC lp_error_check (p_num_row_ck = 1);
    /* Call to error check generates message in error log on failure */

    RETURN; 

  ENDIF;

  IF p_text = '*SIGNOFF*'
  THEN
    p_text = :h_top;
  ENDIF;

  g_log_no = g_log_no +1;

  INSERT INTO :h_table 
  VALUES    ( 'now',
              :g_log_no,
              :p_code,
              :p_text,
              :p_frpr_name);

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);
  /* Call to error check generates message in error log on failure */

  RETURN;

}

/****************************** LOCAL PROCEDURES ******************************/

/*=======================================================================
    Local procedure to check sql for errors during sections of code that
    utilise personal temp tables. Committed, no rollback.
=======================================================================*/

PROCEDURE lp_error_check (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   l_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  l_return = CALLPROC batch_check_inq_ing 
            ( h_num_row_ck = :p_num_row_ck,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

  RETURN IFNULL(:l_return,9);

}


