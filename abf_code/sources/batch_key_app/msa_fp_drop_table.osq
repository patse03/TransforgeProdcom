/*****************************************************************************
  STANDARD PROCEDURE: Drops a table if it exists.

  Reworked to have backward compatability with old coding standard. 
  Programs should call this via a local procedure to provide error handling 
  and messages as appropriate upon the output value being returned.

  (Previously, this program was trying to use popups in batch processes!)

  Passed variables:
  [p_table]: Name of the table to be dropped. (New code standards)
  [h_table]: Name of the table to be dropped. (Legacy)

  CHANGE HISTORY

  AUG 2015 - DF - Reworked to modern coding standards.
*****************************************************************************/

PROCEDURE msa_fp_drop_table (p_table = VARCHAR(40) NOT NULL,
                             h_table = VARCHAR(40) NOT NULL) =

DECLARE 
  h_check_table     = VARCHAR(40) NOT NULL,
  h_frpr_name       = VARCHAR(24) NOT NULL,
  h_return          = INTEGER1    NOT NULL,

  lp_error_check    = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,

{
  h_frpr_name = 'msa_fp_drop_table';

  /*-------------------------------------------------------------------------
      Backward compatibility.
  -------------------------------------------------------------------------*/

  IF  p_table  = ''
  AND h_table != ''
  THEN
    p_table = :h_table;
  ENDIF;

  /*-------------------------------------------------------------------------
     Lets see if the table exists...
  -------------------------------------------------------------------------*/

  SELECT table_name AS h_check_table
  FROM   iitables
  WHERE  table_name = :p_table
    AND  table_owner = (SELECT user_name FROM iidbconstants);

  h_return = CALLPROC lp_error_check (p_num_row_ck = 0);

  IF h_return > 1
  THEN
    INSERT INTO error_log 
              ( error_time,
                error_text,
                frpr_name,
                error_code,
                user_id)
    SELECT      'now',
                'SYSTEM ERROR: Failed to select from iitables.',
                :h_frpr_name,
                 9,
                 user_name 
    FROM        iidbconstants;
    COMMIT;
    RETURN 9;

  /*-------------------------------------------------------------------------
     If it does exist, we need to drop it.
  -------------------------------------------------------------------------*/

  ELSEIF h_return = 1 
  THEN

    DROP :p_table;

    h_return = CALLPROC lp_error_check (p_num_row_ck = 1);
    
    IF h_return > 1
    THEN
      INSERT INTO error_log 
                ( error_time,
                  error_text,
                  frpr_name,
                  error_code,
                  user_id)
      SELECT      'now',
                  'SYSTEM ERROR: Failed to drop table ' +:p_table +'.',
                  :h_frpr_name,
                   9,
                   user_name 
      FROM        iidbconstants;
      COMMIT;
      RETURN 9;
    ENDIF;

  ENDIF;

  RETURN 0;
}


/****************************** LOCAL PROCEDURES ******************************/

/*=======================================================================
    Local procedure to check sql for errors during sections of code that
    utilise personal temp tables. Committed, no rollback.
=======================================================================*/

PROCEDURE lp_error_check (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   l_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  l_return = CALLPROC batch_check_inq_ing 
            ( h_num_row_ck = :p_num_row_ck,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

  RETURN IFNULL(:l_return,9);

}


