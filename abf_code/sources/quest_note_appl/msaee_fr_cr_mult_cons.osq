
INITIALIZE (

        volumes             = INTEGER1 NOT NULL,
        owner_question      = INTEGER4 NOT NULL,
        question_industry   = INTEGER4 NOT NULL,
        period              = INTEGER4 NOT NULL) =

DECLARE h_retries_allowed   = INTEGER1 NOT NULL,
        h_retries           = INTEGER1 NOT NULL,
        h_retry_or_not      = CHAR(5) NOT NULL,
        h_frpr_name         = VARCHAR(24) NOT NULL,
        h_table             = VARCHAR(24) NOT NULL,
        ret_val             = INTEGER1 NOT NULL,
        h_question_industry = INTEGER4 NOT NULL,
        h_field_name        = VARCHAR(24) NOT NULL,
        h_yesno             = CHAR(1) NOT NULL,
        h_rows              = INTEGER2 NOT NULL,
        h_display           = INTEGER1 NOT NULL,
        h_questions         = INTEGER1 NOT NULL,
        lp_load_table       = PROCEDURE RETURNING INTEGER

{
    h_retries_allowed = 3;
    h_frpr_name = 'msaee_fr_cr_mult_cons';
    h_table = 'temp_cr_mult_cons';
    form_message = '';

    MESSAGE 'Checking Data . . .';


    SET_FORMS FIELD '' (MODE(tf) = 'READ',
                        INVISIBLE(tf) = 0,
                        REVERSE(constituent_question) = 0,
                        DISPLAYONLY(constituent_question) = 0,
                        UNDERLINE(constituent_question) = 1);

    ret_val = CALLPROC msa_fp_drop_table (h_table = :h_table);
    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        CREATE TABLE :h_table (question INTEGER4 NOT NULL);

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in creating ' + :h_table
        WITH STYLE = POPUP;
        RETURN 9;

    ENDIF;

    RESUME FIELD constituent_question;

}

FIELD constituent_question =
{
    IF ASCII(:constituent_question) NOT LIKE '%1'
    THEN
        MESSAGE 'You may only link Value Questions'
        WITH STYLE = POPUP;
        RESUME FIELD constituent_question;
    ENDIF;

    MESSAGE 'Checking Question . . .';

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        SELECT question_industry AS h_question_industry
        FROM   question_library
        WHERE  question = :constituent_question
        AND    lag in(0,2,5)
        AND    period   = :period;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in accessing question_library'
        WITH STYLE = POPUP;
        RETURN 9;

    ELSEIF ret_val = 1
    THEN
        MESSAGE 'Constituent Question ' + VARCHAR(:constituent_question)
               + ' does not exist for Period ' + VARCHAR(:period)
               + ' or is not a valid lag'
        WITH STYLE = POPUP;
        RESUME FIELD constituent_question;

    ENDIF;

    IF :h_question_industry <> :question_industry
    THEN

        h_yesno = '';
        WHILE h_yesno <> 'y' AND h_yesno <> 'n'
        DO
            h_yesno = PROMPT 'The Constituent Question and the Multi' +
                             ' Question belong to different' +
                             ' Industries. Is this correct?' +
                             ' Type Y/N and press <return>'
                      WITH STYLE = POPUP;
            h_yesno = LOWERCASE(:h_yesno);
        ENDWHILE;

        IF h_yesno = 'n'
        THEN
            RESUME FIELD constituent_question;
        ENDIF;
    ENDIF;

    /*------------------------------------------------------------------
     Checks replaced question hasn't already been entered
    ------------------------------------------------------------------*/

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        SELECT question AS constituent_question
        FROM   :h_table
        WHERE  question = :constituent_question;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in accessing ' + :h_table
        WITH STYLE = POPUP;
        RETURN 9;

    ELSEIF ret_val = 0
    THEN
        MESSAGE 'This Question has already been marked as a' +
                ' Question that has been linked'
        WITH STYLE = POPUP;
        RESUME FIELD constituent_question;
    ENDIF;

    /*------------------------------------------------------------------
     Checks constituent question isn't already on the owner_question
     table as a question that's been linked to a different multi.
    ------------------------------------------------------------------*/

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        SELECT question AS constituent_question
        FROM   owner_question
        WHERE  question = :constituent_question
        AND    period = :period;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in accessing owner_question'
        WITH STYLE = POPUP;
        RETURN 9;

    ELSEIF ret_val = 0
    THEN
        MESSAGE 'This Question is already on the owner_question' +
                ' table for this Period as having been linked'
        WITH STYLE = POPUP;
        RESUME FIELD constituent_question; 
    ENDIF;

    /*------------------------------------------------------------------
     Inserts constituent questions into table.
    ------------------------------------------------------------------*/

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        INSERT INTO :h_table
        SELECT      question
        FROM        question_library
        WHERE       question = :constituent_question
        AND         period = :period;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in inserting into ' + :h_table
        WITH STYLE = POPUP;
        RETURN 9;

    ELSEIF ret_val = 1
    THEN
        MESSAGE 'No rows inserted into ' + :h_table
        WITH STYLE = POPUP;
        RETURN 9;
    ENDIF;

    ret_val = CALLPROC lp_load_table ();
    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    RESUME FIELD constituent_question;
}

'Help', KEY FRSKEY1 =
{
    HELP_FORMS(SUBJECT = 'HELP',
               FILE = :g_help + '/' + :h_frpr_name + '.hlp');

}

'Delete' =
{
    INQUIRE_FORMS FORM (h_field_name = FIELD);

    IF :h_field_name <> 'tf'
    THEN
        MESSAGE 'Please highlight the required Question'
        WITH STYLE = POPUP;
        RESUME FIELD tf;
    ENDIF;

    INQUIRE_FORMS TABLE '' (h_rows = DATAROWS(tf));

    IF :h_rows = 0
    THEN
        MESSAGE 'Please highlight the required Question'
        WITH STYLE = POPUP;
        RESUME;
    ENDIF;

    h_yesno = '';
    WHILE h_yesno <> 'y' AND h_yesno <> 'n'
    DO
        h_yesno = PROMPT 'Do you really wish to delete Question ' +
                         VARCHAR(:tf.question) + ' from the list of' +
                         ' Questions that will be linked?' +
                         ' Type Y/N and press <return>'
                  WITH STYLE = POPUP;
        h_yesno = LOWERCASE(:h_yesno);
    ENDWHILE;

    IF :h_yesno = 'n'
    THEN
        RESUME;
    ENDIF;

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        DELETE FROM :h_table
        WHERE       question = :tf.question;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in deleting from ' + :h_table
        WITH STYLE = POPUP;
        RETURN 9;

    ELSEIF ret_val = 1
    THEN
        MESSAGE 'No rows deleted from ' + :h_table
        WITH STYLE = POPUP;
        RETURN 9;
    ENDIF;

    ret_val = CALLPROC lp_load_table ();
    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    RESUME FIELD constituent_question;
}

'Go', KEY FRSKEY4 =
{
    IF h_questions < 2 
    THEN
        MESSAGE 'A Multi question should represent at least' +
                ' two constituent Questions'
        WITH STYLE = POPUP;
        RESUME FIELD constituent_question;
    ENDIF;

    /*------------------------------------------------------------------
     Insert details into owner_question table
    ------------------------------------------------------------------*/

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        INSERT INTO owner_question (
                    owner_question,
                    question,
                    period)
        SELECT      :multi_question,
                    question,
                    :period
        FROM        :h_table;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in inserting into owner_question'
        WITH STYLE = POPUP;
        RETURN 9;

    ELSEIF ret_val = 1
    THEN
        MESSAGE 'No rows inserted into owner_question'
        WITH STYLE = POPUP;
        RETURN 9;
    ENDIF;

    /*------------------------------------------------------------------
     Set lag to 2 for for all questions linked as constituents
    ------------------------------------------------------------------*/

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;


        UPDATE question_library a
        FROM   :h_table b
        SET    lag = 2
        WHERE  a.question IN (b.question, b.question + 1,
                              b.question + 3, b.question + 4,
                              b.question + 5, b.question + 7,
                              b.question + 9)
        AND    a.period = :period;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in updating question_library'
        WITH STYLE = POPUP;
        RETURN 9;

    ELSEIF ret_val = 1
    THEN
        MESSAGE 'No rows updated on question_library'
        WITH STYLE = POPUP;
        RETURN 9;
    ENDIF;

    RETURN 0;

}

'AbandonCreation', KEY FRSKEY6 =
{
    RETURN 1;
}

/*----------------------------------------------------------------------
                 L O C A L    P R O C E D U R E
----------------------------------------------------------------------*/

PROCEDURE lp_load_table () =
{

    /*------------------------------------------------------------------
     Selects table to screen - Just the value questions
    ------------------------------------------------------------------*/

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        tf =

        SELECT   question
        FROM     :h_table
        ORDER BY question;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row         = BYREF(:h_questions),
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in selecting from ' + :h_table
        WITH STYLE = POPUP;
        RETURN 9;

    ENDIF;

    RETURN 0;
}
