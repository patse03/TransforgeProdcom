/*-s--------------------------------------------------------------------
Displays list of Volumes to be selected from
--------------------------------------------------------------------e-*/

INITIALIZE (

        unit_1            = CHAR(20) NOT NULL) =

DECLARE h_retries_allowed = INTEGER1 NOT NULL,
        h_retries         = INTEGER1 NOT NULL,
        h_retry_or_not    = CHAR(5) NOT NULL,
        h_frpr_name       = VARCHAR(24) NOT NULL,
        h_prompt          = VARCHAR(20) NOT NULL,
        h_yesno           = CHAR(1) NOT NULL,
        h_record          = INTEGER2 NOT NULL,
        ret_val           = INTEGER1 NOT NULL,
        lp_load_table     = PROCEDURE RETURNING INTEGER
{
    h_retries_allowed = 3;
    h_frpr_name = 'msaee_fr_valid_volumes';

    SET_FORMS FIELD '' (MODE(tf) = 'READ');

    ret_val = CALLPROC lp_load_table();

    RESUME FIELD tf;
}

'Help', KEY FRSKEY1 =
{
    HELP_FORMS(SUBJECT = 'HELP',
               FILE = :g_help + '/' + :h_frpr_name + '.hlp');

}

'CreateNewVolume' =
{
    h_prompt = '';
    WHILE h_prompt = ''
    DO
        h_prompt = PROMPT 'Please enter the New Volume Type (maximum' +
                          ' 20 characters) or ''X'' to Exit'
                   WITH STYLE = POPUP;
    ENDWHILE;

    IF LOWERCASE(h_prompt) = 'x'
    THEN
        RESUME;
    ENDIF;

    /*------------------------------------------------------------------
      Check Volume doesn't already exist
    ------------------------------------------------------------------*/

    UNLOADTABLE tf (h_record = _RECORD)
    {
        IF LOWERCASE(:tf.volume_type) = LOWERCASE(:h_prompt)
        THEN
            MESSAGE 'This Volume Type already exists'
            WITH STYLE = POPUP;
            SCROLL tf TO h_record;
            RESUME FIELD tf;
        ENDIF;
    };

    h_yesno = '';
    WHILE h_yesno <> 'y' AND h_yesno <> 'n'
    DO
        h_yesno = PROMPT 'Do you really wish to Create the Volume' +
                         ' Type of "' + :h_prompt + '"?' +
                         ' Type Y/N and press <return>'
                  WITH STYLE = POPUP;
        h_yesno = LOWERCASE(:h_yesno);
    ENDWHILE;

    IF :h_yesno = 'n'
    THEN
        RESUME;
    ENDIF;

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        INSERT INTO valid_volumes (
                    volume_type)
        VALUES (    :h_prompt);

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error inserting into valid_volumes'
        WITH STYLE = POPUP;
        RETURN 9;

    ELSEIF ret_val = 1
    THEN
        MESSAGE 'No rows inserted into valid_volumes'
        WITH STYLE = POPUP;
        RETURN 9;
    ENDIF;

    ret_val = CALLPROC lp_load_table();
    
    UNLOADTABLE tf (h_record = _RECORD)
    {
        IF :tf.volume_type = :h_prompt
        THEN
            SCROLL tf TO h_record;
            RESUME FIELD tf;
        ENDIF;
    };
}

'SelectVolume', KEY FRSKEY4 =
{
    unit_1 = :tf.volume_type;
    RETURN 0;
}

'End', KEY FRSKEY6 =
{
    RETURN 0;
}

/*----------------------------------------------------------------------
                  L O C A L   P R O C E D U R E
----------------------------------------------------------------------*/

PROCEDURE lp_load_table () =
{

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        tf =

        SELECT   volume_type,
                 LOWERCASE(volume_type) AS lowercase_volume_type
        FROM     valid_volumes
        ORDER BY lowercase_volume_type;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in accessing valid_volumes'
        WITH STYLE = POPUP;
        RETURN 9;

    ELSEIF ret_val = 1
    THEN
        MESSAGE 'No rows loaded from valid_volumes'
        WITH STYLE = POPUP;
        RETURN 9;
    ENDIF;

    RETURN 0;
}
