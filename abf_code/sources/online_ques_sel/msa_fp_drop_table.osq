/*============================================================================
  Drops a table if it exists.
============================================================================*/

PROCEDURE msa_fp_drop_table ( h_table = VARCHAR(40) NOT NULL) =

DECLARE h_retries_allowed = INTEGER1    NOT NULL,
        h_check_table     = VARCHAR(40) NOT NULL,
        h_retries         = INTEGER1    NOT NULL,
        h_retry_or_not    = CHAR(5)     NOT NULL,
        h_frpr_name       = VARCHAR(24) NOT NULL,
        h_return          = INTEGER1    NOT NULL,
        h_return2         = INTEGER1    NOT NULL,

  lp_full_error_check = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,

{
  h_retries_allowed = 3;
  h_frpr_name = 'msa_fp_drop_table';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT table_name AS h_check_table
    FROM   iitables
    WHERE  table_name = :h_table
      AND  table_owner = (SELECT user_name FROM iidbconstants);

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 0);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return > 1
  THEN
    MESSAGE 'SYSTEM ERROR: Failed to access iitables or iidbconstants. '
          + 'Error code ' +VARCHAR(:h_return) + ' ' 
          + 'Please contact IM immediately.' 
    WITH STYLE = POPUP;

    INSERT INTO error_log 
              ( error_time,
                error_text,
                frpr_name,
                error_code,
                user_id)
	SELECT  'now',
                'Failed to access iitables or iidbconstants.',   
                :h_frpr_name,
                9,
                user_name 
	FROM    iidbconstants;
    COMMIT;

    RETURN 9;

  ELSEIF h_return = 1
  THEN

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      DROP :h_table;

      h_return2 = CALLPROC lp_full_error_check (p_num_row_ck = 1);
    
      IF h_return2 != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;
    
    IF h_return2 != 0
    THEN
      MESSAGE 'SYSTEM ERROR : Failed to drop ' + :h_table +'. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN 9;
    ENDIF;

  ENDIF;

  RETURN 0;

}

/**************************** LOCAL PROCEDURES ****************************/


/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing 
            ( h_num_row_ck      = :p_num_row_ck,
              h_commit          = 'Y',
              h_rollback        = 'N',
              h_retries         = :h_retries,
              h_retries_allowed = :h_retries_allowed,
              h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}

