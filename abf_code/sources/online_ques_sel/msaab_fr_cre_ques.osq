INITIALIZE 
 ( p_contributor_reference = CHAR(11) NOT NULL,
   p_contributor_industry  = INTEGER4 NOT NULL,
   p_period                = INTEGER4 NOT NULL)=

DECLARE 
  h_retries_allowed       = INTEGER1    NOT NULL WITH DEFAULT,
  h_retries               = INTEGER1    NOT NULL WITH DEFAULT,
  h_retry_or_not          = CHAR(5)     NOT NULL WITH DEFAULT,
  h_frpr_name             = VARCHAR(24) NOT NULL WITH DEFAULT,
  h_enterprise            = CHAR(10)    NOT NULL WITH DEFAULT,
  h_count                 = INTEGER1    NOT NULL WITH DEFAULT,
  h_question_inquiry      = INTEGER1    NOT NULL WITH DEFAULT,
  h_quarter               = INTEGER4    NOT NULL WITH DEFAULT,
  h_year                  = INTEGER1    NOT NULL WITH DEFAULT,
  h_yesno                 = CHAR(1)     NOT NULL WITH DEFAULT,
  h_return                = INTEGER2    NOT NULL WITH DEFAULT,
  h_return2               = INTEGER2    NOT NULL WITH DEFAULT,
  h_question              = INTEGER4    NOT NULL WITH DEFAULT,

  lp_full_error_check     = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,
  lp_write_to_audit_trail = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,

{
  h_frpr_name = 'msaab_fr_cre_ques';
  h_retries_allowed = 3;
}

/*************************** FIELD ACTIVATIONS ****************************/

FIELD s_question =
{
  MESSAGE 'Checking Question . . .';

  CLEAR FIELD s_brief_text;
  REDISPLAY;

  /*------------------------------------------------------------------
      Checks the specified question is a Valid Value Question for
      the required period
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT CONCAT('Brief Text = ',brief_text) AS s_brief_text
    FROM   question_library
    WHERE  question = :s_question
      AND  quest_order = 1
      AND  MOD(question,10) = 1
      AND  lag IN (0,2,5)
      AND  period = :p_period;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 1
  THEN
    MESSAGE 'WARNING: This is not a legitimate value question for ' 
          + 'period ' +VARCHAR(:p_period) +'.'
    WITH STYLE = POPUP;
    RESUME FIELD s_question;
  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to select from question library. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  REDISPLAY;

  /*------------------------------------------------------------------
    Checks that the specified question does not already exist on
    table cqpv for this contributor for this period.
  ------------------------------------------------------------------*/

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;
  h_count = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT COUNT(*) AS h_count
    FROM   cqpv
    WHERE  contributor_reference = :p_contributor_reference
      AND  question IN (:s_question, :s_question + 1, :s_question + 4)
      AND  period = :p_period;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed during check for pre-existence. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  IF :h_count != 0
  THEN
    MESSAGE 'WARNING: This question already exists for '
          + 'contributor ' +VARCHAR(:p_contributor_reference) +' '
          + 'in period ' +VARCHAR(p_period) +'.'
    WITH STYLE = POPUP;
    CLEAR FIELD ALL;
    RESUME FIELD s_question;
  ENDIF;

  h_yesno = '';

  WHILE h_yesno != 'Y' AND h_yesno != 'N'
  DO
    h_yesno = PROMPT 'CONFIRM: Do you really wish to add '
                   + 'question ' + VARCHAR(:s_question) +' ' 
                   + 'for contributor ' +VARCHAR(:p_contributor_reference) +' '
                   + 'in period ' +VARCHAR(p_period) +'? [Y/N] :'
              WITH STYLE = POPUP;
    h_yesno = UPPER(:h_yesno);
  ENDWHILE;

  IF h_yesno = 'N'
  THEN
    CLEAR FIELD ALL;
    RESUME FIELD s_question;
  ENDIF;

  /*------------------------------------------------------------------
     Insert onto cqpv
  ------------------------------------------------------------------*/

  MESSAGE 'Adding Questions . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    INSERT INTO cqpv 
              ( contributor_reference,
                quest_order,
                question,
                period,
                contributor_inquiry,
                contributor_industry,
                question_industry,
                acell,
                avalue,
                acell_type,
                aconstruction_type,
                fcell,
                fvalue,
                fcell_type,
                fconstruction_type,
                confirmation_code,
                confirmation_date,
                atypical)
    SELECT      :p_contributor_reference,
                quest_order,
                question,
                :p_period,
                14,
                :p_contributor_industry,
                question_industry,
                'N',
                0,
                '',
                0,
                'N',
                0,
                '',
                0,
                '',
                '',
                'N'
    FROM        question_library
    WHERE       period = :p_period
      AND       question IN (:s_question, :s_question + 1, :s_question + 4); 

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to insert question data into cqpv table. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  MESSAGE 'Noting creation in audit trail . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT question AS h_question
    FROM   question_library
    WHERE  period = :p_period
      AND  question IN (:s_question, :s_question + 1, :s_question + 4)
    BEGIN 

      h_return2 = CALLPROC lp_write_to_audit_trail
               ( p_contributor_reference = :p_contributor_reference,
                 p_period                = :p_period,
                 p_question              = :h_question,
                 p_code                  = 1);

      IF h_return2 != 0
      THEN
        /* Error reported by external procedure */
        RETURN 9;
      ENDIF;

    END;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to select for audit trail loop. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  MESSAGE 'SUCCESS: Value question ' + VARCHAR(:s_question) + ' '
        + 'and its associated volume questions added successfully.'
  WITH STYLE = POPUP;

  CLEAR FIELD ALL;
  RESUME FIELD s_question;

}

/**************************** KEY ACTIVATIONS *****************************/

'End', KEY FRSKEY14  =
{
  RETURN 0;
}

/**************************** LOCAL PROCEDURES ****************************/

/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing 
            ( h_num_row_ck      = :p_num_row_ck,
              h_commit          = 'Y',
              h_rollback        = 'N',
              h_retries         = :h_retries,
              h_retries_allowed = :h_retries_allowed,
              h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}

/*=======================================================================
    Local procedure to write to audit trail.
=======================================================================*/

PROCEDURE lp_write_to_audit_trail
        ( p_contributor_reference = CHAR(11)    NOT NULL WITH DEFAULT,
          p_question              = INTEGER4    NOT NULL WITH DEFAULT,
          p_period                = INTEGER4    NOT NULL WITH DEFAULT,
          p_code                  = INTEGER1    NOT NULL WITH DEFAULT,
          p_val_1                 = INTEGER4    NOT NULL WITH DEFAULT,
          p_val_2                 = INTEGER4    NOT NULL WITH DEFAULT,
          p_val_3                 = VARCHAR(20) NOT NULL WITH DEFAULT,
          p_frpr_name             = VARCHAR(36) NOT NULL WITH DEFAULT )=

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC write_to_audit_trail 
            ( p_contributor_reference = :p_contributor_reference, 
              p_question              = :p_question,
              p_period                = :p_period,
              p_code                  = :p_code, 
              p_val_1                 = :p_val_1,
              p_val_2                 = :p_val_2,
              p_val_3                 = :p_val_3,
              p_frpr_name             = :h_frpr_name);

  RETURN IFNULL(:lp_return,9);

}

