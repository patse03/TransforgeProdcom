/************************************************************************
This procedure produces a data file for SPC to print first reminders.
It has been written to work with the new industry_analysts structure and
the automated prodcom production system.

COMMAND LINE PARAMETERS:
    $IMAGES/batch_reminders_app -dprodlivedb -a 201200
    $DIMAGES/batch_reminders_app -dproddevd1 -a 201200

Where:
     201200   = data period

Feb 2013 - DF
***********************************************************************/

PROCEDURE reminders_01_pr () =

DECLARE h_return             = INTEGER1     NOT NULL,
        h_param_list         = VARCHAR(200) NOT NULL,
        h_varchar_variable   = VARCHAR(200) NOT NULL,
        h_integer_variable   = INTEGER4     NOT NULL,
        h_param1             = VARCHAR(10)  NOT NULL,
        h_frpr_name          = VARCHAR(25)  NOT NULL,
        h_text               = VARCHAR(80)  NOT NULL,
        h_temp_table_1       = VARCHAR(32)  NOT NULL,
        h_temp_table_2       = VARCHAR(32)  NOT NULL,
        h_main_table         = VARCHAR(32)  NOT NULL,
        h_period             = INTEGER4     NOT NULL,
        h_idbr_year          = INTEGER4     NOT NULL,
        h_count              = INTEGER4     NOT NULL,
        h_filename           = VARCHAR(100) NOT NULL,

       lp_drop_table  = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,
       lp_error_check = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,
{
  h_frpr_name      = 'reminders_01_pr';

  SELECT DBMSINFO('username') AS g_user_id;
  SELECT DBMSINFO('database') AS g_database;

  g_inquiry = 14;

  h_temp_table_1 = 'tt_reminders_01a';
  h_temp_table_2 = 'tt_reminders_01b';
  h_main_table = 'rem_first_c_data';

  /*----------------------------------------------------------------------
       Access check. (Error messages handled by procedure.)
  ----------------------------------------------------------------------*/
  
  h_return = CALLPROC check_access_procs (p_frpr_name = :h_frpr_name);

  IF h_return = 1 
  THEN
    RETURN 0;
  ELSEIF h_return > 1
  THEN
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
      Log start of process.
  ------------------------------------------------------------------*/

  CALLPROC write_to_process_log
         ( p_frpr_name = :h_frpr_name,
           p_code      = 0,
           p_text      = '*SIGNON*');

  CALLPROC write_to_process_log
         ( p_frpr_name = :h_frpr_name,
           p_code      = 0,
           p_text      = 'STARTING: FIRST REMINDERS PROCESS STARTING.');
  
  /*------------------------------------------------------------------
    Select the parameters from the UNIX line
  ------------------------------------------------------------------*/

  h_param_list = CALLPROC COMMANDLINEPARAMETERS();

  h_varchar_variable = SQUEEZE (h_param_list);

  h_integer_variable = LOCATE (h_varchar_variable, ' ');
  h_param1           = LEFT   (h_varchar_variable,h_integer_variable - 1);

  g_period = INT4(:h_param1);

  /*------------------------------------------------------------------
    Validating parameters
  ------------------------------------------------------------------*/
  MESSAGE '[1/14] Validating parameters...';
  SLEEP 1;

  /*...................................................................
    Select max inquiry_period as h_period, as thats what we should
    be printing forms and reminders for.
  ..................................................................*/

  SELECT  MAX(period) AS h_period
  FROM    inquiry_period
  WHERE   inquiry = 14; 

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1); 

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to select max period from inquiry period.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*...................................................................
    Checks that g_period is on the list of periods for the inquiry.
  ..................................................................*/

  SELECT period AS :g_period
  FROM   inquiry_period
  WHERE  period = :g_period
  AND    inquiry = 14;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to select period parameter from inquiry period.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*...................................................................
    Compare g_period to h_period to make sure they match.
  ..................................................................*/

  IF g_period != h_period 
  THEN
    h_text = 'ERROR: Period parameter does not match latest inquiry period.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 2,
             p_text      = :h_text);
    RETURN 9;
  ENDIF; 

  /*------------------------------------------------------------------
     Set some vaiables using using period parameter.
  ------------------------------------------------------------------*/
  MESSAGE '[2/14] Setting some variables...';
  SLEEP 1;

  h_idbr_year = :g_period + 12;

  IF g_database = 'prodlivedb'
  THEN
    h_filename = '/prodcom/live5/files/forms/rem1dets014_'
               + VARCHAR(:h_idbr_year);
  ELSE
    h_filename = '/admin/scratch/TEST_rem1dets014_'
               + VARCHAR(:h_idbr_year);
  ENDIF;

  /*--------------------------------------------------------------------------
    Drop pre-existing and then create first working table based on 
    fpr_form_c_data.
  --------------------------------------------------------------------------*/
  MESSAGE '[3/14] Creating first working table...';
  SLEEP 1;
  
  h_return = CALLPROC lp_drop_table (p_table_name = :h_temp_table_1);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to drop ' +:h_temp_table_1 +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  CREATE TABLE :h_temp_table_1
  AS
  SELECT * FROM fpr_form_c_data
  WHERE  period = :g_period;
  
  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to create ' +:h_temp_table_1 +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*--------------------------------------------------------------------------
    Modify working table to HASH structure for performance.
  --------------------------------------------------------------------------*/
  MESSAGE '[4/14] Modifying working table...';
  SLEEP 1;

  MODIFY :h_temp_table_1 TO HASH UNIQUE
  ON contributor_reference;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to modify working table ' +:h_temp_table_1 +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*--------------------------------------------------------------------------
    Delete rows for contributors that have returned forms.
  --------------------------------------------------------------------------*/
  MESSAGE '[5/14] Deleting returned forms...';
  SLEEP 1;
  
  DELETE FROM :h_temp_table_1 a
  WHERE  a.contributor_reference IN
      (  SELECT b.contributor_reference
         FROM   contributor_period b
         WHERE  a.contributor_reference = b.contributor_reference
           AND  b.period = :g_period
           AND  b.receipt_date != '');
           
  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to delete returned forms from ' 
           + :h_temp_table_1 +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*--------------------------------------------------------------------------
    Delete rows for contributors that have been deselected.
  --------------------------------------------------------------------------*/
  MESSAGE '[6/14] Deleting deselected contributors...';
  SLEEP 1;
  
  DELETE FROM :h_temp_table_1 a
  WHERE  a.contributor_reference IN
      (  SELECT b.contributor_reference
         FROM   removed_contrib_period b
         WHERE  a.contributor_reference = b.contributor_reference
           AND  b.period = :g_period);
           
  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to delete deselected from ' 
           + :h_temp_table_1 +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*--------------------------------------------------------------------------
    Delete rows for contributors that have reminders stopped.
  --------------------------------------------------------------------------*/
  MESSAGE '[7/14] Deleting stopped reminders...';
  SLEEP 1;
  
  DELETE FROM :h_temp_table_1 a
  WHERE  a.contributor_reference IN
      (  SELECT b.contributor_reference
         FROM   stop_reminder b
         WHERE  a.contributor_reference = b.contributor_reference
           AND  b.period = :g_period
           AND  b.reminder = 1);
           
  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return > 1
  THEN
    h_text = 'ERROR: Failed to delete stopped remiders from ' 
           + :h_temp_table_1 +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;
  
  /*--------------------------------------------------------------------------
    Update addresses.
  --------------------------------------------------------------------------*/
  MESSAGE '[8/14] Updating contributor addresses...';
  SLEEP 1;

  UPDATE :h_temp_table_1 a
  FROM   contributor b
  SET    add_name1      = b.add_name1,
         add_name2      = b.add_name2,
         add_name3      = b.add_name3,
         add_line1      = b.add_line1,
         add_line2      = b.add_line2,
         add_line3      = b.add_line3,
         add_line4      = b.add_line4,
         add_line5      = b.add_line5,
         add_postcode   = b.add_postcode,
         add_tradstyle1 = b.add_tradstyle1,
         add_tradstyle2 = b.add_tradstyle2,
         add_tradstyle3 = b.add_tradstyle3,
         addressee      = b.addressee
  WHERE  a.contributor_reference = b.contributor_reference;
  
  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to update address info on ' +:h_temp_table_1 +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*--------------------------------------------------------------------------
    Update analysts.
  --------------------------------------------------------------------------*/

  MESSAGE '[9/14] Updating data analysts...';
  SLEEP 1;

  UPDATE :h_temp_table_1 a
  FROM   industry_analysts b
  SET    ons_tel = '65' + b.ext
  WHERE  a.contributor_industry = b.industry
    AND  a.contributor_reference >= b.low_ref
    AND  a.contributor_reference <= b.high_ref
    AND  LEFT(b.ext,1) =1;
  
  h_return = CALLPROC lp_error_check (p_num_row_ck = 1); 
  
  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to update ' + :h_temp_table_1 +' '
           + 'with Data Analyst phone numbers prefixed 65.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  UPDATE :h_temp_table_1 a
  FROM   industry_analysts b
  SET    ons_tel = '45' + b.ext
  WHERE  a.contributor_industry = b.industry
    AND  a.contributor_reference >= b.low_ref
    AND  a.contributor_reference <= b.high_ref
    AND  LEFT(b.ext,1) != 1;
 
  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to update address info on ' +:h_temp_table_1 +'.'
           + 'with Data Analyst phone numbers prefixed 45.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*--------------------------------------------------------------------------
    Delete pre-existing data for this period then insert into main table.
  --------------------------------------------------------------------------*/
  MESSAGE '[10/14] Inserting into main table...';
  SLEEP 1;

  DELETE FROM :h_main_table
  WHERE  period = :g_period;
  
  h_return = CALLPROC lp_error_check (p_num_row_ck = 0);

  IF h_return > 1
  THEN
    h_text = 'ERROR: Failed to delete from ' +:h_main_table +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  INSERT INTO :h_main_table
  SELECT * 
  FROM   :h_temp_table_1;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to insert into ' +:h_main_table +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  SELECT COUNT(*) AS h_count
  FROM :h_main_table
  WHERE period = :g_period;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to insert into ' +:h_main_table +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ELSE
    h_text = 'NOTE: ' + VARCHAR(:h_count) +' first reminders ' 
           + 'inserted into ' +:h_main_table +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
  ENDIF;

  /*--------------------------------------------------------------------------
    Drop and create second working table. 
    (Needed for padding industry numbers and adding dummy fields.)
  --------------------------------------------------------------------------*/

  MESSAGE '[11/14] Creating second working table...';
  SLEEP 1;
  
  h_return = CALLPROC lp_drop_table (p_table_name = :h_temp_table_2);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to drop ' +:h_temp_table_2 +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  CREATE TABLE :h_temp_table_2
  AS
  SELECT DISTINCT 
         contributor_reference,
         check_letter,
         CHAR(contributor_industry) AS contributor_industry,
         legal_status AS legal_status,
         region,
         add_name1,
         add_name2,
         add_name3,
         add_line1,
         add_line2,
         add_line3,
         add_line4,
         add_line5,
         add_postcode,
         add_tradstyle1,
         add_tradstyle2,
         add_tradstyle3,
         addressee,
         inclexcl,
         formtype,
         ons_tel,
         currency,
         welsh,
         new,
         osm, 
         14 AS inquiry,
         :h_idbr_year AS period,
         '' AS str_dummy,
         0  AS int_dummy
    FROM :h_temp_table_1;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to drop ' +:h_temp_table_2 +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*--------------------------------------------------------------------------
    Pad industry numbers
  --------------------------------------------------------------------------*/

  MESSAGE '[12/14] Padding industry numbers...';
  SLEEP 1;

  UPDATE :h_temp_table_2
  SET    contributor_industry = '0' + VARCHAR(contributor_industry)
  WHERE  length(contributor_industry) = 4;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to pad industry numbers on ' +:h_temp_table_2 +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*--------------------------------------------------------------------------
    Produce file for spc.
  --------------------------------------------------------------------------*/
  MESSAGE '[13/14] Creating data file for SPC...';
  SLEEP 1;
  
  COPY TABLE :h_temp_table_2
           ( contributor_reference =  c(0)':',
             check_letter          =  c(0)':',
             str_dummy             =  c(0)':',
             str_dummy             =  c(0)':',
             str_dummy             =  c(0)':',
             contributor_industry  =  c(0)':',
             int_dummy             =  c(0)':',
             int_dummy             =  c(0)':',
             int_dummy             =  c(0)':',
             int_dummy             =  c(0)':',
             int_dummy             =  c(0)':',
             int_dummy             =  c(0)':',
             int_dummy             =  c(0)':',
             int_dummy             =  c(0)':',
             str_dummy             =  c(0)':',
             str_dummy             =  c(0)':',
             str_dummy             =  c(0)':',
             str_dummy             =  c(0)':',
             str_dummy             =  c(0)':',
             int_dummy             =  c(0)':',
             int_dummy             =  c(0)':',
             int_dummy             =  c(0)':',
             legal_status          =  c(0)':',
             str_dummy             =  c(0)':',
             region                =  c(0)':',
             str_dummy             =  c(0)':',
             str_dummy             =  c(0)':',
             str_dummy             =  c(0)':',
             str_dummy             =  c(0)':',
             add_name1             =  c(0)':',
             add_name2             =  c(0)':',
             add_name3             =  c(0)':',
             add_line1             =  c(0)':',
             add_line2             =  c(0)':',
             add_line3             =  c(0)':',
             add_line4             =  c(0)':',
             add_line5             =  c(0)':',
             add_postcode          =  c(0)':',
             add_tradstyle1        =  c(0)':',
             add_tradstyle2        =  c(0)':',
             add_tradstyle3        =  c(0)':',
             addressee             =  c(0)':',
             str_dummy             =  c(0)':',
             str_dummy             =  c(0)':',
             str_dummy             =  c(0)':',
             inclexcl              =  c(0)':',
             int_dummy             =  c(0)':',
             formtype              =  c(0)':',
             ons_tel               =  c(0)':',
             currency              =  c(0)':',
             welsh                 =  c(0)':',
             new                   =  c(0)':',
             int_dummy             =  c(0)':',
             osm                   =  c0nl)
  INTO h_filename;
  
  /*--------------------------------------------------------------------------
    Tidy up.
  --------------------------------------------------------------------------*/

  MESSAGE '[14/14] Tidying up...';
  SLEEP 1;
  
  h_return = CALLPROC lp_drop_table (p_table_name = :h_temp_table_1);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to tidy up ' +:h_temp_table_1 +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  h_return = CALLPROC lp_drop_table (p_table_name = :h_temp_table_2);

  IF h_return != 0
  THEN
    h_text = 'ERROR: Failed to tidy up ' +:h_temp_table_2 +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
      Log end of process.
  ------------------------------------------------------------------*/


  CALLPROC write_to_process_log
         ( p_frpr_name = :h_frpr_name,
           p_code      = 0,
           p_text      = 'COMPLETE: FIRST REMINDERS PROCESS COMPLETED OK.');
  
  CALLPROC write_to_process_log
         ( p_frpr_name = :h_frpr_name,
           p_code      = 0,
           p_text      = '*SIGNOFF*');

}

/*************************** LOCAL PROCEDURES *****************************/

/*=======================================================================
    Local procedure to check sql for errors during sections of code that
    utilise personal temp tables. Committed, no rollback.
=======================================================================*/

PROCEDURE lp_error_check (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing (
              h_num_row_ck = :p_num_row_ck,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

  RETURN IFNULL(:lp_return,9);

}

/*===========================================================================
	      Local procedure for dropping a table if it exists.
============================================================================*/

PROCEDURE lp_drop_table(p_table_name = CHAR(36) NOT NULL WITH DEFAULT) = 

  DECLARE lp_return = INTEGER4    NOT NULL WITH DEFAULT,
          lp_table  = CHAR(36)    NOT NULL WITH DEFAULT,
          lp_text   = VARCHAR(80) NOT NULL WITH DEFAULT

BEGIN

  SELECT table_name as lp_table 
    FROM iitables
   WHERE table_name = :p_table_name
     AND table_owner = :g_user_id;

  lp_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF lp_return = 0
  THEN
    RETURN 0;
  ENDIF;

  IF lp_return > 1 
  THEN
    lp_text = 'SYSTEM ERROR: Failed whilst selecting ' 
            +  VARCHAR(:p_table_name) + ' from iitables prior to droping, '
            + 'with error code ' + VARCHAR(:lp_return) + '.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :lp_return,
             p_text      = :lp_text);
    RETURN 9;
  ENDIF;

  MODIFY :p_table_name to TRUNCATED;

  DROP TABLE :p_table_name;

  h_return = CALLPROC lp_error_check(p_num_row_ck  = 0);

  IF h_return != 0 
  THEN 
    lp_text = 'SYSTEM ERROR: Unable to drop ' + VARCHAR(:p_table_name) + '.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :lp_return,
             p_text      = :lp_text);
    RETURN 9; 
  ENDIF;

  RETURN 0;

END



