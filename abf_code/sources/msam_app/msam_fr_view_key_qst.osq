INITIALIZE (p_contributor_reference = CHAR(11) NOT NULL WITH DEFAULT)=

DECLARE 
  h_retries_allowed     = INTEGER1    NOT NULL WITH DEFAULT,
  h_retries             = INTEGER1    NOT NULL WITH DEFAULT,
  h_retry_or_not        = CHAR(5)     NOT NULL WITH DEFAULT,
  h_frpr_name           = VARCHAR(24) NOT NULL WITH DEFAULT, 
  h_return              = INTEGER2    NOT NULL WITH DEFAULT,
  h_questions           = INTEGER4    NOT NULL WITH DEFAULT,
  h_text                = VARCHAR(3)  NOT NULL WITH DEFAULT,

  lp_full_error_check = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,

{
  h_retries_allowed = 3;
  h_frpr_name = 'msam_fr_view_key_qst';

  SET_FORMS FIELD '' (MODE(tf)='READ');

  MESSAGE 'Selecting Questions . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    tf =

    SELECT DISTINCT question_industry,
                    question
    FROM  key_responder_data
    WHERE contributor_reference = :p_contributor_reference
      AND for_period = :g_period
      AND MOD(question,10) != 2
    ORDER BY question_industry, question;
        
    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to select key questions for this key responder. '
          + 'Error code ' + VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  h_text = VARCHAR(:h_questions);

  s_title = :p_contributor_reference +' has '
          + SQUEEZE(:h_text) + 'key questions.';

  RESUME FIELD tf;

}

/**************************** KEY ACTIVATIONS *****************************/

'End', KEY FRSKEY14 =
{
  RETURN 0;
}

/**************************** LOCAL PROCEDURES ****************************/

/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing 
            ( h_num_row_ck      = :p_num_row_ck,
              h_num_row         = BYREF(h_questions),
              h_commit          = 'Y',
              h_rollback        = 'N',
              h_retries         = :h_retries,
              h_retries_allowed = :h_retries_allowed,
              h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}

