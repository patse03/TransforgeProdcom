INITIALIZE (

        inquiry           = INTEGER4 NOT NULL,
        temp_table        = VARCHAR(24) NOT NULL) =

DECLARE h_retries_allowed = INTEGER1 NOT NULL,
        h_retries         = INTEGER1 NOT NULL,
        h_retry_or_not    = CHAR(5) NOT NULL,
        h_frpr_name       = VARCHAR(24) NOT NULL,
        h_table           = VARCHAR(24) NOT NULL,
        h_category        = CHAR(1) NOT NULL,
        h_type            = CHAR(1) NOT NULL,
        h_register_emp    = INTEGER4 NOT NULL,
        h_cutoff          = INTEGER4 NOT NULL,
        h_industry        = INTEGER4 NOT NULL,
        ret_val           = INTEGER1 NOT NULL,
        s1                = INTEGER4 NOT NULL,
        s2                = INTEGER4 NOT NULL,
        s3                = INTEGER4 NOT NULL,
        s4                = INTEGER4 NOT NULL,
        s5                = INTEGER4 NOT NULL,
        s1_emp            = INTEGER4 NOT NULL,
        s2_emp            = INTEGER4 NOT NULL,
        s3_emp            = INTEGER4 NOT NULL,
        s4_emp            = INTEGER4 NOT NULL,
        s5_emp            = INTEGER4 NOT NULL,
        s1_new            = INTEGER4 NOT NULL,
        s2_new            = INTEGER4 NOT NULL,
        s3_new            = INTEGER4 NOT NULL,
        s4_new            = INTEGER4 NOT NULL,
        s5_new            = INTEGER4 NOT NULL,
        s1_new_emp        = INTEGER4 NOT NULL,
        s2_new_emp        = INTEGER4 NOT NULL,
        s3_new_emp        = INTEGER4 NOT NULL,
        s4_new_emp        = INTEGER4 NOT NULL,
        s5_new_emp        = INTEGER4 NOT NULL,
        lp_load_table     = PROCEDURE RETURNING INTEGER

{
    h_retries_allowed = 3;
    h_frpr_name = 'msam_fr_sample_rap';
    h_table = 'temp_sample2';
    form_message = 'All Contributors';
    h_type = 'A';
    msa_date = 'now';
    MESSAGE 'Selecting Data . . .';

    SET_FORMS FIELD '' (MODE(tf) = 'READ',
                        MODE(tf2) = 'READ');

    /*------------------------------------------------------------------
    Create base table to hold data
    ------------------------------------------------------------------*/

    ret_val = CALLPROC msa_fp_drop_table (
              h_table = :h_table);
    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        CREATE TABLE :h_table (
                     industry   INTEGER4 NOT NULL,
                     cutoff     INTEGER4 NOT NULL,
                     s_type     CHAR(1) NOT NULL,
                     s1         INTEGER4 NOT NULL,
                     s1_emp     INTEGER4 NOT NULL,
                     s2         INTEGER4 NOT NULL,
                     s2_emp     INTEGER4 NOT NULL,
                     s3         INTEGER4 NOT NULL,
                     s3_emp     INTEGER4 NOT NULL,
                     s4         INTEGER4 NOT NULL,
                     s4_emp     INTEGER4 NOT NULL,
                     s5         INTEGER4 NOT NULL,
                     s5_emp     INTEGER4 NOT NULL);

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in creating ' + :h_table
        WITH STYLE = POPUP;
        RETURN 9;

    ELSEIF ret_val = 1
    THEN
        MESSAGE 'No rows created on ' + :h_table
        WITH STYLE = POPUP;
        RETURN 9;
    ENDIF;

    /*------------------------------------------------------------------
    One industry at a time
    ------------------------------------------------------------------*/

    SELECT   a.industry AS h_industry,
             b.emp_cutoff AS h_cutoff
    FROM     :temp_table a,
             industry_period b
    WHERE    a.industry = b.industry
    AND      b.period = :period
    ORDER BY h_industry
    {

        MESSAGE 'Processing Industry ' +
                VARCHAR(:h_industry) + ' . . .';

        s1 = 0;
        s2 = 0;
        s3 = 0;
        s4 = 0;
        s5 = 0;
        s1_emp = 0;
        s2_emp = 0;
        s3_emp = 0;
        s4_emp = 0;
        s5_emp = 0;
        s1_new = 0;
        s2_new = 0;
        s3_new = 0;
        s4_new = 0;
        s5_new = 0;
        s1_new_emp = 0;
        s2_new_emp = 0;
        s3_new_emp = 0;
        s4_new_emp = 0;
        s5_new_emp = 0;

        SELECT register_emp AS h_register_emp,
               output_category AS h_category
        FROM   contributor_period
        WHERE  contributor_industry = :h_industry
        AND    period = :period
        AND    inquiry = :inquiry
        {
            IF h_category = 'C' OR h_category = 'G' OR h_category = 'W'
            THEN
                IF h_register_emp <= 9
                THEN
                    s1_new = s1_new + 1;
                    s1_new_emp = s1_new_emp + h_register_emp;
                ELSEIF h_register_emp <= 19
                THEN
                    s2_new = s2_new + 1;
                    s2_new_emp = s2_new_emp + h_register_emp;
                ELSEIF h_register_emp <= 49
                THEN
                    s3_new = s3_new + 1;
                    s3_new_emp = s3_new_emp + h_register_emp;
                ELSEIF h_register_emp <= 99
                THEN
                    s4_new = s4_new + 1;
                    s4_new_emp = s4_new_emp + h_register_emp;
                ELSE
                    s5_new = s5_new + 1;
                    s5_new_emp = s5_new_emp + h_register_emp;
                ENDIF;

            ENDIF;

            IF h_register_emp <= 9
            THEN
                s1 = s1 + 1;
                s1_emp = s1_emp + h_register_emp;
            ELSEIF h_register_emp <= 19
            THEN
                s2 = s2 + 1;
                s2_emp = s2_emp + h_register_emp;
            ELSEIF h_register_emp <= 49
            THEN
                s3 = s3 + 1;
                s3_emp = s3_emp + h_register_emp;
            ELSEIF h_register_emp <= 99
            THEN
                s4 = s4 + 1;
                s4_emp = s4_emp + h_register_emp;
            ELSE
                s5 = s5 + 1;
                s5_emp = s5_emp + h_register_emp;
            ENDIF;

        };

        /*--------------------------------------------------------------
        Insert the TOTALS and the NEWS
        --------------------------------------------------------------*/

        h_retry_or_not      = 'RETRY';
        h_retries           = 0;

        WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
        DO

            h_retries = :h_retries + 1;

            INSERT INTO :h_table (
                        industry,
                        cutoff,
                        s_type,
                        s1,
                        s1_emp,
                        s2,
                        s2_emp,
                        s3,
                        s3_emp,
                        s4,
                        s4_emp,
                        s5,
                        s5_emp)
            VALUES (    :h_industry,
                        :h_cutoff,
                        'A',
                        :s1,
                        :s1_emp,
                        :s2,
                        :s2_emp,
                        :s3,
                        :s3_emp,
                        :s4,
                        :s4_emp,
                        :s5,
                        :s5_emp);

            ret_val = CALLPROC check_inq_ing (
                      h_num_row_ck      = 1,
                      h_commit          = 'Y',
                      h_rollback        = 'N',
                      h_retries         = :h_retries,
                      h_retries_allowed = :h_retries_allowed,
                      h_frpr_name       = :h_frpr_name);

            IF ret_val <> 7
            THEN
                h_retry_or_not = '';
            ENDIF;

        ENDWHILE;

        IF ret_val = 7
        THEN
            RETURN 7;

        ELSEIF ret_val = 9
        THEN
            MESSAGE 'System error inserting into ' + :h_table
            WITH STYLE = POPUP;
            RETURN 9;

        ELSEIF ret_val = 1
        THEN
            MESSAGE 'No rows inserted into ' + :h_table
            WITH STYLE = POPUP;
            RETURN 9;
        ENDIF;

        h_retry_or_not      = 'RETRY';
        h_retries           = 0;

        WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
        DO

            h_retries = :h_retries + 1;

            INSERT INTO :h_table (
                        industry,
                        cutoff,
                        s_type,
                        s1,
                        s1_emp,
                        s2,
                        s2_emp,
                        s3,
                        s3_emp,
                        s4,
                        s4_emp,
                        s5,
                        s5_emp)
            VALUES (    :h_industry,
                        :h_cutoff,
                        'N',
                        :s1_new,
                        :s1_new_emp,
                        :s2_new,
                        :s2_new_emp,
                        :s3_new,
                        :s3_new_emp,
                        :s4_new,
                        :s4_new_emp,
                        :s5_new,
                        :s5_new_emp);

            ret_val = CALLPROC check_inq_ing (
                      h_num_row_ck      = 1,
                      h_commit          = 'Y',
                      h_rollback        = 'N',
                      h_retries         = :h_retries,
                      h_retries_allowed = :h_retries_allowed,
                      h_frpr_name       = :h_frpr_name);

            IF ret_val <> 7
            THEN
                h_retry_or_not = '';
            ENDIF;

        ENDWHILE;

        IF ret_val = 7
        THEN
            RETURN 7;

        ELSEIF ret_val = 9
        THEN
            MESSAGE 'System error inserting ' + :h_table
            WITH STYLE = POPUP;
            RETURN 9;

        ELSEIF ret_val = 1
        THEN
            MESSAGE 'No rows inserted into ' + :h_table
            WITH STYLE = POPUP;
            RETURN 9;
        ENDIF;

    };

    ret_val = CALLPROC check_inq_ing (
              h_num_row_ck      = 1,
              h_commit          = 'Y',
              h_rollback        = 'N',
              h_frpr_name       = :h_frpr_name);

    IF ret_val = 9
    THEN
        MESSAGE 'System error in select loop'
        WITH STYLE = POPUP;
        RETURN 9;
    ENDIF;

    ret_val = CALLPROC lp_load_table ();
    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

}

'Help', KEY FRSKEY1 =
{
    HELP_FORMS(SUBJECT = 'HELP',
               FILE = :g_help + '/' + :h_frpr_name + '.hlp');

}

'AllOrNew' =
{
    IF form_message = 'All Contributors'
    THEN
        form_message = 'New Contributors';
        h_type = 'N';
    ELSE
        form_message = 'All Contributors';
        h_type = 'A';
    ENDIF;

    ret_val = CALLPROC lp_load_table ();
    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;
}

'Print' =
{
    MESSAGE 'Preparing Report . . .';
    msa_date = 'now';

    ret_val = CALLPROC msa_cp_callsys (
              'report ' +
              :g_database +
              ' ''(h_table = "' + :h_table + '"' +
              ',user_name = "' + :g_user_name + '"' +
              ',period = ' + VARCHAR(:period) +
              ',h_type = "' + :h_type + '"' +
              ')'' -i$REPORTS/msam_rw_sample_rap.rw' +
              ' > report.output 2> report.output');

    IF ret_val <> 0
    THEN
        MESSAGE 'Error producing report'
        WITH STYLE = POPUP;
    ELSE
        /*--------------------------------------------------------------
         Remove last line - so a blank end page is not printed
        --------------------------------------------------------------*/

        ret_val = CALLPROC msa_cp_callsys (
              'lines=`wc -l < msam_rw_sample_rap.rpt`;' +
              'lines=`expr ${lines} - 1`;' +
              'head -${lines} msam_rw_sample_rap.rpt | ' +
              'lp -o16l -d' + :g_printer +
              ' >> report.output 2>> report.output');

        IF ret_val <> 0
        THEN
            MESSAGE 'Error sending report to printer ' +
                    :g_printer
            WITH STYLE = POPUP;
        ELSE
            MESSAGE 'Report sent to printer ' +
                    :g_printer + ' OK'
            WITH STYLE = POPUP;
        ENDIF;
    ENDIF;
}

'End', KEY FRSKEY6 =
{
    MESSAGE 'Exiting Sample Allocation Screen . . .';
    ret_val = CALLPROC msa_fp_drop_table (
              h_table = :h_table);

    RETURN 0;
}

/*----------------------------------------------------------------------
                   L O C A L   P R O C E D U R E
----------------------------------------------------------------------*/

PROCEDURE lp_load_table () =
{
    MESSAGE 'Selecting to Screen . . .';

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        tf =

        SELECT   industry,
                 cutoff,
                 s1,
                 s1_emp,
                 s2,
                 s2_emp,
                 s3,
                 s3_emp,
                 s4,
                 s4_emp,
                 s5,
                 s5_emp,
                 s1 + s2 + s3 + s4 + s5 AS total,
                 s1_emp + s2_emp + s3_emp + s4_emp + s5_emp AS total_emp
        FROM     :h_table
        WHERE    s_type = :h_type
        ORDER BY industry;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error loading from ' + :h_table
        WITH STYLE = POPUP;
        RETURN 9;

    ELSEIF ret_val = 1
    THEN
        MESSAGE 'No rows loaded from ' + :h_table
        WITH STYLE = POPUP;
        RETURN 9;
    ENDIF;

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        tf2 =

        SELECT   'TOTAL' AS title,
                 SUM(s1) AS s1,
                 SUM(s1_emp) AS s1_emp,
                 SUM(s2) AS s2,
                 SUM(s2_emp) AS s2_emp,
                 SUM(s3) AS s3,
                 SUM(s3_emp) AS s3_emp,
                 SUM(s4) AS s4,
                 SUM(s4_emp) AS s4_emp,
                 SUM(s5) AS s5,
                 SUM(s5_emp) AS s5_emp,
                 SUM(s1) + SUM(s2) + SUM(s3) + SUM(s4) + SUM(s5) AS total,
                 SUM(s1_emp) + SUM(s2_emp) + SUM(s3_emp) +
                 SUM(s4_emp) + SUM(s5_emp) AS total_emp
        FROM     :h_table
        WHERE    s_type = :h_type;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error loading total from ' + :h_table
        WITH STYLE = POPUP;
        RETURN 9;

    ELSEIF ret_val = 1
    THEN
        MESSAGE 'No total rows loaded from ' + :h_table
        WITH STYLE = POPUP;
        RETURN 9;
    ENDIF;
    msa_date = 'now';
    RETURN 0;
}
