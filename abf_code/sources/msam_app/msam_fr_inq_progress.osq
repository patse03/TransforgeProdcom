/*****************************************************************************
  Response rates for 3 periods
*****************************************************************************/

INITIALIZE (p_table = VARCHAR(32) NOT NULL WITH DEFAULT) =

DECLARE 
  h_retries_allowed   = INTEGER1    NOT NULL WITH DEFAULT,
  h_retries           = INTEGER1    NOT NULL WITH DEFAULT,
  h_retry_or_not      = CHAR(5)     NOT NULL WITH DEFAULT,
  h_frpr_name         = VARCHAR(24) NOT NULL WITH DEFAULT,
  h_return            = INTEGER1    NOT NULL WITH DEFAULT,
  h_counter           = INTEGER1    NOT NULL WITH DEFAULT,
  h_max_week          = INTEGER1    NOT NULL WITH DEFAULT,
  h_period            = INTEGER4    NOT NULL WITH DEFAULT,
  h_period1           = INTEGER4    NOT NULL WITH DEFAULT,
  h_period2           = INTEGER4    NOT NULL WITH DEFAULT,
  h_period3           = INTEGER4    NOT NULL WITH DEFAULT,
  h_p1emp             = INTEGER4    NOT NULL WITH DEFAULT,
  h_p1frm             = INTEGER4    NOT NULL WITH DEFAULT,
  h_p2emp             = INTEGER4    NOT NULL WITH DEFAULT,
  h_p2frm             = INTEGER4    NOT NULL WITH DEFAULT,
  h_p3emp             = INTEGER4    NOT NULL WITH DEFAULT,
  h_p3frm             = INTEGER4    NOT NULL WITH DEFAULT,
  h_p1recfrmtot       = INTEGER4    NOT NULL WITH DEFAULT,
  h_p1recemptot       = INTEGER4    NOT NULL WITH DEFAULT,
  h_p2recfrmtot       = INTEGER4    NOT NULL WITH DEFAULT,
  h_p2recemptot       = INTEGER4    NOT NULL WITH DEFAULT,
  h_p3recfrmtot       = INTEGER4    NOT NULL WITH DEFAULT,
  h_p3recemptot       = INTEGER4    NOT NULL WITH DEFAULT,
  h_p1clrfrmtot       = INTEGER4    NOT NULL WITH DEFAULT,
  h_p1clremptot       = INTEGER4    NOT NULL WITH DEFAULT,
  h_p2clrfrmtot       = INTEGER4    NOT NULL WITH DEFAULT,
  h_p2clremptot       = INTEGER4    NOT NULL WITH DEFAULT,
  h_p3clrfrmtot       = INTEGER4    NOT NULL WITH DEFAULT,
  h_p3clremptot       = INTEGER4    NOT NULL WITH DEFAULT,
  h_reg_emp           = INTEGER4    NOT NULL WITH DEFAULT,
  h_rweek             = INTEGER1    NOT NULL WITH DEFAULT,
  h_cweek             = INTEGER1    NOT NULL WITH DEFAULT,
  h_receipt_date      = DATE        NOT NULL WITH DEFAULT,
  h_correct_date      = DATE        NOT NULL WITH DEFAULT,
  h_table             = VARCHAR(20) NOT NULL WITH DEFAULT,

  lp_full_error_check = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,

  arr                 = ARRAY OF TYPE OF TABLE FIELD tf

{
  SELECT DBMSINFO('username') AS g_user_id;
  SELECT DBMSINFO('database') AS g_database;

  h_frpr_name       = 'msam_fr_inq_progress';
  h_table           = 'tt_overall_progress';
  h_retries_allowed = 3;

  s_title = 'YEAR ON YEAR COMPARISON AT WEEK ' +VARCHAR(:g_week) +'.';

  SET_FORMS FIELD '' (MODE(tf) = 'READ');

  /*----------------------------------------------------------------------
       Access check. (Error messages handled by procedure.)
  ----------------------------------------------------------------------*/
  
  h_return = CALLPROC check_access_frames (p_frpr_name = :h_frpr_name);

  IF h_return = 1 
  THEN
    RETURN 0;
  ELSEIF h_return > 1
  THEN
    RETURN 9;
  ENDIF;
  
  /*------------------------------------------------------------------
      Set up screen display fields
  ------------------------------------------------------------------*/

  s_p1_frm = :g_period;
  s_p2_frm = :g_period - 100;
  s_p3_frm = :g_period - 200;

  s_p1_emp = :g_period;
  s_p2_emp = :g_period - 100;
  s_p3_emp = :g_period - 200;

  h_period1 = :g_period;
  h_period2 = :g_period - 100;
  h_period3 = :g_period - 200;

  CLEAR FIELD tf;
  REDISPLAY;

  /*------------------------------------------------------------------
      Set up the array and blank it
  ------------------------------------------------------------------*/

  h_return = CALLPROC arrayclear(arr);

  h_max_week = :g_week;

  h_counter = 0;

  MESSAGE 'Setting Up the Array . . .';

  WHILE h_counter < :h_max_week
  DO

   INSERTROW arr [:h_counter] 
           ( week     = :h_counter,
             p1recfrm = 0,
             p1clrfrm = 0,
             p2recfrm = 0,
             p2clrfrm = 0,
             p3recfrm = 0,
             p3clrfrm = 0,
             p1recemp = 0,
             p1clremp = 0,
             p2recemp = 0,
             p2clremp = 0,
             p3recemp = 0,
             p3clremp = 0);

    h_counter = :h_counter + 1;

  ENDWHILE;

  /*------------------------------------------------------------------
      Load up contributor_period data
  ------------------------------------------------------------------*/

  MESSAGE 'Selecting Data for ' + VARCHAR(:h_period1) + ', ' 
        + VARCHAR(:h_period2) + ' and ' 
        + VARCHAR(:h_period3) + ' . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT a.register_emp AS h_reg_emp,
           a.rec_week_no  AS h_rweek,
           a.corr_week_no AS h_cweek,
           a.period       AS h_period,
           a.receipt_date AS h_receipt_date,
           a.correct_date AS h_correct_date
    FROM   contributor_period a
    WHERE  a.period IN (:h_period1,:h_period2,:h_period3)
        AND  a.contributor_industry =
          (  SELECT c.contributor_industry
             FROM   :p_table c
             WHERE  c.contributor_industry = a.contributor_industry)
    BEGIN

      IF :h_period = :h_period1
      THEN

        h_p1emp   = :h_p1emp + :h_reg_emp;
        h_p1frm   = :h_p1frm + 1;

        IF :h_rweek != 0 AND :h_rweek <= :g_week AND :h_receipt_date != ''
        THEN
          arr[:h_rweek].p1recfrm = arr[:h_rweek].p1recfrm + 1;
          arr[:h_rweek].p1recemp = arr[:h_rweek].p1recemp + :h_reg_emp;
        ENDIF;

        IF :h_cweek != 0 AND :h_cweek <= :g_week  AND :h_correct_date != ''
        THEN
          arr[:h_cweek].p1clrfrm = arr[:h_cweek].p1clrfrm + 1;
          arr[:h_cweek].p1clremp = arr[:h_cweek].p1clremp + :h_reg_emp;
        ENDIF;

      ELSEIF :h_period = :h_period2
      THEN

        h_p2emp = :h_p2emp + :h_reg_emp;
        h_p2frm = :h_p2frm + 1;

        IF :h_rweek != 0 AND :h_rweek <= :g_week AND :h_receipt_date != ''
        THEN
          arr[:h_rweek].p2recfrm = arr[:h_rweek].p2recfrm + 1;
          arr[:h_rweek].p2recemp = arr[:h_rweek].p2recemp + :h_reg_emp;
        ENDIF;

        IF :h_cweek != 0 AND :h_cweek <= :g_week AND :h_correct_date != ''
        THEN
          arr[:h_cweek].p2clrfrm = arr[:h_cweek].p2clrfrm + 1;
          arr[:h_cweek].p2clremp = arr[:h_cweek].p2clremp + :h_reg_emp;
        ENDIF;

      ELSE /* h_period3 */

        h_p3emp = :h_p3emp + :h_reg_emp;
        h_p3frm = :h_p3frm + 1;

        IF :h_rweek != 0 AND :h_rweek <= :g_week AND :h_receipt_date != ''
        THEN
          arr[:h_rweek].p3recfrm = arr[:h_rweek].p3recfrm + 1;
          arr[:h_rweek].p3recemp = arr[:h_rweek].p3recemp + :h_reg_emp;
        ENDIF;

        IF :h_cweek != 0 AND :h_cweek <= :g_week AND :h_correct_date != ''
        THEN
          arr[:h_cweek].p3clrfrm = arr[:h_cweek].p3clrfrm + 1;
          arr[:h_cweek].p3clremp = arr[:h_cweek].p3clremp + :h_reg_emp;
        ENDIF;

      ENDIF;

    END;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to select data for counting loops. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
      Create Table
  ------------------------------------------------------------------*/

  h_return = CALLPROC msa_fp_drop_table (p_table = :h_table);

  IF h_return != 0
  THEN
    /* Error message handled by local procedure */
    RETURN 9;
  ENDIF;

  MESSAGE 'Creating Table . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    CREATE TABLE :h_table 
               ( week         INTEGER1 NOT NULL,
                 p1recfrm     INTEGER4 NOT NULL,
                 p1clrfrm     INTEGER4 NOT NULL,
                 p2recfrm     INTEGER4 NOT NULL,
                 p2clrfrm     INTEGER4 NOT NULL,
                 p3recfrm     INTEGER4 NOT NULL,
                 p3clrfrm     INTEGER4 NOT NULL,
                 p1recemp     INTEGER4 NOT NULL,
                 p1clremp     INTEGER4 NOT NULL,
                 p2recemp     INTEGER4 NOT NULL,
                 p2clremp     INTEGER4 NOT NULL,
                 p3recemp     INTEGER4 NOT NULL,
                 p3clremp     INTEGER4 NOT NULL,
                 p1emp        INTEGER4 NOT NULL,
                 p2emp        INTEGER4 NOT NULL,
                 p3emp        INTEGER4 NOT NULL,
                 p1frm        INTEGER4 NOT NULL,
                 p2frm        INTEGER4 NOT NULL,
                 p3frm        INTEGER4 NOT NULL,
                 p1recfrmtot  INTEGER4 NOT NULL,
                 p1recemptot  INTEGER4 NOT NULL,
                 p2recfrmtot  INTEGER4 NOT NULL,
                 p2recemptot  INTEGER4 NOT NULL,
                 p3recfrmtot  INTEGER4 NOT NULL,
                 p3recemptot  INTEGER4 NOT NULL,
                 p1clrfrmtot  INTEGER4 NOT NULL,
                 p1clremptot  INTEGER4 NOT NULL,
                 p2clrfrmtot  INTEGER4 NOT NULL,
                 p2clremptot  INTEGER4 NOT NULL,
                 p3clrfrmtot  INTEGER4 NOT NULL,
                 p3clremptot  INTEGER4 NOT NULL);

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to create table ' +:h_table +'. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
      Load up table with array data
  ------------------------------------------------------------------*/

  UNLOADTABLE arr
  BEGIN

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      INSERT INTO :h_table 
                ( week,
                  p1recfrm,
                  p1clrfrm,
                  p2recfrm,
                  p2clrfrm,
                  p3recfrm,
                  p3clrfrm,
                  p1recemp,
                  p1clremp,
                  p2recemp,
                  p2clremp,
                  p3recemp,
                  p3clremp,
                  p1emp,
                  p2emp,
                  p3emp,
                  p1frm,
                  p2frm,
                  p3frm,
                  p1recemptot,
                  p1recfrmtot,
                  p2recemptot,
                  p2recfrmtot,
                  p3recemptot,
                  p3recfrmtot,
                  p1clremptot,
                  p1clrfrmtot,
                  p2clremptot,
                  p2clrfrmtot,
                  p3clremptot,
                  p3clrfrmtot)
      VALUES (    :arr.week + 1,
                  :arr.p1recfrm,
                  :arr.p1clrfrm,
                  :arr.p2recfrm,
                  :arr.p2clrfrm,
                  :arr.p3recfrm,
                  :arr.p3clrfrm,
                  :arr.p1recemp,
                  :arr.p1clremp,
                  :arr.p2recemp,
                  :arr.p2clremp,
                  :arr.p3recemp,
                  :arr.p3clremp,
                  :h_p1emp,
                  :h_p2emp,
                  :h_p3emp,
                  :h_p1frm,
                  :h_p2frm,
                  :h_p3frm,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0);

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return != 0
    THEN
      MESSAGE 'ERROR: Failed to populate ' +:h_table +' with array data. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN 9;
    ENDIF;

  END;

  /*------------------------------------------------------------------
      Total the cleared/receipted forms/employment for the three periods
      to keep a running total: i.e. add week1 to week2 to week3, etc
  ------------------------------------------------------------------*/

  MESSAGE 'Totalling Data . . .';

  h_counter = 1;

  WHILE :h_counter <= :h_max_week
  DO

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      SELECT SUM(p1recfrm) AS h_p1recfrmtot,
             SUM(p1clrfrm) AS h_p1clrfrmtot,
             SUM(p2recfrm) AS h_p2recfrmtot,
             SUM(p2clrfrm) AS h_p2clrfrmtot,
             SUM(p3recfrm) AS h_p3recfrmtot,
             SUM(p3clrfrm) AS h_p3clrfrmtot,
             SUM(p1recemp) AS h_p1recemptot,
             SUM(p1clremp) AS h_p1clremptot,
             SUM(p2recemp) AS h_p2recemptot,
             SUM(p2clremp) AS h_p2clremptot,
             SUM(p3recemp) AS h_p3recemptot,
             SUM(p3clremp) AS h_p3clremptot
      FROM   :h_table
      WHERE  week <= :h_counter;

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return > 1
    THEN
      MESSAGE 'ERROR: Failed to select running totals from ' +:h_table +'. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN 9;
    ENDIF;

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      UPDATE :h_table
      SET    p1recfrmtot = :h_p1recfrmtot,
             p1clrfrmtot = :h_p1clrfrmtot,
             p2recfrmtot = :h_p2recfrmtot,
             p2clrfrmtot = :h_p2clrfrmtot,
             p3recfrmtot = :h_p3recfrmtot,
             p3clrfrmtot = :h_p3clrfrmtot,
             p1recemptot = :h_p1recemptot,
             p1clremptot = :h_p1clremptot,
             p2recemptot = :h_p2recemptot,
             p2clremptot = :h_p2clremptot,
             p3recemptot = :h_p3recemptot,
             p3clremptot = :h_p3clremptot
      WHERE  week = :h_counter;

      h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF h_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF h_return > 1
    THEN
      MESSAGE 'ERROR: Failed to update ' +:h_table +' with running totals. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN 9;
    ENDIF;

    h_counter = :h_counter + 1;

  ENDWHILE;

  /*------------------------------------------------------------------
      Load the Percentages onto the screen
  ------------------------------------------------------------------*/

  MESSAGE 'Loading Screen Table . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    tf =

    SELECT   week,
             p1recfrmtot * 100.0 / p1frm AS p1recfrm,
             p1clrfrmtot * 100.0 / p1frm AS p1clrfrm,
             p2recfrmtot * 100.0 / p2frm AS p2recfrm,
             p2clrfrmtot * 100.0 / p2frm AS p2clrfrm,
             p3recfrmtot * 100.0 / p3frm AS p3recfrm,
             p3clrfrmtot * 100.0 / p3frm AS p3clrfrm,
             p1recemptot * 100.0 / p1emp AS p1recemp,
             p1clremptot * 100.0 / p1emp AS p1clremp,
             p2recemptot * 100.0 / p2emp AS p2recemp,
             p2clremptot * 100.0 / p2emp AS p2clremp,
             p3recemptot * 100.0 / p3emp AS p3recemp,
             p3clremptot * 100.0 / p3emp AS p3clremp
    FROM     :h_table
    ORDER BY week desc;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to load data to screen. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  RESUME FIELD tf;

}

/**************************** KEY ACTIVATIONS *****************************/

'Mode', KEY FRSKEY4 =
{
  MESSAGE 'Switching mode . . .';
  h_return = CALLPROC msa_fp_drop_table (p_table = :h_table);
  RETURN 2; /* Flag ro return, switch mode and recall frame */
}

'Print', KEY FRSKEY8 =
{
  MESSAGE 'Preparing Report . . .';

  h_return = CALLPROC msa_cp_callsys 
           ( 'report ' 
           + :g_database 
           + ' ''(user_name = "' + :g_user_name + '"' 
           + ',inquiry = 14'  
           + ',p1 = ' + VARCHAR(:h_period1) 
           + ',p2 = ' + VARCHAR(:h_period2) 
           + ',p3 = ' + VARCHAR(:h_period3) 
           + ')'' -i$REPORTS/msam_rw_inq_progress.rw' 
           + ' > report.output 2> report.output');

  IF h_return != 0
  THEN

    MESSAGE 'ERROR: Failed to produce report. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;

  ELSE

    /*--------------------------------------------------------------
         Print report.
    --------------------------------------------------------------*/

    h_return = CALLPROC msa_cp_callsys 
             ( 'lines=`wc -l < msam_rw_inq_progress.rpt`;' 
             + 'lines=`expr ${lines} - 1`;' 
             + 'head -${lines} msam_rw_inq_progress.rpt | ' 
             + 'lp -o12l -d' + :g_printer 
             + ' >> report.output 2>> report.output');

    IF h_return != 0
    THEN
      MESSAGE 'ERROR: Failed to send report to printer ' +:g_printer +'. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN 9;
    ELSE
      MESSAGE 'NOTE: Report successfully sent to printer ' +:g_printer +'.'
      WITH STYLE = POPUP;
    ENDIF;

  ENDIF;

}

'End', KEY FRSKEY14 =
{
  h_return = CALLPROC msa_fp_drop_table (p_table = :h_table);

  RETURN 0;
}

/**************************** LOCAL PROCEDURES ****************************/


/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing 
            ( h_num_row_ck      = :p_num_row_ck,
              h_commit          = 'Y',
              h_rollback        = 'N',
              h_retries         = :h_retries,
              h_retries_allowed = :h_retries_allowed,
              h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}

