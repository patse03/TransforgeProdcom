iNITIALIZE (p_dest_frame = VARCHAR(32) NOT NULL WITH DEFAULT) =

DECLARE
  h_retries_allowed  = INTEGER1     NOT NULL WITH DEFAULT,
  h_retries          = INTEGER1     NOT NULL WITH DEFAULT,
  h_retry_or_not     = CHAR(5)      NOT NULL WITH DEFAULT,
  h_frpr_name        = VARCHAR(24)  NOT NULL WITH DEFAULT,
  h_return           = INTEGER1     NOT NULL WITH DEFAULT,
  h_param_list       = VARCHAR(200) NOT NULL WITH DEFAULT,
  h_varchar_variable = VARCHAR(200) NOT NULL WITH DEFAULT,
  h_integer_variable = INTEGER2     NOT NULL WITH DEFAULT,
  h_period           = INTEGER4     NOT NULL WITH DEFAULT,
  h_table            = VARCHAR(32)  NOT NULL WITH DEFAULT,

  lp_full_error_check = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,

{

  SELECT DBMSINFO('username') AS g_user_id;
  SELECT DBMSINFO('database') AS g_database;

  SET_FORMS FRS (MAPFILE='/home/prodcom/admin/prodcom.map');

  h_retries_allowed = 3;
  h_frpr_name       = 'msam_fr_header_two';

    s_period  = (DATE_PART('year','today') - 1)  * 100;

  msa_date  = 'today';

  /*---------------------------------------------------------------------------
      Accepts dest frame as paramater if passed from outside application.
  ---------------------------------------------------------------------------*/

  IF p_dest_frame = ''
  THEN
    
    h_param_list = CALLPROC CommandLineParameters();

    h_varchar_variable = SQUEEZE ( h_param_list);

    h_integer_variable = LOCATE ( h_varchar_variable, ' ');
    p_dest_frame       = LEFT   ( h_varchar_variable, h_integer_variable - 1);

  ENDIF;

  s_dest_frame = :p_dest_frame;

  h_table = 'NOT_USED';

  /*----------------------------------------------------------------------
       Access check. (Error messages handled by procedure.)
  ----------------------------------------------------------------------*/
  
  h_return = CALLPROC check_access_procs (p_frpr_name = :p_dest_frame);

  IF h_return = 1 
  THEN
    RETURN 0;
  ELSEIF h_return > 1
  THEN
    RETURN 9;
  ENDIF;

  /*----------------------------------------------------------------------
       Get user variables.
  ----------------------------------------------------------------------*/

  h_return = CALLPROC msa_fp_get_user_details 
           ( p_default_printer = BYREF(:g_printer),
             p_user_name       = BYREF(:g_user_name));

  IF h_return != 0
  THEN
    /* Error message handled in external procedure */
    RETURN 9;
  ENDIF;
  
  /*---------------------------------------------------------------------------
      Hides scope message and unlocks main parameter entry fields.
  ---------------------------------------------------------------------------*/

  SET_FORMS FIELD '' (DISPLAYONLY(s_period)  = 0,
                      UNDERLINE(s_period)    = 1,
                      REVERSE(s_period)      = 0,

                      DISPLAYONLY(s_week)    = 0,
                      UNDERLINE(s_week)      = 1,
                      REVERSE(s_week)        = 0,

                      DISPLAYONLY(s_analyst) = 0,
                      UNDERLINE(s_analyst)   = 1,
                      REVERSE(s_analyst)     = 0);

  RESUME FIELD s_period;

}

/*************************** FIELD ACTIVATIONS ****************************/

FIELD s_period =
{
  MESSAGE 'Checking Period . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    SELECT week_no AS g_max_week
    FROM   inquiry_period
    WHERE  period = :s_period;

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return = 1
  THEN
    MESSAGE 'WARNING: This is not a valid ProdCom period. '
          + 'Please try again or exit the screen.'
    WITH STYLE = POPUP;
    RESUME FIELD s_period;
  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Failed to validate the period parameter. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  SET_FORMS FIELD '' (DISPLAYONLY(s_period) = 1,
                      UNDERLINE  (s_period) = 0,
                      REVERSE    (s_period) = 1);

  g_period = :s_period;

  s_week = g_max_week;

  RESUME FIELD s_week;

}

FIELD s_week =
{
  IF s_week < 1 
  OR s_week > :g_max_week
  THEN
    MESSAGE 'WARNING: The week number must be between 1 and '
          + VARCHAR(:g_max_week) + '. Please try again...'
    WITH STYLE = POPUP;
    RESUME FIELD s_week;
  ENDIF;

  SET_FORMS FIELD '' (DISPLAYONLY(s_week)  = 1,
                      UNDERLINE  (s_week)  = 0,
                      REVERSE    (s_week)  = 1);

  g_week = :s_week;

  RESUME FIELD s_analyst;

}

BEFORE FIELD s_analyst =
{
  
    h_retries = :h_retries + 1;

    h_return = CALLFRAME msam_fr_person_select 
                       ( p_analyst_id   = BYREF(:g_analyst_id),
                         p_analyst_name = BYREF(:g_analyst_name));

  IF h_return = 1
  THEN
    
    SET_FORMS FIELD '' (DISPLAYONLY(s_week)    = 0,
                        UNDERLINE(s_week)      = 1,
                        REVERSE(s_week)        = 0);

    RESUME FIELD s_week;

  ELSEIF h_return > 1
  THEN
    MESSAGE 'ERROR: Persistant failure to select analyst correctly. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  s_analyst = :g_analyst_name;

  SET_FORMS FIELD '' (DISPLAYONLY(s_analyst)  = 1,
                      UNDERLINE  (s_analyst)  = 0,
                      REVERSE    (s_analyst)  = 1);

  REDISPLAY;

  /*------------------------------------------------------------------------
     All 5 global parameters are now set correctly, so proceed to call 
     the destination frame. No passed parameters needed.
  ------------------------------------------------------------------------*/

  IF 1 = 0  /* TESTING */
  THEN

    MESSAGE 'DEBUG: The following parameters have been prepared...' +X'0D'
          + '       p_table        = {NOT_USED}' +X'0D'
          + '       g_period       = {' +VARCHAR(:g_period) +'}' +X'0D'
          + '       g_week         = {' +VARCHAR(:g_week) +'}' +X'0D'
          + '       g_max_week     = {' +VARCHAR(:g_max_week) +'}' +X'0D'
          + '       g_analyst_name = {' +:g_analyst_name +'}' +X'0D'
          + '       g_analyst_id   = {' +:g_analyst_id +'}' +X'0D'
    WITH STYLE = POPUP;
  
    MESSAGE 'DEBUG: The following frame is now being called...'+X'0D'
          + '       p_dest_frame  = {' +:p_dest_frame +'}' +X'0D'
    WITH STYLE = POPUP;
    
  ENDIF;  /* TESTING */

  h_return = CALLFRAME :p_dest_frame ();

  IF h_return > 1
  THEN 
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------------
      Deal with non-fatal returns
  ------------------------------------------------------------------------*/

  IF h_return = 1 
  THEN 
    CLEAR FIELD ALL;

    msa_date = 'now';

    s_dest_frame = :p_dest_frame;

    SET_FORMS FIELD '' (DISPLAYONLY(s_period)   = 0,
                        UNDERLINE(s_period)     = 1,
                        REVERSE(s_period)       = 0,

                        DISPLAYONLY(s_week)     = 0,
                        UNDERLINE(s_week)       = 1,
                        REVERSE(s_week)         = 0,

                        DISPLAYONLY(s_analyst)  = 0,
                        UNDERLINE(s_analyst)    = 1,
                        REVERSE(s_analyst)      = 0);

    RESUME FIELD s_period;
  ENDIF;

  RETURN 0;

}

/**************************** KEY ACTIVATIONS *****************************/

'Clear', KEY FRSKEY12 =
{
  CLEAR FIELD ALL;

  msa_date = 'now';

  s_dest_frame = :p_dest_frame;

  SET_FORMS FIELD '' (DISPLAYONLY(s_period)  = 0,
                      UNDERLINE(s_period)    = 1,
                      REVERSE(s_period)      = 0,

                      DISPLAYONLY(s_week)    = 0,
                      UNDERLINE(s_week)      = 1,
                      REVERSE(s_week)        = 0,

                      DISPLAYONLY(s_analyst) = 0,
                      UNDERLINE(s_analyst)   = 1,
                      REVERSE(s_analyst)     = 0);

  RESUME FIELD s_period;

}

'End', KEY FRSKEY14 =
{
  h_return = CALLPROC msa_fp_drop_table ( h_table = :h_table);

  RETURN 0;
}

/**************************** LOCAL PROCEDURES ****************************/

/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing 
            ( h_num_row_ck      = :p_num_row_ck,
              h_commit          = 'Y',
              h_rollback        = 'N',
              h_retries         = :h_retries,
              h_retries_allowed = :h_retries_allowed,
              h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}

