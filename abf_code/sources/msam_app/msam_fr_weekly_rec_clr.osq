/*****************************************************************************
  Clearance and receipt Rates by Week
*****************************************************************************/

INITIALIZE (p_table = VARCHAR(32) NOT NULL WITH DEFAULT) =

DECLARE 
  h_retries_allowed   = INTEGER1    NOT NULL WITH DEFAULT,
  h_retries           = INTEGER1    NOT NULL WITH DEFAULT,
  h_retry_or_not      = CHAR(5)     NOT NULL WITH DEFAULT,
  h_frpr_name         = VARCHAR(24) NOT NULL WITH DEFAULT,
  h_return            = INTEGER2    NOT NULL WITH DEFAULT,
  h_return2           = INTEGER2    NOT NULL WITH DEFAULT,
  h_count             = INTEGER4    NOT NULL WITH DEFAULT,
  h_recd              = INTEGER4    NOT NULL WITH DEFAULT,
  h_clrd              = INTEGER4    NOT NULL WITH DEFAULT,
  h_week              = INTEGER1    NOT NULL WITH DEFAULT,
  h_corr_week         = INTEGER1    NOT NULL WITH DEFAULT,
  h_table1            = VARCHAR(24) NOT NULL WITH DEFAULT,
  h_table2            = VARCHAR(24) NOT NULL WITH DEFAULT,

  lp_full_error_check = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,
  lp_error_check      = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,

{
  SELECT DBMSINFO('username') AS g_user_id;
  SELECT DBMSINFO('database') AS g_database;

  h_frpr_name       = 'msam_fr_weekly_rec_clr';
  h_table1          = 'tt_weekly_progress_1';
  h_table2          = 'tt_weekly_progress_2';
  h_retries_allowed = 3;

  s_title = 'RECEIPTING AND CLEARANCE RATES TO WEEK '+VARCHAR(:g_week)+'.';

  SET_FORMS FIELD '' (MODE(tf) = 'READ');

  /*----------------------------------------------------------------------
       Access check. (Error messages handled by procedure.)
  ----------------------------------------------------------------------*/
  
  h_return = CALLPROC check_access_frames (p_frpr_name = :h_frpr_name);

  IF h_return = 1 
  THEN
    RETURN 0;
  ELSEIF h_return > 1
  THEN
    RETURN 9;
  ENDIF;
  
  /*------------------------------------------------------------------
      Create working table to speed up later select loops.
  ------------------------------------------------------------------*/

  MESSAGE 'Preparing data for counting. . .';

  h_return = CALLPROC msa_fp_drop_table (p_table = :h_table1);

  IF h_return != 0
  THEN
    /* Error message handled by local procedure */
    RETURN 9;
  ENDIF;

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;
    
    CREATE TABLE :h_table1
    AS
    SELECT a.contributor_reference, 
           a.period,       
           a.rec_week_no,
           a.corr_week_no
    FROM   contributor_period a
    WHERE  a.period = :g_period
      AND  a.contributor_industry =
        (  SELECT b.contributor_industry
           FROM   :p_table b
           WHERE  b.contributor_industry = a.contributor_industry);

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to create first working table. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
      Create Second working table
  ------------------------------------------------------------------*/

  MESSAGE 'Creating working table. . .';

  h_return = CALLPROC msa_fp_drop_table (p_table = :h_table2);

  IF h_return != 0
  THEN
    /* Error message handled by local procedure */
    RETURN 9;
  ENDIF;

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;


  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    CREATE TABLE :h_table2
               ( week         INTEGER4 NOT NULL,
                 totfrm       INTEGER4 NOT NULL,
                 recfrm       INTEGER4 NOT NULL,
                 recper       FLOAT8   NOT NULL,
                 clrfrm       INTEGER4 NOT NULL,
                 clrper       FLOAT8   NOT NULL);

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to create table ' +:h_table2 +'. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
      Populate Second working table
  ------------------------------------------------------------------*/

  MESSAGE 'Calculating. . .';

  /*..................................................................
     Insert week numbers and total forms.

     NB: Im using total in table rather than as an external variable 
      as im concerned that deselections are not being accounted for
      and if I use removed cont per data then teh total will change
      weekly.
  ..................................................................*/

  SELECT COUNT(contributor_reference) AS h_count
  FROM   :h_table1;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to count records in first working table. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  h_week = 1;

  WHILE :h_week <= :g_week
  DO

    INSERT INTO :h_table2
    VALUES    ( :h_week,
                :h_count, 
                0, 
                0.0, 
                0, 
                0.0); 

    h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

    IF h_return != 0
    THEN
      MESSAGE 'ERROR: Failed to set up week ' +VARCHAR(:h_week) +'. '
            + 'Error code ' +VARCHAR(:h_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN 9;
    ENDIF;

    h_week = :h_week +1;

  ENDWHILE;

  /*.........................................................................
     Loop through week numbers and interrogate first table to get counts.
  .........................................................................*/

  SELECT week AS h_week    
  FROM   :h_table2
  ORDER
     BY  week     
  BEGIN

    h_recd = 0;
    h_clrd = 0;

    SELECT corr_week_no AS h_corr_week 
    FROM   :h_table1
    WHERE  rec_week_no BETWEEN 1 AND :h_week
    BEGIN 

      h_recd = :h_recd + 1;

      IF  h_corr_week > 0
      AND h_corr_week <= :h_week   
      THEN
        h_clrd = :h_clrd + 1;
      ENDIF;

    END;

    h_return2 = CALLPROC lp_error_check (p_num_row_ck = 1);

    IF h_return2 > 1
    THEN
      MESSAGE 'ERROR: Failed to calculate week ' +VARCHAR(:h_week) +'. '
            + 'Error code ' +VARCHAR(:h_return2) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN 9;
    ENDIF;

    UPDATE :h_table2
       SET  recfrm = :h_recd,
            recper = :h_recd * 100.0 / totfrm,
            clrfrm = :h_clrd,
            clrper = :h_clrd * 100.0 / totfrm
    WHERE   week   = :h_week;

    h_return2 = CALLPROC lp_error_check (p_num_row_ck = 1);

    IF h_return2 != 0
    THEN
      MESSAGE 'ERROR: Failed to update week ' +VARCHAR(:h_week) +'. '
            + 'Error code ' +VARCHAR(:h_return2) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN 9;
    ENDIF;
 
  END;
  
  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to select for main loop. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  /*------------------------------------------------------------------
      Load the Percentages onto the screen
  ------------------------------------------------------------------*/

  MESSAGE 'Loading Screen Table . . .';

  h_retry_or_not      = 'RETRY';
  h_retries           = 0;

  WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
  DO

    h_retries = :h_retries + 1;

    tf =

    SELECT   week,
             recfrm,
             recper,
             clrfrm,
             clrper
    FROM     :h_table2
    ORDER BY week DESC; 

    h_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

    IF h_return != 7
    THEN
      h_retry_or_not = '';
    ENDIF;

  ENDWHILE;

  IF h_return != 0
  THEN
    MESSAGE 'ERROR: Failed to load data to screen. '
          + 'Error code ' +VARCHAR(:h_return) +'. '
          + 'Please contact IM immediately.'
    WITH STYLE = POPUP;
    RETURN 9;
  ENDIF;

  RESUME FIELD tf;

}

/**************************** KEY ACTIVATIONS *****************************/


'End', KEY FRSKEY14 =
{
  h_return = CALLPROC msa_fp_drop_table (p_table = :h_table1);
  h_return = CALLPROC msa_fp_drop_table (p_table = :h_table2);

  RETURN 0;
}

/**************************** LOCAL PROCEDURES ****************************/


/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing 
            ( h_num_row_ck      = :p_num_row_ck,
              h_commit          = 'Y',
              h_rollback        = 'N',
              h_retries         = :h_retries,
              h_retries_allowed = :h_retries_allowed,
              h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}

/*=======================================================================
    Local procedure to check sql for errors during sections of code that
    utilise personal temp tables. Committed, no rollback.
=======================================================================*/

PROCEDURE lp_error_check (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing 
            ( h_num_row_ck = :p_num_row_ck,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

  RETURN IFNULL(:lp_return,9);

}

