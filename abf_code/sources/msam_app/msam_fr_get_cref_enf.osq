INITIALIZE (p_mode     = INTEGER1    NOT NULL WITH DEFAULT,
            p_table    = VARCHAR(24) NOT NULL WITH DEFAULT) =

DECLARE 
  h_retries_allowed       = INTEGER1    NOT NULL WITH DEFAULT,
  h_retries               = INTEGER1    NOT NULL WITH DEFAULT,
  h_retry_or_not          = CHAR(5)     NOT NULL WITH DEFAULT,
  h_frpr_name             = VARCHAR(24) NOT NULL WITH DEFAULT,
  h_return                = INTEGER1    NOT NULL WITH DEFAULT,
  h_return2               = INTEGER1    NOT NULL WITH DEFAULT,
  h_order                 = INTEGER1    NOT NULL WITH DEFAULT,
  h_last_response         = INTEGER4    NOT NULL WITH DEFAULT,
  h_count                 = INTEGER4    NOT NULL WITH DEFAULT,

  lp_load_data        = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,
  lp_full_error_check = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,

{
  h_frpr_name         = 'msam_fr_get_cref_enf';
  h_retries_allowed   = 3;
  h_order             = 1;

  SET_FORMS FIELD '' (MODE(tf) = 'READ');

  h_return = CALLPROC lp_load_data (p_mode  = :p_mode,
                                    p_order = :h_order);

  IF h_return != 0
  THEN
    /* Error message handled by local procedure */
    RETURN :h_return;
  ENDIF;

  REDISPLAY;

  RESUME FIELD tf;

}

/**************************** KEY ACTIVATIONS *****************************/

'Order', KEY FRSKEY4 = 
{
  IF h_order = 1
  THEN
    h_order = 2;
  ELSE
    h_order = 1;
  ENDIF;

  h_return = CALLPROC lp_load_data (p_mode  = :p_mode,
                                    p_order = :h_order);

  IF h_return != 0
  THEN
    /* Error message handled by local procedure */
    RETURN :h_return;
  ENDIF;

  REDISPLAY;

  RESUME FIELD tf;

}

'Back', KEY FRSKEY12 =
{
  RETURN 0;
}

/**************************** LOCAL PROCEDURES ****************************/

/*=======================================================================
    Local procedure to fully check sql for errors during online programs.
    Committed, no rollback.
=======================================================================*/

PROCEDURE lp_full_error_check (p_num_row_ck = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC check_inq_ing 
            ( h_num_row_ck      = :p_num_row_ck,
              h_commit          = 'Y',
              h_rollback        = 'N',
              h_retries         = :h_retries,
              h_retries_allowed = :h_retries_allowed,
              h_frpr_name       = :h_frpr_name);

  RETURN :lp_return;

}

/*=======================================================================
    Local procedure to load initial data to table field and sort.
=======================================================================*/

PROCEDURE lp_load_data (p_mode  = INTEGER1 NOT NULL WITH DEFAULT,
                        p_order = INTEGER1 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4     NOT NULL WITH DEFAULT,
          lp_order    = VARCHAR(80)  NOT NULL WITH DEFAULT,

{
  MESSAGE 'Loading Data. . .';

  IF p_order = 2
  THEN
    lp_order = 'key desc, regemp desc, prds desc , '
             + 'contributor_industry, contributor_reference';
  ELSE
    lp_order = 'contributor_industry, key desc, contributor_reference';
  ENDIF;

  /*------------------------------------------------------------------
     1: Potential enforcements
  ------------------------------------------------------------------*/

  IF p_mode = 1
  THEN

    s_title = 'POTENTIAL ENFORCEMENTS';

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;
    
    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      tf =

      SELECT a.contributor_industry,
             a.contributor_reference,
             b.add_name1,
             VARCHAR(a.keyresp) AS key,
             a.register_emp AS regemp,
             0 AS prds
      FROM   contributor_period a,
             contributor b
      WHERE  a.contributor_reference = b.contributor_reference
        AND  a.period                = :g_period
        AND  a.register_emp > 299
        AND  a.rec_week_no = 0
        AND  a.contributor_reference = 
          (  SELECT c.contributor_reference
             FROM   contributor_period c
             WHERE  c.contributor_reference = a.contributor_reference 
               AND  c.period = :g_period - 100
               AND  c.register_emp > 9
               AND  c.rec_week_no = 0)
        AND  a.contributor_industry =
          (  SELECT d.contributor_industry
             FROM   :p_table d
             WHERE  d.contributor_industry = a.contributor_industry)
      ORDER BY :lp_order;

      lp_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF lp_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF lp_return = 1
    THEN
      MESSAGE 'WARNING: No potential enforcements  found in the given scope. '
            + 'If you think that this is incorrect, please contact IM.'
      WITH STYLE = POPUP;
      RETURN 0;
    ELSEIF lp_return > 1
    THEN
      MESSAGE 'ERROR: Failed to display potential enforcement cases. '
            + 'Error code ' +VARCHAR(:lp_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN 9;
    ENDIF;

  ENDIF;

 
  /*------------------------------------------------------------------
     2: Enforcement Contributors
  ------------------------------------------------------------------*/

  IF p_mode = 2
  THEN

    s_title = 'CONTRIBUTORS IN ENFORCEMENT';

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;
    
    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

      h_retries = :h_retries + 1;

      tf =

      SELECT a.contributor_industry,
             a.contributor_reference,
             b.add_name1,
             VARCHAR(a.keyresp) AS key,
             a.register_emp AS regemp,
             0 AS prds
      FROM   contributor_period a,
             contributor b
      WHERE  a.contributor_reference = b.contributor_reference
        AND  a.period                = :g_period
        AND  a.output_category       = 'Y'
        AND  a.contributor_industry =
          (  SELECT c.contributor_industry
             FROM   :p_table c
             WHERE  c.contributor_industry = a.contributor_industry)
      ORDER BY :lp_order;

      lp_return = CALLPROC lp_full_error_check (p_num_row_ck = 1);

      IF lp_return != 7
      THEN
        h_retry_or_not = '';
      ENDIF;

    ENDWHILE;

    IF lp_return = 1
    THEN
      MESSAGE 'WARNING: No enforcement cases found in the given scope. '
            + 'If you think that this is incorrect, please contact IM.'
      WITH STYLE = POPUP;
      RETURN 0;
    ELSEIF lp_return > 1
    THEN
      MESSAGE 'ERROR: Failed to display enforcement cases. '
            + 'Error code ' +VARCHAR(:lp_return) +'. '
            + 'Please contact IM immediately.'
      WITH STYLE = POPUP;
      RETURN 9;
    ENDIF;

  ENDIF;

  /*------------------------------------------------------------------------
     Update table field with extra data and count.
  ------------------------------------------------------------------------*/

  h_count = 0;

  UNLOADTABLE tf
  BEGIN

    h_count = h_count + 1;

    IF tf.key = 1
    THEN 
     tf.key = 'K';
    ELSE
     tf.key = ' ';
    ENDIF;

    h_last_response = 0;

    SELECT IFNULL(MAX(period),:g_period - 200) AS h_last_response
    FROM   contributor_period 
    WHERE  contributor_reference = :tf.contributor_reference
      AND  rec_week_no > 0;

    commit;

    tf.prds = (:g_period - h_last_response)/100;
   
  END;

  s_count = :h_count;

  RETURN 0

}
