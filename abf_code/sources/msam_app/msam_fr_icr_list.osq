INITIALIZE (

        icr_table         = VARCHAR(24) NOT NULL,
        industry          = CHAR(5) NOT NULL) =

DECLARE h_retries_allowed = INTEGER1 NOT NULL,
        h_retries         = INTEGER1 NOT NULL,
        h_retry_or_not    = CHAR(5) NOT NULL,
        h_reference       = CHAR(11) NOT NULL,
        h_period          = INTEGER4 NOT NULL,
        h_frpr_name       = VARCHAR(24) NOT NULL,
        h_table           = VARCHAR(24) NOT NULL,
        h_sort_order      = VARCHAR(60) NOT NULL,
        h_message         = VARCHAR(200) NOT NULL,
        h_hold_search     = VARCHAR(100) NOT NULL,
        h_prompt          = VARCHAR(10) NOT NULL,
        h_record          = INTEGER4 NOT NULL,
        no_errors         = INTEGER4 NOT NULL,
        h_on_record       = INTEGER4 NOT NULL,
        h_order           = INTEGER1 NOT NULL,
        ret_val           = INTEGER1 NOT NULL,
        tf.icr_code       = INTEGER1 NOT NULL,
        tf.correct_date   = DATE NOT NULL,
        lp_load_screen    = PROCEDURE RETURNING INTEGER
{
    h_retries_allowed = 3;
    h_frpr_name = 'msam_fr_icr_list';
    h_table = 'temp_icr_list';
    msa_date = 'now';
    h_order = 0;
    h_sort_order = 'text,contributor_reference';
    form_order = 'Order by ICR Error';

    IF industry <> 'ALL'
    THEN
        period_msg = period_msg + ' INDUSTRY ' + VARCHAR(industry);
    ENDIF;

    SET_FORMS FIELD '' (MODE(tf) = 'READ');

    /*------------------------------------------------------------------
    Create temporary table with contributor errors
    ------------------------------------------------------------------*/

    MESSAGE 'Counting Errors . . .';

    ret_val = CALLPROC msa_fp_drop_table (h_table = :h_table);
    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        IF industry = 'ALL'
        THEN
            CREATE TABLE :h_table
            AS SELECT    a.period,
                         a.contributor_industry,
                         a.contributor_reference,
                         a.receipt_date,
                         a.correct_date,
                         a.icr_code,
                         b.text
            FROM         :icr_table a,
                         icr_error_text b
            WHERE        a.icr_code = b.icr_code;
        ELSE
            CREATE TABLE :h_table
            AS SELECT    a.period,
                         a.contributor_industry,
                         a.contributor_reference,
                         a.receipt_date,
                         a.correct_date,
                         a.icr_code,
                         b.text
            FROM         :icr_table a,
                         icr_error_text b
            WHERE        a.icr_code = b.icr_code
            AND          a.contributor_industry = INT4(:industry);
        ENDIF;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in accessing ' + :icr_table
        WITH STYLE = POPUP;
        RETURN 9;

    ELSEIF ret_val = 1
    THEN
        MESSAGE 'No rows found on ' + :icr_table
        WITH STYLE = POPUP;
        RETURN 9;
    ENDIF;

    /*------------------------------------------------------------------
    Select counts of cleared forms with error
    ------------------------------------------------------------------*/

    MESSAGE 'Counting Cleared Forms . . .';
    total_cleared = 0;

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        SELECT DISTINCT contributor_reference AS h_reference,
               period AS h_period
        FROM   :h_table
        WHERE  correct_date <> ''
        {
            total_cleared = total_cleared + 1;
        };

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in counting cleared forms with error ' + :h_table
        WITH STYLE = POPUP;
        RETURN 9;
    ENDIF;

    ret_val = CALLPROC lp_load_screen ();
    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

}

'Help', KEY FRSKEY1 =
{
    HELP_FORMS(SUBJECT = 'HELP',
               FILE = :g_help + '/' + :h_frpr_name + '.hlp');

}

'GoTo' =
{
    h_message = 'Type (start of) Industry and press <return>';

    IF h_hold_search <> ''
    THEN
        h_message = h_message + X'0D' +
                    'or just press <return> to go to the next' +
                    ' ICR Error whose Industry starts with ' +
                    VARCHAR(h_hold_search);
    ENDIF;

    h_prompt = PROMPT h_message WITH STYLE = POPUP;

    IF h_prompt = '' AND h_hold_search <> ''
    THEN
        h_prompt = h_hold_search;
        h_on_record = :tf._record;
    ELSE
        h_on_record = 0;
    ENDIF;

    h_hold_search = h_prompt;

    UNLOADTABLE tf (h_record = _record)
    {
        IF h_record > h_on_record
        THEN
            IF LEFT(VARCHAR(tf.contributor_industry),LENGTH(h_prompt)) = :h_prompt
            THEN
                SCROLL tf TO h_record;
                RESUME;
            ENDIF;
        ENDIF;
    };
}

'ReOrder' =
{
    IF h_order = 0
    THEN
        h_order = 1;
        h_sort_order = 'receipt_date,contributor_reference';
        form_order = 'Order by Receipt Date';
    ELSEIF h_order = 1
    THEN
        h_order = 2;
        h_sort_order = 'receipt_date,text';
        form_order = 'Order by Receipt Date, Error';
    ELSEIF h_order = 2
    THEN
        h_order = 3;
        h_sort_order = 'contributor_industry,contributor_reference';
        form_order = 'Order by Industry';
    ELSEIF h_order = 3
    THEN
        h_order = 4;
        h_sort_order = 'contributor_reference,text';
        form_order = 'Order by Reference';
    ELSE
        h_order = 0;
        h_sort_order = 'text,contributor_reference';
        form_order = 'Order by ICR Error';
    ENDIF;

    ret_val = CALLPROC lp_load_screen ();
    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;
}

'Print' =
{
    IF no_errors = 0
    THEN
        MESSAGE 'Nothing to Print'
        WITH STYLE = POPUP;
        RESUME;
    ENDIF;

    MESSAGE 'Preparing Report . . .';
    msa_date = 'now';

    ret_val = CALLPROC msa_cp_callsys (
              'report ' +
              :g_database +
              ' ''(h_table = "' + :h_table + '"' +
              ',user_name = "' + :g_user_name + '"' +
              ',industry = "' + :industry + '"' +
              ',period_msg = "' + :period_msg + '"' +
              ',h_order ="' + :h_sort_order + '"' +
              ')'' -i$REPORTS/msam_rw_icr_list.rw' +
              ' > report.output 2> report.output');

    IF ret_val <> 0
    THEN
        MESSAGE 'Error producing report'
        WITH STYLE = POPUP;
    ELSE
        /*--------------------------------------------------------------
         Remove last line - so a blank end page is not printed
        --------------------------------------------------------------*/

        ret_val = CALLPROC msa_cp_callsys (
              'lines=`wc -l < msam_rw_icr_list.rpt`;' +
              'lines=`expr ${lines} - 1`;' +
              'head -${lines} msam_rw_icr_list.rpt | ' +
              'lp -o16p -d' + :g_printer +
              ' >> report.output 2>> report.output');

        IF ret_val <> 0
        THEN
            MESSAGE 'Error sending report to printer ' +
                    :g_printer
            WITH STYLE = POPUP;
        ELSE
            MESSAGE 'Report sent to printer ' +
                    :g_printer + ' OK'
            WITH STYLE = POPUP;
        ENDIF;
    ENDIF;
}

'End', KEY FRSKEY6 =
{
    MESSAGE 'Exiting Screen . . .';
    ret_val = CALLPROC msa_fp_drop_table (h_table = :h_table);
    RETURN 0;
}

/*----------------------------------------------------------------------
                    L O C A L   P R O C E D U R E
----------------------------------------------------------------------*/

PROCEDURE lp_load_screen () =
{
    MESSAGE 'Loading Screen . . .';

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        tf =

        SELECT   period,
                 contributor_industry,
                 contributor_reference,
                 receipt_date,
                 '' AS cleared,
                 text,
                 icr_code,
                 correct_date
        FROM     :h_table
        ORDER BY :h_sort_order;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row         = BYREF(no_errors),
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error loading screen from ' + :h_table
        WITH STYLE = POPUP;
        RETURN 9;

    ELSEIF ret_val = 1
    THEN
        MESSAGE 'No rows loaded to screen from ' + :h_table
        WITH STYLE = POPUP;
        RETURN 9;
    ENDIF;

    /*------------------------------------------------------------------
    Replace the invisible column correct_date with 'C's 
    ------------------------------------------------------------------*/

    UNLOADTABLE tf 
    {
        IF tf.correct_date <> '' 
        THEN
            tf.cleared = 'C';
        ENDIF;
    };

    RETURN 0;
}
