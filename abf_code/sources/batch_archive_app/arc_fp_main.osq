/******************************************************************************

    Procedure to controll archiving process as run from ons_scheduler
    just before despatch on first day back after new year.

    Newly created period and three previous are kept live.
    Next three periods are kept in archive tables
    Beyond that, only cqpv and contrbutor period are kept as data files.

    For example: New years day 2015.

    Live: 201400,201300, 201200, 201100.
    Archived: 201000,200900,200800.
    Filed: 200700 and earlier.
     
******************************************************************************/

PROCEDURE arc_fp_main () =

DECLARE
  h_param_list         = VARCHAR(100) NOT NULL WITH DEFAULT,
  h_varchar_variable   = VARCHAR(100) NOT NULL WITH DEFAULT,
  h_integer_variable   = INTEGER1     NOT NULL WITH DEFAULT,
  h_param1             = VARCHAR(20)  NOT NULL WITH DEFAULT,
  h_table              = VARCHAR(32)  NOT NULL WITH DEFAULT,
  h_text               = VARCHAR(80)  NOT NULL WITH DEFAULT,
  h_return             = INTEGER1     NOT NULL WITH DEFAULT,
  h_frpr_name          = VARCHAR(24)  NOT NULL WITH DEFAULT,

  lp_error_check       = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,

{
  SELECT DBMSINFO('username') AS g_user_id;
  SELECT DBMSINFO('database') AS g_database;

  h_frpr_name = 'arc_fp_main';

  /*------------------------------------------------------------------
      Log start of process.
  ------------------------------------------------------------------*/

  CALLPROC write_to_process_log
         ( p_frpr_name = :h_frpr_name,
           p_code      = 0,
           p_text      = '*SIGNON*');

  CALLPROC write_to_process_log
         ( p_frpr_name = :h_frpr_name,
           p_code      = 0,
           p_text      = 'STARTING: ARCHIVE PROCESS STARTING.');

  /*------------------------------------------------------------------
      Setting parameters
  ------------------------------------------------------------------*/

  CALLPROC write_to_process_log
         ( p_frpr_name = :h_frpr_name,
           p_code      = 0,
           p_text      = 'Setting parameters.');

  h_param_list = CALLPROC CommandLineParameters();
  h_varchar_variable = SQUEEZE (h_param_list);
  h_integer_variable = LOCATE (h_varchar_variable, ' ');
  h_param1         =   LEFT (h_varchar_variable,h_integer_variable - 1);

  g_archive_dir = '/prodcom/live5/files/archive/';

  g_period = INT4(:h_param1) - 100;

  g_arch_period = g_period - 400; 
  g_file_period = g_period - 700; 

  h_text = 'New period is ' +VARCHAR(:g_period) +'. '
         + 'Archiving ' +VARCHAR(:g_arch_period) +' and '
         + 'filing away ' +VARCHAR(:g_file_period) +'.';
   
  CALLPROC write_to_process_log
         ( p_frpr_name = :h_frpr_name,
           p_code      = 0,
           p_text      = :h_text);

  /*-------------------------------------------------------------------------
    1) Create entries for new period in the table and period status tables
  -------------------------------------------------------------------------*/

  CALLPROC write_to_process_log
         ( p_frpr_name = :h_frpr_name,
           p_code      = 0,
           p_text      = 'Creating new period in status tables.');

  h_return = CALLPROC arc_fp_create_period();

  IF h_return != 0
  THEN

    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 9,
             p_text      = 'ENDING: Failed to create new period records.');

    EXIT;

  ELSE

    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 0,
             p_text      = 'Finished creating new period in status tables.');

  ENDIF;

  /*------------------------------------------------------------------
      Update archive period to I status on arc_period_status
      so that it shows an incomplete archive run if program fails.
  -------------------------------------------------------------------------*/

  UPDATE arc_period_status
  SET    status = 'I'
  WHERE period = :g_arch_period;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return = 1
  THEN

    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 0,
             p_text      = 'NOTE: Nothing to archive or file. Stopping here.');

    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 0,
             p_text      = 'ENDING: ARCHIVE PROCESS COMPLETED.');

    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 0,
             p_text      = '*SIGNOFF*');

    EXIT;

  ELSEIF h_return > 1
  THEN
    h_text = 'ERROR: Failed to set I status for archive period. '
           +  'Terminating process.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    EXIT;
  ENDIF;

  /*------------------------------------------------------------------
    2)  Create archive tables for first archive period.
  -------------------------------------------------------------------------*/

  CALLPROC write_to_process_log
         ( p_frpr_name = :h_frpr_name,
           p_code      = 0,
           p_text      = 'Creating archive tables.');

  h_return = CALLPROC arc_fp_create_tables();

  IF h_return != 0
  THEN

    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 9,
             p_text      = 'ENDING: Failed to create archive tables.');

    EXIT;

  ELSE

    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 0,
             p_text      = 'Finished creating archive tables.');

  ENDIF;

  /*------------------------------------------------------------------
    3)  Create combined SIM table for first archive period.
  -------------------------------------------------------------------------*/

  CALLPROC write_to_process_log
         ( p_frpr_name = :h_frpr_name,
           p_code      = 0,
           p_text      = 'Creating combined SIM table.');

  h_return = CALLPROC arc_fp_combine_sim_tables();

  IF h_return != 0
  THEN

    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 9,
             p_text      = 'ENDING: Failed to create combined SIM table.');

    EXIT;

  ELSE

    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 0,
             p_text      = 'Finished creating combined SIM table.');

  ENDIF;

  /*------------------------------------------------------------------
      Update archive period to H status on arc_period_status.
  -------------------------------------------------------------------------*/

  UPDATE arc_period_status
  SET    status = 'H'
  WHERE period = :g_arch_period;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    h_text = 'ENDING: Failed to set H status for archive period '
           +  'on arc_period_status.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    EXIT;
  ENDIF;

  /*------------------------------------------------------------------
    4)  Housekeep non-archive tables.
  --------------------------------------------------------------------*/

  CALLPROC write_to_process_log
         ( p_frpr_name = :h_frpr_name,
           p_code      = 0,
           p_text      = 'Housekeeping tables.');

  h_return = CALLPROC arc_fp_hskp_tables ();

  IF h_return != 0
  THEN

    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 9,
             p_text      = 'ENDING: Failed to housekeep tables');

    EXIT;

  ELSE

    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 0,
             p_text      = 'Finished housekeeping tables.');

  ENDIF;

  /*------------------------------------------------------------------
      Update archive period to A status on arc_period_status
      as first phase of archiving now complete. 
  -------------------------------------------------------------------------*/

  UPDATE arc_period_status
  SET    status = 'A'
  WHERE period = :g_arch_period;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    h_text = 'ENDING: Failed to set A status for archive period '
           +  'on arc_period_status.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    EXIT;
  ENDIF;

  /*------------------------------------------------------------------
      Update file period to I status on arc_period_status
      so that it shows an incomplete archive run if program fails.
  --------------------------------------------------------------------*/

  UPDATE arc_period_status
  SET    status = 'I'
  WHERE period = :g_file_period;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return = 1
  THEN

    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 0,
             p_text      = 'NOTE: Nothing to file or expire. Stopping here.');

    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 0,
             p_text      = 'ENDING: ARCHIVE PROCESS COMPLETED.');

    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 0,
             p_text      = '*SIGNOFF*');

    EXIT;

  ELSEIF h_return > 1
  THEN
    h_text = 'ENDING: Failed to set I status for file period '
           +  'on arc_period_status.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    EXIT;
  ENDIF;

  /*------------------------------------------------------------------
     5)   Create archive data file for final period
  --------------------------------------------------------------------*/

  CALLPROC write_to_process_log
         ( p_frpr_name = :h_frpr_name,
           p_code      = 0,
           p_text      = 'Creating data files.');

  h_return = CALLPROC arc_fp_create_files();

  IF h_return != 0
  THEN

    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 9,
             p_text      = 'ENDING: Failed to create data file');

    EXIT;

  ELSE

    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 0,
             p_text      = 'Finished creating archive data files.');

  ENDIF;


  /*------------------------------------------------------------------
   6)  Delete expired archive tables.
  --------------------------------------------------------------------*/

  CALLPROC write_to_process_log
         ( p_frpr_name = :h_frpr_name,
           p_code      = 0,
           p_text      = 'Deleting expired tables.');

  h_return = CALLPROC arc_fp_delete_tables();

  IF h_return != 0
  THEN

    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 9,
             p_text      = 'ENDING: Failed to delete expired tables');

    EXIT;

  ELSE

    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 0,
             p_text      = 'Finished deleting expired tables.');

  ENDIF;

  /*------------------------------------------------------------------
      Update filing period to F status on arc_period_status
      as second phase of archiving now complete. 
  --------------------------------------------------------------------*/

  UPDATE arc_period_status
  SET    status = 'F'
  WHERE period = :g_file_period;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF h_return != 0
  THEN
    h_text = 'ENDING: Failed to set F status for file period '
           +  'on arc_period_status.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);
    EXIT;
  ENDIF;

  /*------------------------------------------------------------------
      Log end of process.
  ------------------------------------------------------------------*/

  CALLPROC write_to_process_log
         ( p_frpr_name = :h_frpr_name,
           p_code      = 0,
           p_text      = 'ENDING: ARCHIVE PROCESS COMPLETED.');

  CALLPROC write_to_process_log
         ( p_frpr_name = :h_frpr_name,
           p_code      = 0,
           p_text      = '*SIGNOFF*');

  EXIT;

}  
/**************************** LOCAL PROCEDURES ****************************/

/*=======================================================================
    Local procedure to check sql for errors during sections of code that
    utilise personal temp tables. Committed, no rollback.
=======================================================================*/

PROCEDURE lp_error_check (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC batch_check_inq_ing 
            ( h_num_row_ck = :p_num_row_ck,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

  RETURN IFNULL(:lp_return,9);

}



  
  



