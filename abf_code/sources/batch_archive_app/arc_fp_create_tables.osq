/******************************************************************************

    Procedure to create the archive tables, remove the live data 
    and record the archiving in the arc_table_status table.

******************************************************************************/

PROCEDURE arc_fp_create_tables () =

DECLARE
  h_param_list         = VARCHAR(100) NOT NULL WITH DEFAULT,
  h_varchar_variable   = VARCHAR(100) NOT NULL WITH DEFAULT,
  h_integer_variable   = INTEGER1     NOT NULL WITH DEFAULT,
  h_command            = VARCHAR(200) NOT NULL WITH DEFAULT,
  h_status             = CHAR(1)      NOT NULL WITH DEFAULT,
  h_class              = CHAR(1)      NOT NULL WITH DEFAULT,
  h_table_name         = VARCHAR(32)  NOT NULL WITH DEFAULT,
  h_period_column      = VARCHAR(32)  NOT NULL WITH DEFAULT,
  h_text               = VARCHAR(80)  NOT NULL WITH DEFAULT,
  h_like               = VARCHAR(80)  NOT NULL WITH DEFAULT,
  h_return             = INTEGER2     NOT NULL WITH DEFAULT,
  h_return2            = INTEGER2     NOT NULL WITH DEFAULT,
  h_frpr_name          = VARCHAR(24)  NOT NULL WITH DEFAULT,

  lp_create_archive_table = PROCEDURE RETURNING INTEGER NOT NULL,
  lp_remove_live_data     = PROCEDURE RETURNING INTEGER NOT NULL,
  lp_update_table_status  = PROCEDURE RETURNING INTEGER NOT NULL,
  lp_convert_ppi_table    = PROCEDURE RETURNING INTEGER NOT NULL,
  lp_error_check          = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,

{
  SELECT DBMSINFO('username') AS g_user_id;
  SELECT DBMSINFO('database') AS g_database;

  h_frpr_name = 'arc_fp_create_tables';

  /*------------------------------------------------------------------
      Loop through  A class tables listed in arc_table_data that have 
      a start period of equal or earlier than the archiving period
      and have not yet been acrhived to create the archive versions
      of these tables.
  ------------------------------------------------------------------*/

  CALLPROC write_to_process_log
         ( p_frpr_name = :h_frpr_name,
           p_code      = 0,
           p_text      = 'Initialising archive table creation loop.');

  SELECT  a.table_name    AS h_table_name,
          a.period_column AS h_period_column,
          a.class         AS h_class
  FROM    arc_table_data   a,
          arc_table_status b
  WHERE   a.table_name    = b.table_name 
    AND   a.start_period <= :g_arch_period
    AND   b.period        = :g_arch_period
    AND   a.type          = 'A'
    AND   b.status        = 'L'
  BEGIN

    /*...................................................................
        Create the archive table 
    ...................................................................*/

    h_return2 = CALLPROC lp_create_archive_table 
                       ( p_table_name    = :h_table_name,
                         p_period_column = :h_period_column);

    IF h_return2 != 0
    THEN
      /* Error message logged in local procedure */
      RETURN :h_return;
    ENDIF;
      
    /*...................................................................
        Remove the data from the live table
    ...................................................................*/

    h_return2 = CALLPROC lp_remove_live_data  
                       ( p_table_name    = :h_table_name,
                         p_period_column = :h_period_column);

    IF h_return2 != 0
    THEN
      /* Error message logged in local procedure */
      RETURN :h_return;
    ENDIF;

    /*...................................................................
        Update the tables status in arc_table_status
    ...................................................................*/

    h_return2 = CALLPROC lp_update_table_status
                       ( p_table_name   = :h_table_name);

    IF h_return2 != 0
    THEN
      /* Error message logged in local procedure */
      RETURN :h_return;
    ENDIF;

  END;
      
  h_return = CALLPROC lp_error_check (p_num_row_ck = 1); 

  IF h_return = 1
  THEN

    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 0,
             p_text      = 'NOTE: No tables eligible for archiving loop.');

  ELSEIF h_return > 1
  THEN

    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = 'ENDING: Failed to select for archiving loop.');

    RETURN :h_return;

  ENDIF;

  CALLPROC write_to_process_log
         ( p_frpr_name = :h_frpr_name,
           p_code      = 0,
           p_text      = 'Completed archive table creation loop.');

  /*-------------------------------------------------------------------------
      Loop through  PPI tables due for renaming.
      (Question word and regional tables are included as they match
       the same naming standards)
  -------------------------------------------------------------------------*/

  CALLPROC write_to_process_log
         ( p_frpr_name = :h_frpr_name,
           p_code      = 0,
           p_text      = 'Initialising PPI table archive creation loop.');

  h_like = '%'+VARCHAR(:g_arch_period)+'%';

  SELECT table_name AS h_table_name
  FROM iitables
  WHERE ( table_name LIKE 'ppi_%' OR
          table_name LIKE 'rgn_%' OR
          table_name LIKE 'question_word_%')
    AND   table_name LIKE :h_like
    AND   table_type = 'T'
  BEGIN

    /*...................................................................
        Convert PPI table to archive table.          
    ...................................................................*/

    h_return2 = CALLPROC lp_convert_ppi_table
                       ( p_table_name   = :h_table_name);

    IF h_return2 != 0
    THEN
      /* Error message logged in local procedure */
      RETURN :h_return;
    ENDIF;

    /*...................................................................
        Update the tables status in arc_table_status
    ...................................................................*/

    h_return2 = CALLPROC lp_update_table_status
                       ( p_table_name   = :h_table_name);

    IF h_return2 != 0
    THEN
      /* Error message logged in local procedure */
      RETURN :h_return;
    ENDIF;

  END;

  h_return = CALLPROC lp_error_check (p_num_row_ck = 1); 

  IF h_return = 1
  THEN

    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 0,
             p_text      = 'NOTE: No tables eligible for PPI archiving loop.');

  ELSEIF h_return > 1
  THEN

    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = 'ENDING: Failed to select for PPI archiving loop.');

    RETURN :h_return;

  ENDIF;


  CALLPROC write_to_process_log
         ( p_frpr_name = :h_frpr_name,
           p_code      = 0,
           p_text      = 'Completed PPI table archive creation loop.');

  RETURN 0

}

/**************************** LOCAL PROCEDURES ****************************/


/*=======================================================================
    Local procedure to check sql for errors during sections of code that
    utilise personal temp tables. Committed, no rollback.
=======================================================================*/

PROCEDURE lp_error_check (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC batch_check_inq_ing 
            ( h_num_row_ck = :p_num_row_ck,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

  RETURN IFNULL(:lp_return,9);

}

/*=======================================================================
    Local procedure to create archive table.
=======================================================================*/

PROCEDURE lp_create_archive_table 
        ( p_table_name    = VARCHAR(32) NOT NULL WITH DEFAULT,
          p_period_column = VARCHAR(32) NOT NULL WITH DEFAULT)=

DECLARE   lp_return       = INTEGER4    NOT NULL WITH DEFAULT,
          lp_return2      = INTEGER4    NOT NULL WITH DEFAULT,
          lp_table_name   = VARCHAR(32) NOT NULL WITH DEFAULT,
          lp_count        = INTEGER4    NOT NULL WITH DEFAULT,

{
  MESSAGE 'Archiving: ' +:p_table_name +'...';

  lp_table_name = 'zzz_' +VARCHAR(:g_arch_period) +'_' +SQUEEZE(:p_table_name);

  /*--------------------------------------------------------------------------
     Drop any existing instance of archive table for this period  
  --------------------------------------------------------------------------*/

  lp_return = CALLPROC batch_fp_drop_table (p_table = :lp_table_name);

  IF lp_return != 0
  THEN
    h_text = 'ERROR: Failed to delete existing ' +:lp_table_name +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :lp_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*--------------------------------------------------------------------------
     Create archive table
     Handles IDBR years and old quarters by adding 3,6,9,12 to arch period.
  --------------------------------------------------------------------------*/

  IF h_class = 'T'
  THEN

    CREATE TABLE :lp_table_name
    AS
    SELECT *
    FROM   :p_table_name
    WHERE  DATE_PART('year',DATE(:p_period_column)) = (:g_arch_period/100)
  
  ELSE

    CREATE TABLE :lp_table_name
    AS
    SELECT *
    FROM   :p_table_name
    WHERE  :p_period_column = :g_arch_period
       OR  :p_period_column = :g_arch_period + 3
       OR  :p_period_column = :g_arch_period + 6
       OR  :p_period_column = :g_arch_period + 9
       OR  :p_period_column = :g_arch_period + 12;

  ENDIF;
 
  lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF lp_return > 1
  THEN

    h_text = 'ERROR: Failed to create ' +:lp_table_name +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :lp_return,
             p_text      = :h_text);
    RETURN :h_return;

  ELSEIF lp_return = 1
  THEN

    SELECT COUNT(*) AS lp_count 
    FROM   :p_table_name; 

    lp_return2 = CALLPROC lp_error_check (p_num_row_ck = 1);
    
    IF lp_return2 > 1
    THEN

      h_text = 'ERROR: Failed to count remaining rows on ' +:p_table_name +'.'; 
      CALLPROC write_to_process_log
             ( p_frpr_name = :h_frpr_name,
               p_code      = :lp_return2,
               p_text      = :h_text);
    ENDIF;
    
    IF lp_count = 0
    THEN

      h_text = 'WARNING: No rows remaining on ' +:p_table_name +'. '
             + 'Please investigate.'; 
      CALLPROC write_to_process_log
             ( p_frpr_name = :h_frpr_name,
               p_code      = 1,
               p_text      = :h_text);

    ELSE

      h_text = '  NOTE: No rows to archive on ' +:p_table_name +'.'; 
      CALLPROC write_to_process_log
             ( p_frpr_name = :h_frpr_name,
               p_code      = 0,
               p_text      = :h_text);

    ENDIF;

  ELSE

    h_text = '  Successfully created ' +:lp_table_name +'.'; 
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 0,
             p_text      = :h_text);
  ENDIF;

  RETURN 0

}

  
/*=======================================================================
    Local procedure to delete archived data from live table. 
=======================================================================*/

PROCEDURE lp_remove_live_data 
        ( p_table_name    = VARCHAR(32)  NOT NULL WITH DEFAULT,
          p_period_column = VARCHAR(32)  NOT NULL WITH DEFAULT)=

DECLARE   lp_return       = INTEGER4     NOT NULL WITH DEFAULT,
          lp_text         = VARCHAR(200) NOT NULL WITH DEFAULT,
          lp_table        = VARCHAR(32)  NOT NULL WITH DEFAULT,
          lp_loops        = INTEGER4     NOT NULL WITH DEFAULT,
          lp_count        = INTEGER4     NOT NULL WITH DEFAULT,
          lp_total        = INTEGER4     NOT NULL WITH DEFAULT,

{

  MESSAGE 'Tidying: ' +:p_table_name +'...';

  IF h_class = 'T'
  THEN

    lp_text = 'DATE_PART(' +X'27' +'year' +X'27' +',' 
            + 'DATE(' +:p_period_column +')) = '
            + VARCHAR(:g_arch_period/100);

  ELSE

    lp_text = :p_period_column + ' = ' +VARCHAR(:g_arch_period) +' OR '
            + :p_period_column + ' = ' +VARCHAR(:g_arch_period + 3) +' OR '
            + :p_period_column + ' = ' +VARCHAR(:g_arch_period + 6) +' OR '
            + :p_period_column + ' = ' +VARCHAR(:g_arch_period + 9) +' OR '
            + :p_period_column + ' = ' +VARCHAR(:g_arch_period + 12);

  ENDIF;

  /*------------------------------------------------------------------------
     Check there is something to delete and if it is to large to handle.
  ------------------------------------------------------------------------*/

  SELECT COUNT(*) AS lp_total 
  FROM   :p_table_name
  WHERE  :lp_text;
  
  lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF lp_return > 1
  THEN
    h_text = 'ERROR: Failed to count total rows from ' +:p_table_name +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :lp_return,
             p_text      = :h_text);
    RETURN :h_return;
  ENDIF;

  IF lp_total = 0
  THEN
    h_text = '  NOTE: No rows to delete on ' +:p_table_name +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 0,
             p_text      = :h_text);
    RETURN 0;
  ENDIF;

  IF lp_total > :gc_max_delete
  THEN
    h_text = '  WARNING: Too many rows to delete on ' +:p_table_name +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      =  1,
             p_text      = :h_text);
    RETURN 0;
  ENDIF;

  /*------------------------------------------------------------------------
    Record table and index structure
  ------------------------------------------------------------------------*/

  h_command = 'copydb -d/admin/scratch/prodcom_copy_area/ '
            + :g_database +' '
            + :p_table_name +' '
            + '1>/dev/null '
            + '2>/dev/null';

  lp_return = CALLPROC callsys_cp(:h_command);

  IF lp_return != 0
  THEN
    h_text = '  ERROR: Failed to save table stucture for ' +:p_table_name +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :lp_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*---------------------------------------------------------------------
    Lock Database
  ---------------------------------------------------------------------*/

  UPDATE dba_system_lock
  SET    locked = 'Y';

  lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF lp_return != 0
  THEN
    h_text = 'ERROR: Failed to lock db whilst changing ' +:p_table_name +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :lp_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*---------------------------------------------------------------------
    Modify to heap (to lose secondary indexes) and then 
    modify btree on period column;
  ---------------------------------------------------------------------*/

  MODIFY :p_table_name TO HEAP;

  lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF lp_return != 0
  THEN
    h_text = 'ERROR: Failed to modify ' +:p_table_name +' to HEAP.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :lp_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  MODIFY :p_table_name TO BTREE
      ON :h_period_column;

  lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF lp_return != 0
  THEN
    h_text = 'ERROR: Failed to modify ' +:p_table_name +' to BTREE.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :lp_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*---------------------------------------------------------------------
    Perform deletion.
  ---------------------------------------------------------------------*/

  DELETE FROM :p_table_name
  WHERE       :lp_text;
  
  lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF lp_return > 1
  THEN
    h_text = 'ERROR: Failed to delete from ' +:p_table_name +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :lp_return,
             p_text      = :h_text);
    RETURN :h_return;
  ENDIF;

  /*---------------------------------------------------------------------
    Recreate structure and secondary indexes. 
  ---------------------------------------------------------------------*/

  h_command = '$SCRIPTS/modscr.sh '
            + :g_database +' '
            + '1>/dev/null '
            + '2>/dev/null';

  lp_return = CALLPROC callsys_cp(:h_command);

  IF lp_return != 0
  THEN
    h_text = '  ERROR: Failed to recreate stucture of ' +:p_table_name +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      =  :lp_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*---------------------------------------------------------------------
    Unlock Database
  ---------------------------------------------------------------------*/

  UPDATE dba_system_lock
  SET    locked = 'N';

  lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF lp_return != 0
  THEN
    h_text = 'ERROR: Failed to unlock db after changing ' +:p_table_name +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :lp_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  RETURN 0

}

/*=======================================================================
    Local procedure to update the record on arc_table_status
=======================================================================*/

PROCEDURE lp_update_table_status
        ( p_table_name   = VARCHAR(32) NOT NULL WITH DEFAULT)=

DECLARE   lp_return       = INTEGER4    NOT NULL WITH DEFAULT,

{

  MESSAGE 'Updating: ' +:p_table_name +'...';

  UPDATE arc_table_status
     SET status = 'A',
         date   = DATE('today')
  WHERE table_name = :p_table_name 
    AND period     = :g_arch_period;

  lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF lp_return != 0
  THEN
    h_text = 'ERROR: Failed to update status of ' +:p_table_name +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :lp_return,
             p_text      = :h_text);
    RETURN :h_return;
  ENDIF;

  RETURN 0

}


/*=======================================================================
    Local procedure to convert a ppi archive table.
=======================================================================*/

PROCEDURE lp_convert_ppi_table
        ( p_table_name    = VARCHAR(32) NOT NULL WITH DEFAULT,
          p_period_column = VARCHAR(32) NOT NULL WITH DEFAULT)=

DECLARE   lp_return       = INTEGER4    NOT NULL WITH DEFAULT,
          lp_table_name   = VARCHAR(32) NOT NULL WITH DEFAULT,

{
  MESSAGE 'Archiving: ' +:p_table_name +'...';

  lp_table_name = 'zzz_' +VARCHAR(:g_arch_period) +'_' 
                + LEFT(:p_table_name, LENGTH(:p_table_name)-7);

  /*--------------------------------------------------------------------------
     Drop any existing instance of archive table for this period  
  --------------------------------------------------------------------------*/

  lp_return = CALLPROC batch_fp_drop_table (p_table = :lp_table_name);

  IF lp_return != 0
  THEN
    h_text = 'ERROR: Failed to delete existing ' +:lp_table_name +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :lp_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;

  /*--------------------------------------------------------------------------
     Create archive PPI table
  --------------------------------------------------------------------------*/

  CREATE TABLE :lp_table_name
  AS
  SELECT *
  FROM   :p_table_name;

  lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF lp_return > 1
  THEN
    h_text = 'ERROR: Failed to create ' +:lp_table_name +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :lp_return,
             p_text      = :h_text);
    RETURN :h_return;
  ELSEIF lp_return = 1
  THEN
    h_text = 'WARNING: No rows to archive on ' +:lp_table_name +'.'; 
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 1,
             p_text      = :h_text);
  ELSE
    h_text = '  Successfully created ' +:lp_table_name +'.'; 
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = 0,
             p_text      = :h_text);
  ENDIF;

  /*--------------------------------------------------------------------------
     Drop original PPI table
  --------------------------------------------------------------------------*/

  lp_return = CALLPROC batch_fp_drop_table (p_table = :p_table_name);

  IF lp_return != 0
  THEN
    h_text = 'ERROR: Failed to delete existing ' +:p_table_name +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :lp_return,
             p_text      = :h_text);
    RETURN 9;
  ENDIF;


  RETURN 0

}

  
  



