/******************************************************************************

    Procedure to housekeep the specified tables and remove the record 
    in the arc_table_status table.

******************************************************************************/

PROCEDURE arc_fp_hskp_tables () =

DECLARE
  h_param_list         = VARCHAR(100) NOT NULL WITH DEFAULT,
  h_varchar_variable   = VARCHAR(100) NOT NULL WITH DEFAULT,
  h_integer_variable   = INTEGER1     NOT NULL WITH DEFAULT,
  h_status             = CHAR(1)      NOT NULL WITH DEFAULT,
  h_class              = CHAR(1)      NOT NULL WITH DEFAULT,
  h_table_name         = VARCHAR(32)  NOT NULL WITH DEFAULT,
  h_period_column      = VARCHAR(32)  NOT NULL WITH DEFAULT,
  h_text               = VARCHAR(80)  NOT NULL WITH DEFAULT,
  h_return             = INTEGER2     NOT NULL WITH DEFAULT,
  h_return2            = INTEGER2     NOT NULL WITH DEFAULT,
  h_frpr_name          = VARCHAR(24)  NOT NULL WITH DEFAULT,

  lp_remove_live_data     = PROCEDURE RETURNING INTEGER NOT NULL,
  lp_remove_table_status  = PROCEDURE RETURNING INTEGER NOT NULL,
  lp_error_check          = PROCEDURE RETURNING INTEGER NOT NULL WITH DEFAULT,

{
  SELECT DBMSINFO('username') AS g_user_id;
  SELECT DBMSINFO('database') AS g_database;

  h_frpr_name = 'arc_fp_hskp_tables';

  /*------------------------------------------------------------------
      Loop through H class tables listed in arc_table_data that have 
      a start period of equal or earlier than the archiving period
      and have not yet been housekept. 
  ------------------------------------------------------------------*/

  CALLPROC write_to_process_log
         ( p_frpr_name = :h_frpr_name,
           p_code      = 0,
           p_text      = 'Initialising housekeeping loop.');

  SELECT  a.table_name    AS h_table_name,
          a.period_column AS h_period_column,
          a.class         AS h_class
  FROM    arc_table_data   a,
          arc_table_status b
  WHERE   a.table_name    = b.table_name 
    AND   a.start_period <= :g_arch_period
    AND   b.period       <= :g_arch_period
    AND   a.type          = 'H'
    AND   b.status        = 'L'
  BEGIN

    MESSAGE 'Housekeeping: ' +:h_table_name +'...';

    /*...................................................................
        Remove the data from the live table
    ...................................................................*/

    h_return2 = CALLPROC lp_remove_live_data  
                       ( p_table_name    = :h_table_name,
                         p_period_column = :h_period_column);

    IF h_return2 != 0
    THEN
      /* Error message logged in local procedure */
      RETURN :h_return;
    ENDIF;
      
    /*...................................................................
        Remove the table record in arc_table_status
    ...................................................................*/

    h_return2 = CALLPROC lp_remove_table_status
                       ( p_table_name   = :h_table_name);

    IF h_return2 != 0
    THEN
      /* Error message logged in local procedure */
      RETURN :h_return;
    ENDIF;

    /*...................................................................
        Note removal in log
    ...................................................................*/

    h_text = '  Successfully housekept ' +:h_table_name +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = :h_text);

  END;
      
  h_return = CALLPROC lp_error_check (p_num_row_ck = 1); 

  IF h_return = 1
  THEN

    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = 'NOTE: No tables eligible for housekeeping loop.');

  ELSEIF h_return > 1
  THEN

    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :h_return,
             p_text      = 'ENDING: Failed to select for housekeeping loop.');

    RETURN :h_return;

  ENDIF;

  CALLPROC write_to_process_log
         ( p_frpr_name = :h_frpr_name,
           p_code      = 0,
           p_text      = 'Completed housekeeping loop.');

  RETURN 0

}

/**************************** LOCAL PROCEDURES ****************************/


/*=======================================================================
    Local procedure to check sql for errors during sections of code that
    utilise personal temp tables. Committed, no rollback.
=======================================================================*/

PROCEDURE lp_error_check (p_num_row_ck  = INTEGER4 NOT NULL WITH DEFAULT) =

DECLARE   lp_return   = INTEGER4  NOT NULL WITH DEFAULT,

{

  lp_return = CALLPROC batch_check_inq_ing 
            ( h_num_row_ck = :p_num_row_ck,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);

  RETURN IFNULL(:lp_return,9);

}

  
/*=======================================================================
    Local procedure to delete archived data from live table. 
=======================================================================*/

PROCEDURE lp_remove_live_data 
        ( p_table_name    = VARCHAR(32)  NOT NULL WITH DEFAULT,
          p_period_column = VARCHAR(32)  NOT NULL WITH DEFAULT)=

DECLARE   lp_return       = INTEGER4     NOT NULL WITH DEFAULT,
          lp_text         = VARCHAR(200) NOT NULL WITH DEFAULT,

{

  lp_text =  :p_period_column + ' <= ' + VARCHAR(:g_arch_period);

  IF h_class = 'T'
  THEN

    lp_text = 'DATE_PART(' +X'27' +'year' +X'27' +','
            + 'DATE(' +:p_period_column +')) = '
            + VARCHAR(:g_arch_period/100);

  ELSE

    lp_text = :p_period_column + ' <= ' +VARCHAR(:g_arch_period + 12);

  ENDIF;


  DELETE FROM :p_table_name
  WHERE       :lp_text;

  lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF lp_return > 1
  THEN
    h_text = 'ERROR: Failed to delete from ' +:p_table_name +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :lp_return,
             p_text      = :h_text);
    RETURN :h_return;
  ENDIF;

  RETURN 0

}

/*=======================================================================
    Local procedure to remove the record from arc_table_status
=======================================================================*/

PROCEDURE lp_remove_table_status
        ( p_table_name   = VARCHAR(32) NOT NULL WITH DEFAULT)=

DECLARE   lp_return       = INTEGER4    NOT NULL WITH DEFAULT,

{

  DELETE FROM arc_table_status
  WHERE  table_name  = :p_table_name
    AND  period     <= :g_arch_period;
      
  lp_return = CALLPROC lp_error_check (p_num_row_ck = 1);

  IF lp_return != 0
  THEN
    h_text = 'ERROR: Failed to remove status record for ' +:p_table_name +'.';
    CALLPROC write_to_process_log
           ( p_frpr_name = :h_frpr_name,
             p_code      = :lp_return,
             p_text      = :h_text);
    RETURN :h_return;
  ENDIF;

  RETURN 0

}



  
  



