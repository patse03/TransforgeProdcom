
/*--------------------------------------------------------------
    This procedure creates an extract file to load onto SAS
--------------------------------------------------------------*/

PROCEDURE msacm_fp_sas_tables ()=

DECLARE   ret_val           = INTEGER4 NOT NULL,
          h_frpr_name       = VARCHAR(25) NOT NULL,
          h_period          = INTEGER4 NOT NULL,
          start_period      = INTEGER4 NOT NULL,
          curr_period       = INTEGER4 NOT NULL,
          end_period        = INTEGER4 NOT NULL,
          froz_period       = INTEGER4 NOT NULL,
          run_period        = INTEGER4 NOT NULL,
          prev_period1      = INTEGER4 NOT NULL,
          prev_period2      = INTEGER4 NOT NULL,
          prev_period3      = INTEGER4 NOT NULL,
          prev_period4      = INTEGER4 NOT NULL,
	  prev1_avalue      = INTEGER4 NOT NULL,
	  prev2_avalue      = INTEGER4 NOT NULL,
	  prev3_avalue      = INTEGER4 NOT NULL,
	  prev4_avalue      = INTEGER4 NOT NULL,
	  prev1_acell       = CHAR(2) NOT NULL,
	  prev2_acell       = CHAR(2) NOT NULL,
	  prev3_acell       = CHAR(2) NOT NULL,
	  prev4_acell       = CHAR(2) NOT NULL,
          h_industry        = INTEGER4 NOT NULL,
          h_count           = INTEGER4 NOT NULL,
          h_cnt             = INTEGER4 NOT NULL,
          h_table           = VARCHAR(24) NOT NULL,
          h_table1          = VARCHAR(24) NOT NULL,
          h_table2          = VARCHAR(24) NOT NULL,
          h_table3          = VARCHAR(24) NOT NULL,
          h_table4          = VARCHAR(24) NOT NULL,
          h_table5          = VARCHAR(24) NOT NULL,
          h_table6          = VARCHAR(24) NOT NULL,
          h_table7          = VARCHAR(24) NOT NULL,
	  h_table_new       = VARCHAR(24) NOT NULL,
	  h_9200            = VARCHAR(24) NOT NULL,
          h_copy_table1     = VARCHAR(24) NOT NULL,
          h_copy_out     = VARCHAR(60) NOT NULL,
          h_command         = VARCHAR(500) NOT NULL,
          h_directory       = VARCHAR(100) NOT NULL,
          h_to_database     = VARCHAR(10) NOT NULL,
          h_save_name       = VARCHAR(30) NOT NULL,
          h_now             = VARCHAR(24) NOT NULL,
	  tables_exist      = procedure returning integer
{
    h_frpr_name  = 'msacm_fp_sas_tables';
    h_copy_table1 = 'sasconttemp';
    h_table2 = 'asi_carry_contributors';
    h_table3 = 'asi_carry';
    h_table4 = 'asi_carry_avg';
    h_table5 = 'asi_carry_ent';
    h_table6 = 'asi_carry_ent6';
    h_table7 = 'asi_carry_ent7';
    h_table_new = 'annual_9200';
    h_9200='carry_9200';
    IF g_periods > 5
    THEN
        g_row = 5;
    ELSE
        g_row = g_periods;
    ENDIF;
    IF g_inquiry = 14
    THEN
        start_period = :g_period[:g_periods].period;
        h_now = VARCHAR(DATE('now'));
        h_save_name = 'a' + ascii(:g_period[1].period) +
                VARCHAR(DATE_PART('year','now')) +
                RIGHT(LEFT(h_now,5),2) +
                LEFT(h_now,2) + '.' + ascii(:g_inquiry);

    ELSE
        start_period = :g_period[:g_periods].period;
        h_now = VARCHAR(DATE('now'));
        h_save_name = 'q' + ascii(:g_period[1].period) +
                VARCHAR(DATE_PART('year','now')) +
                RIGHT(LEFT(h_now,5),2) +
                LEFT(h_now,2) + '.' + ascii(:g_inquiry);

    ENDIF;

    end_period = :g_period[1].period;

    run_period = :g_period[1].period;
/*
message 'start ='  +ascii(:start_period)
+ 'end = ' + ascii(:end_period)
with style = popup;
*/
    h_copy_out = :g_path_name1 + :h_save_name;
   /*--------------------------------------------------------------
    Call procedure to set up previous quarterly periods to be used 
    when creating quarterly data for annual contributors carrying to
    quarterly results
   --------------------------------------------------------------*/

   IF g_inquiry = 15
   THEN
       ret_val = CALLPROC msa_fp_prev_periods (
                  inquiry      = :g_inquiry,
                  period       = :run_period,
                  prev_period1 = BYREF(:g_prev_period1),
                  prev_period2 = BYREF(:g_prev_period2),
                  prev_period3 = BYREF(:g_prev_period3),
                  prev_period4 = BYREF(:g_prev_period4));

        IF ret_val <> 0
        THEN
            INSERT INTO error_log
            VALUES(     'now',
                        'Error calling for previous periods',
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN 9;
        ENDIF;
   ENDIF;

   ret_val = CALLPROC msacm_fp_drop_table (
              h_table = :h_copy_table1);

    IF ret_val = 9
    THEN
        RETURN 9;
    ENDIF;

    ret_val = CALLPROC msacm_fp_drop_table (
              h_table = :h_table2);

    IF ret_val = 9
    THEN
        RETURN 9;
    ENDIF;

    ret_val = CALLPROC msacm_fp_drop_table (
              h_table = :h_table3);

    IF ret_val = 9
    THEN
        RETURN 9;
    ENDIF;

    ret_val = CALLPROC msacm_fp_drop_table (
              h_table = :h_table4);

    IF ret_val = 9
    THEN
        RETURN 9;
    ENDIF;


    ret_val = CALLPROC msacm_fp_drop_table (
              h_table = :h_table5);

    IF ret_val = 9
    THEN
        RETURN 9;
    ENDIF;


    ret_val = CALLPROC msacm_fp_drop_table (
              h_table = :h_table6);

    IF ret_val = 9
    THEN
        RETURN 9;
    ENDIF;


    ret_val = CALLPROC msacm_fp_drop_table (
              h_table = :h_table7);

    IF ret_val = 9
    THEN
        RETURN 9;
    ENDIF;
 
    ret_val = CALLPROC msacm_fp_drop_table (
	   h_table = :h_9200);

    IF ret_val = 9
    then
       RETURN 9;
    ENDIF;

    CREATE TABLE :h_copy_table1 (
	  contributor_reference char(11) not null,
	  period                integer4 not null,
	  question              integer4 not null,
	  quest_order           integer1 not null,
	  question_industry     integer4 not null,
	  lag                   char(1) not null,
	  contributor_inquiry   integer2 not null,
	  contributor_industry  integer4 not null,
	  proposed_industry     integer4 not null,
	  enterprise            char(10) not null,
	  register_emp          integer4 not null,
	  acell                 char(2) not null,
	  avalue                integer4 not null)
	  WITH LOCATION = (prod2);



        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val <> 0
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error creating ' + :h_copy_table1,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    
    /*------------------------------------------------------------------
     Copy the sim tables over one at a time
    ------------------------------------------------------------------*/

    SELECT   industry AS h_industry,
             period AS h_period
    FROM     :g_results_industry
    ORDER BY h_industry
    {
        h_table = 'sim_' + VARCHAR(:h_industry) + '_' +
                  VARCHAR(:h_period) + '_cqpv';

        ret_val = CALLPROC tables_exist ( table_name = :h_table);

        IF ret_val > 1
        THEN
            RETURN ret_val;
        ENDIF;

      IF ret_val = 0
      THEN
        MESSAGE 'Inserting table - '+:h_table;

        INSERT INTO :h_copy_table1
	SELECT a.contributor_reference,
	       a.qperiod as period,
	       a.question,
	       a.quest_order,
	       a.question_industry,
	       '0' as lag,
	       a.inquiry,
	       a.contributor_industry,
	       a.contributor_industry as proposed_industry,
	       a.enterprise,
	       int4(0) as register_emp,
	       acell,
	       avalue
        FROM :h_table a;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val <> 0
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error inserting data ' + :h_table,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
         /*   RETURN ret_val;*/
        ENDIF;
    
      ENDIF;

    };

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'System Error in select loop for sim tables ',
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
    
        ELSEIF ret_val = 1
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'No rows in select loop for sim tables ',
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;

        MESSAGE 'Inserting non responders into SAS table ';

        INSERT INTO :h_copy_table1
        SELECT a.contributor_reference,
	       a.period as period,
	       a.question,
	       a.quest_order,
	       a.question_industry,
	       '0' as lag,
	       :g_inquiry as inquiry,
	       a.contributor_industry,
	       a.contributor_industry as proposed_industry,
	       b.enterprise,
	       b.register_emp as register_emp,
	       a.acell,
	       a.avalue
        FROM cqpv a,
             contributor_period b
        WHERE acell = 'N'
        AND a.contributor_reference = b.contributor_reference
        AND a.period = b.period
        AND a.period BETWEEN :start_period
        AND :end_period
        AND a.contributor_inquiry = :g_inquiry
        AND question_industry IN
		(SELECT industry FROM :g_results_industry);

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val <> 0
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error inserting data from cqpv into ' + :h_copy_table1,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    
    IF g_inquiry = 14
    THEN

        MESSAGE 'Creating table3 for total_sales - carry';
        
	CREATE TABLE :h_table3
	AS SELECT b.contributor_reference ,
                  b.period as period,
		  b.period/100*100 as asi_period,
                  b.question,
                  b.quest_order,
                  b.question_industry,
                  b.contributor_industry,
                  b.avalue,
		  b.acell
								     
	FROM 
	     cqpv b
        WHERE b.contributor_inquiry = 15
	AND mod(question,10000) = 9200
        AND b.period/100*100 BETWEEN :start_period
		   AND :end_period;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val <> 0
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error creating for total sales carry in' + :h_table3,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    
        MESSAGE 'Creating table4 for total_sales - carry';
        
	CREATE TABLE :h_table4
	AS SELECT contributor_reference ,
                  asi_period as period,
                  question,
                  quest_order,
                  question_industry,
                  contributor_industry,
                  sum(avalue) as avalue
								     
	FROM :h_table3 
        GROUP BY contributor_reference,asi_period,question,quest_order,
	question_industry,contributor_industry;
	     
        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val <> 0
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error creating annual data ' + :h_table4,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    
        MESSAGE 'Creating table5 for total_sales - carry';
        
	CREATE TABLE :h_table5
	AS SELECT contributor_reference ,
                  a.period as period,
                  a.question,
                  a.quest_order,
                  a.question_industry,
                  '0' as lag,
                  :g_inquiry as inquiry,
                  a.contributor_industry,
                  a.contributor_industry as proposed_industry,
                  '            ' as enterprise,
                  int4(0) as register_emp,
                  'N' as acell,
                   avalue
								     
	FROM :h_table4 a;
	     
        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val <> 0
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error creating carry annual data ' + :h_table5,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    
        MESSAGE 'Updating table5 for total sales - carry';

        UPDATE :h_table5 a
        FROM contributor_period b
        SET enterprise = b.enterprise
        WHERE a.contributor_reference = b.contributor_reference
        AND a.period+12 = b.period
	AND a.enterprise in ('','0')
        AND b.inquiry = 15;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating enterprise 1 ' + :h_table5,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    
        UPDATE :h_table5 a
        FROM contributor_period b
        SET enterprise = b.enterprise
        WHERE a.contributor_reference = b.contributor_reference
        AND a.period+9 = b.period
        AND b.inquiry = 15;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val <> 0
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating enterprise 2' + :h_table5,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    
        UPDATE :h_table5 a
        FROM contributor_period b
        SET enterprise = b.enterprise
        WHERE a.contributor_reference = b.contributor_reference
        AND a.period+6 = b.period
        AND b.inquiry = 15;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val <> 0
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating enterprise 3 ' + :h_table5,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    
        UPDATE :h_table5 a
        FROM contributor_period b
        SET enterprise = b.enterprise
        WHERE a.contributor_reference = b.contributor_reference
        AND a.period+3 = b.period
        AND b.inquiry = 15;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val <> 0
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating enterprise 4 ' + :h_table5,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    
        UPDATE :h_table5 a
        SET    acell = 'I'
        WHERE  contributor_reference IN(
          SELECT contributor_reference FROM :h_table3 b
          WHERE acell = 'I'
          AND a.question = b.question
          AND b.period BETWEEN b.period/100*100+3 AND b.period/100*100+12);

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val <> 0
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating with I ' + :h_table5,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    
        UPDATE :h_table5 a
        SET    acell = 'A'
        WHERE  contributor_reference IN(
          SELECT contributor_reference FROM :h_table3 b
          WHERE acell = 'A'
          AND a.question = b.question
          AND b.period BETWEEN b.period/100*100+3 AND b.period/100*100+12)
	AND acell <> 'I';

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val <> 0
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating with A ' + :h_table5,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
        /*    RETURN ret_val;*/
        ENDIF;
    
        UPDATE :h_table5 a
        SET    acell = 'C'
        WHERE  contributor_reference IN(
          SELECT contributor_reference FROM :h_table3 b
          WHERE acell = 'C'
          AND a.question = b.question
          AND b.period BETWEEN b.period/100*100+3 AND b.period/100*100+12)
	AND acell NOT IN ('I','A');

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val <> 0
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating C ' + :h_table5,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
        /*    RETURN ret_val;*/
        ENDIF;
    
        UPDATE :h_table5 a
        SET    acell = 'P'
        WHERE  contributor_reference IN(
          SELECT contributor_reference FROM :h_table3 b
          WHERE acell = 'P'
          AND a.question = b.question
          AND b.period BETWEEN b.period/100*100+3 AND b.period/100*100+12)
	AND acell NOT IN ('I','A','C');

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val <> 0
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating P ' + :h_table5,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
 /*           RETURN ret_val;*/
        ENDIF;
    
        UPDATE :h_table5 a
        SET    acell = 'V'
        WHERE  contributor_reference IN(
          SELECT contributor_reference FROM :h_table3 b
          WHERE acell = 'V'
          AND a.question = b.question
          AND b.period BETWEEN b.period/100*100+3 AND b.period/100*100+12)
	AND acell NOT IN ('I','A','C','P');

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val <> 0
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating V ' + :h_table5,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
     /*       RETURN ret_val;*/
        ENDIF;
    
        UPDATE :h_table5 a
        SET    acell = 'B'
        WHERE  contributor_reference IN(
          SELECT contributor_reference FROM :h_table3 b
          WHERE acell = 'B'
          AND a.question = b.question
          AND b.period BETWEEN b.period/100*100+3 AND b.period/100*100+12)
	AND acell NOT IN ('I','A','C','P','V');

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val <> 0
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating B ' + :h_table5,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
   /*         RETURN ret_val;*/
        ENDIF;
    
        MESSAGE 'Inserting table5 for total sales - carry';
        
	INSERT INTO :h_copy_table1
	SELECT * FROM :h_table5;
	     

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val <> 0
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error inserting into sasconttemp from ' + :h_table5,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    
    ELSE

/* if inquiry = 15 */

        MESSAGE 'Creating table3 for total_sales - Select all ' +
                 'Annual Contributors 9200 question ';
        
	CREATE TABLE :h_table3
	AS SELECT contributor_reference ,
                  period as period,
                  question,
                  quest_order,
                  question_industry,
                  '0' as lag,
                  contributor_inquiry as inquiry,
                  contributor_industry,
                  contributor_industry as proposed_industry,
                  '            ' as enterprise,
                  int4(0) as register_emp,
                  acell,
                  avalue
								     
	FROM      cqpv 
        WHERE     contributor_inquiry = 14
	AND       MOD(question,10000) = 9200
	AND      (period = :start_period/100*100 
	OR        period = :end_period/100*100 );

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val <> 0
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error creating ' + :h_table3,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
/*--------------------------------------------------------------
    Create a table to hold all annual contributors for the quarterly period
   as the timing is too early for annual to have been selected when quarterly
   results are run. If annual data exists delete the dummy records
--------------------------------------------------------------*/


        ret_val = CALLPROC msacm_fp_drop_table (
                  h_table = :h_table_new);

        IF ret_val = 9
        THEN
            RETURN 9;
        ENDIF;

        CREATE TABLE :h_table_new
        AS SELECT *
        FROM         :h_table3
        WHERE        period = (:start_period/100) * 100;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val <> 0
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error creating ' + :h_table_new,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;

        UPDATE :h_table_new a
        FROM   :h_table3 b
        SET    avalue = b.avalue,
               acell = b.acell,
               question_industry = b.question_industry
        WHERE  a.period = b.period
        AND    a.question = b.question
        AND    a.contributor_reference = b.contributor_reference;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val <> 0
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating ' + :h_table_new,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;

        UPDATE :h_table_new 
        SET period = ((:start_period/100) * 100) + 100;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating ' + :h_table_new,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;


        DELETE FROM :h_table_new a
        WHERE contributor_reference IN
              (SELECT contributor_reference
               FROM   :h_table3 b
               WHERE  a.question = b.question
               AND    a.period   = b.period);

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error deleting from ' + :h_table_new,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
   
        INSERT INTO :h_table3
        SELECT * from :h_table_new;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error inserting into ' + :h_table3,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
   
        MESSAGE 'Creating table4 to set up quarterly periods for ' +
                'span for annual carryin';

                          
        
	CREATE TABLE :h_table4
	AS SELECT 
        DISTINCT  contributor_reference,
                  question,
                  quest_order,
                  question_industry,
                  :run_period as period,
                  INT4(0) AS avalue,
                  '  ' AS acell,
                  :g_prev_period1 AS prev_period1,
                  INT4(0) AS prev1_avalue,
                  '  ' AS prev1_acell,
                  :g_prev_period2 AS prev_period2,
                  INT4(0) AS prev2_avalue,
                  '  ' AS prev2_acell,
                  :g_prev_period3 AS prev_period3,
                  INT4(0) AS prev3_avalue,
                  '  ' AS prev3_acell,
                  :g_prev_period4 AS prev_period4,
                  INT4(0) AS prev4_avalue,
                  '  ' AS prev4_acell,
                  lag,
                  inquiry,
                  contributor_industry,
                  proposed_industry,
                  enterprise,
                  register_emp
								     
	FROM :h_table3; 
 
        
        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val <> 0
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error creating ' + :h_table4,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;

/*-------------------------------------------------------------------
  Update the quarterly columns from the annual figure. Use the latest
  annual period in the span first and then the annual period - 100
  If no match is found ie. the annual form is not in at time of 
  running quarterly results, then the previous annual figure will be 
  used as an imputed figure to create quarterly figures for the whole 
  span 
-------------------------------------------------------------------*/
/* run_period update */

        UPDATE :h_table4 a
        FROM   :h_table3 b
	SET    avalue = b.avalue/4,
	       acell  = b.acell
	WHERE  a.period/100 = b.period/100
	AND    b.period = :end_period/100 *100
	AND    a.contributor_reference = b.contributor_reference
	AND    a.question = b.question;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating current period acell/avalue on ' + :h_table4,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    
/* prev_period1 update */

        UPDATE :h_table4 a
        FROM   :h_table3 b
	SET    prev1_avalue = b.avalue/4,
	       prev1_acell  = b.acell
	WHERE  a.prev_period1/100 = b.period/100
	AND    b.period = :end_period/100 *100
	AND    a.contributor_reference = b.contributor_reference
	AND    a.question = b.question;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating prev_period1 acell/avalue on ' + :h_table4,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;

/* prev_period2 update */

        UPDATE :h_table4 a
        FROM   :h_table3 b
	SET    prev2_avalue = b.avalue/4,
	       prev2_acell  = b.acell
	WHERE  a.prev_period2/100 = b.period/100
	AND    b.period = :end_period/100 *100
	AND    a.contributor_reference = b.contributor_reference
	AND    a.question = b.question;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating prev_period2 acell/avalue on ' + :h_table4,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;


/* prev_period3 update */

        UPDATE :h_table4 a
        FROM   :h_table3 b
	SET    prev3_avalue = b.avalue/4,
	       prev3_acell  = b.acell
	WHERE  a.prev_period3/100 = b.period/100
	AND    b.period = :end_period/100 *100
	AND    a.contributor_reference = b.contributor_reference
	AND    a.question = b.question;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating prev_period3 acell/avalue on ' + :h_table4,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;


/* prev_period4 update */

        UPDATE :h_table4 a
        FROM   :h_table3 b
	SET    prev4_avalue = b.avalue/4,
	       prev4_acell  = b.acell
	WHERE  a.prev_period4/100 = b.period/100
	AND    b.period = :end_period/100 *100
	AND    a.contributor_reference = b.contributor_reference
	AND    a.question = b.question;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating prev_period4 acell/avalue on ' + :h_table4,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;

/*---------------------------------------------------------------------
  Use the previous annual period's data now but only update the temp 
  table if no match was found and it was not updated using the current 
  annual period's data above
---------------------------------------------------------------------*/

/* run_period update */
/***************check this*************/
        UPDATE :h_table4 a
        FROM   :h_table3 b
	SET    avalue = b.avalue/4,
	       acell  = b.acell
	WHERE  a.period/100 = b.period/100
	AND    b.period = :start_period/100 *100
	AND    a.contributor_reference = b.contributor_reference
	AND    a.question = b.question
        AND    a.acell = ''
        AND    a.avalue = 0;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating run_period for previous annual period - acell/avalue on ' + :h_table4,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;


/* prev_period1 update */

        UPDATE :h_table4 a
        FROM   :h_table3 b
	SET    prev1_avalue = b.avalue/4,
	       prev1_acell  = b.acell
	WHERE  a.prev_period1/100 = b.period/100
	AND    b.period = :start_period/100 *100
	AND    a.contributor_reference = b.contributor_reference
	AND    a.question = b.question
        AND    a.prev1_acell = ''
        AND    a.prev1_avalue = 0;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating prev_period1 for previous annual period - acell/avalue on ' + :h_table4,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;


/* prev_period2 update */

        UPDATE :h_table4 a
        FROM   :h_table3 b
	SET    prev2_avalue = b.avalue/4,
	       prev2_acell  = b.acell
	WHERE  a.prev_period2/100 = b.period/100
	AND    b.period = :start_period/100 *100
	AND    a.contributor_reference = b.contributor_reference
	AND    a.question = b.question
        AND    a.prev2_acell = ''
        AND    a.prev2_avalue = 0;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating prev_period2 for previous annual period - acell/avalue on ' + :h_table4,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;

/* prev_period3 update */

        UPDATE :h_table4 a
        FROM   :h_table3 b
	SET    prev3_avalue = b.avalue/4,
	       prev3_acell  = b.acell
	WHERE  a.prev_period3/100 = b.period/100
	AND    b.period = :start_period/100 *100
	AND    a.contributor_reference = b.contributor_reference
	AND    a.question = b.question
        AND    a.prev3_acell = ''
        AND    a.prev3_avalue = 0;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating prev_period3 for previous annual period - acell/avalue on ' + :h_table4,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;


/* prev_period4 update */

        UPDATE :h_table4 a
        FROM   :h_table3 b
	SET    prev4_avalue = b.avalue/4,
	       prev4_acell  = b.acell
	WHERE  a.prev_period4/100 = b.period/100
	AND    b.period = :start_period/100 *100
	AND    a.contributor_reference = b.contributor_reference
	AND    a.question = b.question
        AND    a.prev4_acell = ''
        AND    a.prev4_avalue = 0;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating prev_period4 for previous annual period - acell/avalue on ' + :h_table4,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;

/*---------------------------------------------------------------------
  Now all that should be left are the annual non responders for the
  latest period. Update these from the previous period and mark the 
  figures as imputed to stay in line with figures on asi_to_qsi_link 
  table
may need changing now as this not working

        UPDATE :h_table4 a
        FROM   :h_table4 b
        SET    avalue = b.prev4_avalue,
               acell  = 'I',
               prev1_avalue = b.prev4_avalue,
               prev1_acell = 'I',
               prev2_avalue = b.prev4_avalue,
               prev2_acell = 'I',
               prev3_avalue = b.prev4_avalue,
               prev3_acell = 'I'
        WHERE  a.contributor_reference = b.contributor_reference
        AND    a.question = b.question
        AND    a.avalue = 0
        AND    a.acell = 'N'
        AND    a.prev1_avalue = 0
        AND    a.prev1_acell = 'N' 
        AND    a.prev2_avalue = 0
        AND    a.prev2_acell = 'N' 
        AND    a.prev3_avalue = 0
        AND    a.prev3_acell = 'N';
---------------------------------------------------------------------*/
               

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating non responders carry in on ' + :h_table4,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
/* now need to put this info in format to go into hcopytable1
message
'cuurent = ' + ascii(:run_period) +
'prev1 = ' + ascii(:g_prev_period1) +
'prev2 = ' + ascii(:g_prev_period2) +
'prev3 = ' + ascii(:g_prev_period3) +
'prev4 = ' + ascii(:g_prev_period4) 
with style  = popup;
*/
        INSERT INTO :h_copy_table1 
        SELECT      contributor_reference,
                    period,
                    question,
                    quest_order,
                    question_industry,
                    lag,
                    inquiry,
                    contributor_industry,
                    proposed_industry,
                    enterprise,
                    register_emp,
                    acell,
                    avalue
        FROM       :h_table4
        WHERE      period = :run_period;
                      
        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error inserting current_period into ' + :h_copy_table1,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    

        INSERT INTO :h_copy_table1 
        SELECT      contributor_reference,
                    prev_period1,
                    question,
                    quest_order,
                    question_industry,
                    lag,
                    inquiry,
                    contributor_industry,
                    proposed_industry,
                    enterprise,
                    register_emp,
                    prev1_acell,
                    prev1_avalue
        FROM       :h_table4
        WHERE       prev_period1 = :g_prev_period1;
                      
        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error inserting prev1_period into ' + :h_copy_table1,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;


        INSERT INTO :h_copy_table1 
        SELECT      contributor_reference,
                    prev_period2,
                    question,
                    quest_order,
                    question_industry,
                    lag,
                    inquiry,
                    contributor_industry,
                    proposed_industry,
                    enterprise,
                    register_emp,
                    prev2_acell,
                    prev2_avalue
        FROM       :h_table4
        WHERE       prev_period2 = :g_prev_period2;
                      
        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error inserting prev2_period into ' + :h_copy_table1,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;


        INSERT INTO :h_copy_table1 
        SELECT      contributor_reference,
                    prev_period3,
                    question,
                    quest_order,
                    question_industry,
                    lag,
                    inquiry,
                    contributor_industry,
                    proposed_industry,
                    enterprise,
                    register_emp,
                    prev3_acell,
                    prev3_avalue
        FROM       :h_table4
        WHERE       prev_period3 = :g_prev_period3;
                      
        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error inserting prev3_period into ' + :h_copy_table1,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;


        INSERT INTO :h_copy_table1 
        SELECT      contributor_reference,
                    prev_period4,
                    question,
                    quest_order,
                    question_industry,
                    lag,
                    inquiry,
                    contributor_industry,
                    proposed_industry,
                    enterprise,
                    register_emp,
                    prev4_acell,
                    prev4_avalue
        FROM       :h_table4
        WHERE       prev_period4 = :g_prev_period4;
                      
        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error inserting prev4_period into ' + :h_copy_table1,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;

/*
I don't think the following works as there is a join with a quarterly period on table a and an annual period on table b - look into this and try and change*/
	DELETE FROM :h_table4 a
        WHERE a.contributor_reference IN 
                (SELECT contributor_reference FROM contributor_period b
                WHERE a.period = b.period
                AND a.contributor_industry != b.contributor_industry);


        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error deleting from ' + :h_table4,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    
    ENDIF;
/* this delete - is it supposed to delete quarterly data????? why????*/
        IF mod(run_period,100) != '00'
	THEN
	    DELETE FROM :h_copy_table1 a
            WHERE a.contributor_reference IN 
                (SELECT contributor_reference FROM contributor_period b
                WHERE a.period = b.period
                AND a.contributor_industry != b.contributor_industry);

        ENDIF;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error deleting from ' + :h_table4,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    
    /*changed this delete to delete the earlier tids rather than the
    the latest as this caused problem with data created for annual
    contributors carrying in to quarterly results 
    JW Feb 2002*/

    MESSAGE 'Deleting duplicates SAS table ';

    DELETE FROM :h_copy_table1 a
    WHERE contributor_reference IN (
	SELECT contributor_reference FROM :h_copy_table1 b
	WHERE a.quest_order = b.quest_order 
	AND a.question = b.question
	AND a.period = b.period
	AND a.tid < b.tid);


        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error deleting earliest tids ' + :h_table4,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    
    MESSAGE 'Deleting reclassification duplicates from SAS table ';

   /*----------------------------------------------------------------
   During checking of 200109 results in Feb 2002 - problems were found 
   mostly due to the early timimg of results whereby annual contributors 
   carrying in to quarterly industries didn't have enough data in and 
   too many were being treated as non/never responders. This caused 
   problems with the grossing factors in estimation. As well as this 
   there were genuine duplicates created in this program that were 
   included in the quarterly extract data that was copied down to the 
   SAS system. These duplicates were reclassifications from one annual 
   industry to another. They were updated on IDBR during the annual update
   in June 2001 and then selected on the current field for annual 2001 
   Prodcom.
   The following delete will delete the genuine duplicates for the 
   reclassified contributors!!!! I hope
   ----------------------------------------------------------------*/
        
	DELETE FROM :h_copy_table1 a
        WHERE contributor_reference IN (
              SELECT contributor_reference 
              FROM :h_copy_table1 b
              WHERE a.contributor_reference = b.contributor_reference
              AND   a.contributor_industry <> b.contributor_industry
              AND   MOD(a.question,10000) = 9200
              AND   MOD(b.question,10000) = 9200
              AND   a.period = b.period 
              AND   a.contributor_industry IN (
                    SELECT contributor_industry
                    FROM   contributor_period c
                    WHERE  a.contributor_reference = c.contributor_reference
                    AND    c.period = :start_period/100 * 100));
              
        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error deleting duplicates due to reclass ' + :h_copy_table1,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    

  /* delete future periods as these may cause problem ???????*/

    DELETE FROM :h_copy_table1
    WHERE period > :run_period
    AND contributor_industry NOT IN
	(SELECT industry 
	 FROM   industry
	 WHERE  inquiry = 15);

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error deleting future periods from' + :h_copy_table1,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    
  /*-------------------------------------------------------------------
    If quarterly results with annual carry in then duplicates are 
    created as the quarterly span is over 2 annual periods. If
    the contributor is no longer selected for the latest annual period 
    then the quarterly constructed data from the annula figure is not 
    required and the records should be deleted
    the following delete does not work for Q1 as the annual period is 
    not yet live and this deletes all the Q1 records. It worked for Q4 
    so I added the extra check in the IF statement
  -------------------------------------------------------------------*/
    IF :g_inquiry = 15 AND MOD(:run_period,100) = 12
    THEN 
        DELETE FROM :h_copy_table1
        WHERE period/100 = :run_period/100
        AND   contributor_inquiry = 14
        AND   contributor_reference NOT IN
              (SELECT contributor_reference
               FROM   contributor_period
               WHERE  period = :run_period/100 * 100);
    ENDIF;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
    
    IF ret_val = 9 
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error deleting not selected duplicates from  ' + :h_copy_table1,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;
    
    MESSAGE 'Modifying SAS table ';

    MODIFY :h_copy_table1 TO BTREE UNIQUE ON  contributor_reference,
                                              quest_order,
					      question,
					      period;

    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
    
    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error modifying ' + :h_copy_table1,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;
    
    MESSAGE 'Updating SAS table for employment ';


    IF g_inquiry = 15
    THEN

        UPDATE :h_copy_table1 a
        FROM contributor_period b
        SET register_emp = b.register_emp
        WHERE a.contributor_reference = b.contributor_reference
        AND a.period = b.period;


        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating regemp ' + :h_copy_table1,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    
    ELSE


      h_cnt = g_row;
      WHILE h_cnt >= 1
      DO
       curr_period = :g_period[h_cnt].period;
       message 'curr_period ' + ascii(:curr_period);
		     
        UPDATE :h_copy_table1 a
        FROM contributor_period b
        SET register_emp = b.register_emp
        WHERE a.contributor_reference = b.contributor_reference
        AND a.period = b.period
	AND a.period = :curr_period;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating ' + :h_copy_table1,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    

       h_cnt = h_cnt - 1;

      ENDWHILE;

   ENDIF;


    ret_val = CALLPROC batch_check_inq_ing (
              h_num_row_ck = 1,
              h_commit     = 'Y',
              h_rollback   = 'N',
              h_frpr_name  = :h_frpr_name);
    
    IF ret_val <> 0
    THEN
        INSERT INTO error_log
        VALUES (    'now',
                    'Error updating regemp ' + :h_copy_table1,
                    :h_frpr_name,
                    :ret_val,
                    :g_user_id);
        COMMIT;
        RETURN ret_val;
    ENDIF;

    IF g_inquiry = 15
    THEN

    MESSAGE 'Updating SAS table for employment - carry';

        UPDATE :h_copy_table1 a
        FROM contributor_period b
        SET register_emp = b.register_emp,
	    enterprise = b.enterprise
        WHERE a.contributor_reference = b.contributor_reference
        AND a.period/100*100 = b.period
        AND b.inquiry = 14;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating regemp/ent 1 ' + :h_copy_table1,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    
        UPDATE :h_copy_table1 a
        FROM contributor_period b
        SET register_emp = b.register_emp,
	    enterprise = b.enterprise
        WHERE a.contributor_reference = b.contributor_reference
        AND (a.period/100*100) - 100 = b.period
        AND b.inquiry = 14;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating regemp/ent 2' + :h_copy_table1,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    
    ELSE

    MESSAGE 'Creating table6 for employment - carry';
        
	CREATE TABLE :h_table6
	AS SELECT b.contributor_reference ,
		  b.period as qsi_period,
		  b.period/100*100 as asi_period,
		  register_emp
	FROM 
	     contributor_period b
        WHERE b.period/100*100 BETWEEN :start_period
		   AND :end_period
        AND inquiry = 15;


        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error creating ' + :h_table6,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    
    MESSAGE 'Creating table7 for employment - carry';
        
	CREATE TABLE :h_table7
	AS SELECT contributor_reference ,
		  asi_period as period,
		  avg(register_emp) as register_emp
	FROM :h_table6
	GROUP BY contributor_reference,asi_period;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error creating ' + :h_table7,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    
        MESSAGE 'Updating SAS table for employment - carry';

        UPDATE :h_copy_table1 a
        FROM :h_table7 b
        SET register_emp = b.register_emp
        WHERE a.contributor_reference = b.contributor_reference
        AND a.period = b.period;


        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating sasconttemp from ' + :h_table7,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    
    ENDIF;

    MESSAGE 'Updating SAS table for lag';


    IF g_inquiry = 15
    THEN

       UPDATE :h_copy_table1 a
       FROM question_library b
       SET lag = varchar(b.lag)
       WHERE a.question = b.question
       AND a.period/100*100 = b.period;


        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating sasconttemp from qlibrary ',
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    
    ELSE

      h_cnt = g_row;
      WHILE h_cnt >= 1
      DO
       curr_period = :g_period[h_cnt].period;
		     
       UPDATE :h_copy_table1 a
       FROM question_library b
       SET lag = varchar(b.lag)
       WHERE a.question = b.question
       AND a.period = b.period
       AND a.period = :curr_period;


        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating lag on ' + :h_copy_table1,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    
       h_cnt = h_cnt - 1;

      ENDWHILE;

   ENDIF;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating lags ' + :h_copy_table1,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    
    MESSAGE 'Updating SAS table for reclassification 1';
/***********
failed for annual 200100 due to ambiguos replace as there are
duplicates on reclass_contrib_archive. commented out as not really
necessary


    UPDATE :h_copy_table1 a
    FROM reclass_contrib_archive b
    SET proposed_industry = b.proposed_ind
    WHERE a.contributor_reference = b.contributor_reference
    AND a.period = b.period;


        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating from reclass contrin archive ' + :h_copy_table1,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
   **********/

    MESSAGE 'Updating SAS table for reclassification 2';

    UPDATE :h_copy_table1 a
    FROM reclass_contrib b
    SET proposed_industry = b.proposed_ind
    WHERE a.contributor_reference = b.contributor_reference
    AND a.period = b.period;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating from reclass_contrib' + :h_copy_table1,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    
    MESSAGE 'Updating SAS table with contributor inquiry ';

    UPDATE :h_copy_table1 a
    FROM    contributor_period b
    SET     contributor_inquiry = b.inquiry
    WHERE   a.contributor_reference = b.contributor_reference
    AND     a.period = b.period;

        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val = 9 
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error updating with inquiry ' + :h_copy_table1,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    
    MESSAGE 'Copying SAS table to delimited file';
    
    COPY table :h_copy_table1
    (
	  contributor_reference = c(0)'^',
	  period                = c(0)'^' ,
	  question              = c(0)'^' ,
	  quest_order           = c(0)'^' ,
	  question_industry     = c(0)'^' ,
	  lag                   = c(0)'^' ,
	  contributor_inquiry   = c(0)'^' ,
	  contributor_industry  = c(0)'^' ,
	  proposed_industry     = c(0)'^' ,
	  enterprise            = c(0)'^',
	  register_emp          = c(0)'^' ,
	  acell                 = c(0)'^',
	  avalue                = c0nl )
    INTO :h_copy_out;


        ret_val = CALLPROC batch_check_inq_ing (
                  h_num_row_ck = 1,
                  h_commit     = 'Y',
                  h_rollback   = 'N',
                  h_frpr_name  = :h_frpr_name);
    
        IF ret_val <> 0
        THEN
            INSERT INTO error_log
            VALUES (    'now',
                        'Error copying to file ' + :h_copy_table1,
                        :h_frpr_name,
                        :ret_val,
                        :g_user_id);
            COMMIT;
            RETURN ret_val;
        ENDIF;
    
    RETURN 0;
}
PROCEDURE tables_exist(table_name = char(24) not null) =

{

  SELECT table_name
  FROM   iitables
  WHERE  table_name = :table_name
  AND    table_owner = :g_user_id;

  ret_val = CALLPROC msacm_fp_check_inq_ing(h_num_row_ck = 1,
			      h_commit     = 'Y',
                              h_rollback   = 'N',
                              h_frpr_name = :h_frpr_name);

  RETURN ret_val;

}
