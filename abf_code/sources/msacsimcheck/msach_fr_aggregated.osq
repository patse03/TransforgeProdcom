
INITIALIZE () =

DECLARE h_retries_allowed = INTEGER1 NOT NULL,
        h_retries         = INTEGER1 NOT NULL,
        h_retry_or_not    = CHAR(5) NOT NULL,
        last_unit_value   = INTEGER1 NOT NULL,
        h_frpr_name       = VARCHAR(24) NOT NULL,
        h_field_name      = VARCHAR(24) NOT NULL,
        h_rows            = INTEGER4 NOT NULL,
        h_record          = INTEGER4 NOT NULL,
        h_max_rows        = INTEGER4 NOT NULL,
        h_question        = INTEGER4 NOT NULL,
        h_counter         = INTEGER4 NOT NULL,
        h_uv02_rows       = INTEGER4 NOT NULL,
        h_uv04_rows       = INTEGER4 NOT NULL,
        h_table           = VARCHAR(24) NOT NULL,
        h_qrp_table1      = VARCHAR(24) NOT NULL,
        h_qrp_table2      = VARCHAR(24) NOT NULL,
        h_output          = VARCHAR(40) NOT NULL,
        h_yesno           = CHAR(1) NOT NULL,
        h_test            = INTEGER1 NOT NULL,
        period1           = INTEGER4 NOT NULL,
        period2           = INTEGER4 NOT NULL,
        period3           = INTEGER4 NOT NULL,
        period4           = INTEGER4 NOT NULL,
        period5           = INTEGER4 NOT NULL,
        ret_val           = INTEGER1 NOT NULL,
        lp_load_table     = PROCEDURE RETURNING INTEGER

{
    h_retries_allowed = 3;
    h_frpr_name = 'msach_fr_aggregated';
    h_table = 'temp_results_' + VARCHAR(:g_industry);
    print_message = '';
    msa_date = 'now';
    uvs_setup = '';
    SET_FORMS FIELD '' (MODE(tf) = 'UPDATE');

    cutoff = 0;
    SET_FORMS FIELD '' (DISPLAYONLY(cutoff) = 1,
                        REVERSE(cutoff) = 1,
                        UNDERLINE(cutoff) = 0);

    SELECT user_name AS g_user_id FROM iidbconstants;

    industry = :g_industry;
    inquiry = :g_inquiry;

    curr_period = :g_period[1].period;
    curr_period2 = :curr_period;
    IF g_periods >= 2
    THEN
        prev_period = :g_period[2].period;
    ELSE
        prev_period = 0;
    ENDIF;

    MESSAGE 'Selecting Questions for Industry ' +
             VARCHAR(:industry) + ' . . .';

    ret_val = CALLPROC msa_fp_drop_table (
              h_table = :h_table);

    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    /*------------------------------------------------------------------
    Create Table of all questions used in last two periods
    ------------------------------------------------------------------*/

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        CREATE TABLE :h_table
        AS SELECT    DISTINCT(question),
                     INT1(0) AS quest_order,
                     INT8(0) AS prev_value,
                     INT8(0) AS curr_value,
                     INT2(0) AS prev_ents,
                     INT2(0) AS curr_ents,
                     INT8(0) AS diff,
                     FLOAT8(0) AS perc_diff,
                     FLOAT8(0) AS perc_imp,
                     FLOAT8(0) AS perc_con
        FROM         question_period
        WHERE        question_industry = :industry
        AND          period IN (:curr_period,:prev_period);

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in accessing question_period'
        WITH STYLE = POPUP;
        RETURN 9;

    ELSEIF ret_val = 1
    THEN
        MESSAGE 'No Questions were found for this Industry'
        WITH STYLE = POPUP;
        RETURN 9;
    ENDIF;

    /*------------------------------------------------------------------
    Add quest_order
    ------------------------------------------------------------------*/

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        IF :g_inquiry = :gc_asi
        THEN
            UPDATE :h_table a
            FROM   question_library b
            SET    quest_order = b.quest_order
            WHERE  a.question = b.question
            AND    b.period = :curr_period;
        ELSE
            UPDATE :h_table a
            FROM   question_library b
            SET    quest_order = b.quest_order
            WHERE  a.question = b.question
            AND    b.period = (:curr_period / 100 * 100); 
        ENDIF;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in accessing question'
        WITH STYLE = POPUP;
        RETURN 9;

    ELSEIF ret_val = 1
    THEN
        MESSAGE 'No Quest_Orders were found for this Industry'
        WITH STYLE = POPUP;
        RETURN 9;
    ENDIF;


    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        IF :g_inquiry = :gc_asi
        THEN
            UPDATE :h_table a
            FROM   question_library b
            SET    quest_order = b.quest_order
            WHERE  a.question = b.question
            AND    b.period = :prev_period;
        ELSE
            UPDATE :h_table a
            FROM   question_library b
            SET    quest_order = b.quest_order
            WHERE  a.question = b.question
            AND    b.period = (:prev_period / 100 * 100); 
        ENDIF;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in accessing question'
        WITH STYLE = POPUP;
        RETURN 9;

    ELSEIF ret_val = 1
    THEN
        MESSAGE 'No Quest_Orders were found for this Industry'
        WITH STYLE = POPUP;
        RETURN 9;
    ENDIF;

    /*------------------------------------------------------------------
    Add quest_order to 9100 questions
    ------------------------------------------------------------------*/

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        UPDATE :h_table a
        SET    quest_order = 11
        WHERE  mod(a.question,10000) = 9100
	AND quest_order = 0;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in accessing question'
        WITH STYLE = POPUP;
        RETURN 9;

    ENDIF;


    /*------------------------------------------------------------------
    Delete CSDB Questions (quest_order = 12)
    ------------------------------------------------------------------*/

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        DELETE FROM :h_table
        WHERE       quest_order = 12;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in deleting CSDB from ' + :h_table
        WITH STYLE = POPUP;
        RETURN 9;

    ENDIF;

    /*------------------------------------------------------------------
    Update with Old Period's data
    ------------------------------------------------------------------*/

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        UPDATE :h_table a
        FROM   question_period b
        SET    prev_value = b.total_value,
               prev_ents = b.enterprise_count
        WHERE  a.question = b.question
        AND    b.period = :prev_period;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error updating old values from question_period'
        WITH STYLE = POPUP;
        RETURN 9;

    ENDIF;

    /*------------------------------------------------------------------
    Update with New Period's data
    ------------------------------------------------------------------*/

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        UPDATE :h_table a
        FROM   question_period b
        SET    curr_value = b.total_value,
               curr_ents = b.enterprise_count,
               perc_imp = (b.imp_total_value * 100.0 / b.total_value),
               perc_con = (b.con_total_value * 100.0 / b.total_value)
        WHERE  a.question = b.question
        AND    b.period = :curr_period;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error updating new values from question_period'
        WITH STYLE = POPUP;
        RETURN 9;

    ENDIF;

    /*------------------------------------------------------------------
    Update replaced questions
    ------------------------------------------------------------------*/

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        UPDATE :h_table a
        FROM   :h_table b,
               question_history c
        SET    prev_value = b.prev_value,
               prev_ents  = b.prev_ents
        WHERE  a.question = c.new_question
        AND    b.question = c.old_question
        AND    c.period = :curr_period
        AND    c.rep_type = 1;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in updating question differences'
        WITH STYLE = POPUP;
        RETURN 9;

    ENDIF;

    /*------------------------------------------------------------------
    Update with Differences
    ------------------------------------------------------------------*/

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        UPDATE :h_table
        SET    diff = curr_value - prev_value,
               perc_diff = (curr_value - prev_value) * 100.0 / prev_value
        WHERE  (prev_value > 0);

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error updating percentage changes'
        WITH STYLE = POPUP;
        RETURN 9;

    ENDIF;

    /*------------------------------------------------------------------
    Update perc difference from ZERO to >ZERO to 999999, so that the
    display will show asterisks
    ------------------------------------------------------------------*/

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        UPDATE :h_table
        SET    perc_diff = 999999
        WHERE  curr_value > 0
        AND    prev_value = 0;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error updating infinite percentage changes'
        WITH STYLE = POPUP;
        RETURN 9;

    ENDIF;

    ret_val = CALLPROC lp_load_table ();
    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    RESUME FIELD tf;

}

FIELD cutoff =
{
    SET_FORMS FIELD '' (DISPLAYONLY(cutoff) = 1,
                        REVERSE(cutoff) = 1,
                        UNDERLINE(cutoff) = 0);

    ret_val = CALLPROC lp_load_table ();
    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;
}

'Help', KEY FRSKEY1 =
{
    HELP_FORMS(SUBJECT = 'HELP',
               FILE = :g_help + '/' + :h_frpr_name + '.hlp');

}

'PrevVals' =
{
    INQUIRE_FORMS FORM (h_field_name = FIELD);

    IF :h_field_name <> 'tf'
    THEN
        MESSAGE 'Please highlight the required Question'
        WITH STYLE = POPUP;
        RESUME;
    ENDIF;

    INQUIRE_FORMS TABLE '' (h_rows = DATAROWS(tf));

    IF :h_rows = 0
    THEN
        MESSAGE 'Please highlight the required Question'
        WITH STYLE = POPUP;
        RESUME;
    ENDIF;

    h_question = :tf.question;
    h_counter = 0;

    UNLOADTABLE g_question_array
    {
        h_counter = :h_counter + 1;
        IF :g_question_array.question = :tf.question
        THEN
            ENDLOOP;
        ENDIF;
    };

    ret_val = CALLFRAME msach_fr_prev_vals (
              h_counter = :h_counter,
              question  = BYREF(:h_question));

    UNLOADTABLE tf (h_record = _RECORD)
    {
         IF :tf.question = :h_question
         THEN
             SCROLL tf TO :h_record;
             RESUME FIELD tf;
         ENDIF;
    };

    msa_date = 'now';
}

'AlterLimit' =
{
    SET_FORMS FIELD '' (DISPLAYONLY(cutoff) = 0,
                        REVERSE(cutoff) = 0,
                        UNDERLINE(cutoff) = 1);
    RESUME FIELD cutoff;
}

'UV02s' =
{

    IF :h_uv02_rows = 0
    THEN
        MESSAGE 'There are no 02 Unit Values shown for this Industry'
        WITH STYLE = POPUP;
        RESUME;
    ENDIF;

    INQUIRE_FORMS FORM (h_field_name = FIELD);

    IF :h_field_name <> 'tf'
    THEN
        MESSAGE 'Please highlight the required Value Question'
        WITH STYLE = POPUP;
        RESUME;
    ENDIF;

    INQUIRE_FORMS TABLE '' (h_rows = DATAROWS(tf));

    IF :h_rows = 0
    THEN
        MESSAGE 'Please highlight the required Value Question'
        WITH STYLE = POPUP;
        RESUME;
    ENDIF;

    IF MOD(:tf.question,10) <> 1 OR :tf.quest_order <> 1
    THEN
        MESSAGE 'Please highlight the required Value Question'
        WITH STYLE = POPUP;
        RESUME;
    ENDIF;

    h_question = :tf.question;

    ret_val = CALLFRAME msach_fr_unit_val (
              unit_value      = 2,
              last_unit_value = :last_unit_value,
              question        = BYREF(:h_question));

    IF ret_val <> 0
    THEN
        RESUME;
    ENDIF;

    last_unit_value = 2;
    uvs_setup = '(02 UVs have been set up)';

    UNLOADTABLE tf (h_record = _RECORD)
    {
         IF :tf.question = :h_question
         THEN
             SCROLL tf TO :h_record;
             RESUME FIELD tf;
         ENDIF;
    };
}

'UV04s' =
{

    IF :h_uv04_rows = 0
    THEN
        MESSAGE 'There are no 04 Unit Values shown for this Industry'
        WITH STYLE = POPUP;
        RESUME;
    ENDIF;

    INQUIRE_FORMS FORM (h_field_name = FIELD);

    IF :h_field_name <> 'tf'
    THEN
        MESSAGE 'Please highlight the required Value Question'
        WITH STYLE = POPUP;
        RESUME;
    ENDIF;

    INQUIRE_FORMS TABLE '' (h_rows = DATAROWS(tf));

    IF :h_rows = 0
    THEN
        MESSAGE 'Please highlight the required Value Question'
        WITH STYLE = POPUP;
        RESUME;
    ENDIF;

    IF MOD(:tf.question,10) <> 1 OR :tf.quest_order <> 1
    THEN
        MESSAGE 'Please highlight the required Value Question'
        WITH STYLE = POPUP;
        RESUME;
    ENDIF;

    h_question = :tf.question;

    ret_val = CALLFRAME msach_fr_unit_val (
              unit_value      = 4,
              last_unit_value = :last_unit_value,
              question        = BYREF(:h_question));

    IF ret_val <> 0
    THEN
        RESUME;
    ENDIF;

    last_unit_value = 4;
    uvs_setup = '(04 UVs have been set up)';

    UNLOADTABLE tf (h_record = _RECORD)
    {
         IF :tf.question = :h_question
         THEN
             SCROLL tf TO :h_record;
             RESUME FIELD tf;
         ENDIF;
    };
}

'ContributorData' =
{
    INQUIRE_FORMS FORM (h_field_name = FIELD);

    IF :h_field_name <> 'tf'
    THEN
        MESSAGE 'Please highlight the required Question'
        WITH STYLE = POPUP;
        RESUME;
    ENDIF;

    INQUIRE_FORMS TABLE '' (h_rows = DATAROWS(tf));

    IF :h_rows = 0
    THEN
        MESSAGE 'Please highlight the required Question'
        WITH STYLE = POPUP;
        RESUME;
    ENDIF;

    h_question = :tf.question;
    h_counter = 0;

    UNLOADTABLE g_question_array
    {
        h_counter = :h_counter + 1;
        IF :g_question_array.question = :tf.question
        THEN
            ENDLOOP;
        ENDIF;
    };

    ret_val = CALLFRAME msach_fr_qrp (
              h_counter = :h_counter,
              cutoff = :cutoff,
              question  = BYREF(:h_question));

    UNLOADTABLE tf (h_record = _RECORD)
    {
         IF :tf.question = :h_question
         THEN
             SCROLL tf TO :h_record;
             RESUME FIELD tf;
         ENDIF;
    };

    msa_date = 'now';
}

'Print' =
{

  /*------------------------------------------------------------------
		Prevent non PRODCOM staff from printing.
  ------------------------------------------------------------------*/

    IF :g_user_id LIKE 'piprod%'
    THEN
	MESSAGE SQUEEZE('Sorry, but only PRODCOM Staff are allowed ' +
			'to use this option')
	WITH STYLE=POPUP;
	RETURN 1;
    ENDIF;

    DISPLAY SUBMENU
    {
        INITIALIZE =
        {
            period1 = :g_period[1].period;
            period2 = :g_period[2].period;
            period3 = :g_period[3].period;
            IF :g_inquiry = :gc_qsi
            THEN
                period4 = :g_period[4].period;
                period5 = :g_period[5].period;
            ENDIF;

            SET_FORMS COLUMN  '' tf(INVISIBLE(print) = 0);
            print_message = 'Type P';
            REDISPLAY;
            RESUME FIELD tf.print;
        }

        'Help', KEY FRSKEY1 =
        {
            HELP_FORMS(SUBJECT = 'HELP',
                       FILE = :g_help + '/' + :h_frpr_name + '.hlp');

        }

        'PrintAll' =
        {

            h_yesno = '';
            WHILE h_yesno <> 'y' AND h_yesno <> 'n'
            DO
                h_yesno = PROMPT 'Really print ALL?' +
                                 ' Type Y/N and press <return>'
                          WITH STYLE = POPUP;
                h_yesno = LOWERCASE(:h_yesno);
            ENDWHILE;

            IF h_yesno = 'n'
            THEN
                RESUME;
            ENDIF;

            h_qrp_table1  = 'temp_' + VARCHAR(:g_industry) + '_prt';
            h_qrp_table2 = 'temp_' + VARCHAR(:g_industry) + '_ppers';

            ret_val = CALLPROC msa_fp_drop_table (
                      h_table = :h_qrp_table1);

            IF ret_val <> 0
            THEN
                RETURN ret_val;
            ENDIF;

            h_retry_or_not      = 'RETRY';
            h_retries           = 0;

            WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
            DO

                h_retries = :h_retries + 1;

                IF :g_inquiry = :gc_asi
                THEN
                    CREATE TABLE :h_qrp_table1 (
                      contributor_reference CHAR(11) NOT NULL,
                      inquiry               INTEGER1 NOT NULL,
                      enterprise            CHAR(10) NOT NULL,
                      question              INTEGER4 NOT NULL,
                      question_industry     INTEGER4 NOT NULL,
                      contributor_industry  INTEGER4 NOT NULL,
                      aperiod               INTEGER4 NOT NULL,
                      confirmation_code     CHAR(2)  NOT NULL,
                      acell                 CHAR(2)  NOT NULL,
                      avalue                INTEGER8 NOT NULL);
                ELSE
                    CREATE TABLE :h_qrp_table1 (
                      contributor_reference CHAR(11) NOT NULL,
                      inquiry               INTEGER1 NOT NULL,
                      enterprise            CHAR(10) NOT NULL,
                      question              INTEGER4 NOT NULL,
                      question_industry     INTEGER4 NOT NULL,
                      contributor_industry  INTEGER4 NOT NULL,
                      qperiod               INTEGER4 NOT NULL,
                      confirmation_code     CHAR(2)  NOT NULL,
                      acell                 CHAR(2)  NOT NULL,
                      avalue                INTEGER8 NOT NULL);
                ENDIF;

                ret_val = CALLPROC check_inq_ing (
                          h_num_row_ck      = 1,
                          h_commit          = 'Y',
                          h_rollback        = 'N',
                          h_retries         = :h_retries,
                          h_retries_allowed = :h_retries_allowed,
                          h_frpr_name       = :h_frpr_name);

                IF ret_val <> 7
                THEN
                    h_retry_or_not = '';
                ENDIF;

            ENDWHILE;

            IF ret_val = 7
            THEN
                RETURN 7;

            ELSEIF ret_val = 9
            THEN
                MESSAGE 'System error creating ' + :h_qrp_table1
                WITH STYLE = POPUP;
                RETURN 9;

            ENDIF;

            UNLOADTABLE tf
            {
                ret_val = CALLPROC msach_fp_qrp_setup (
                          question = :tf.question);

                h_retry_or_not      = 'RETRY';
                h_retries           = 0;

                WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
                DO

                    h_retries = :h_retries + 1;

                    IF :g_inquiry = :gc_asi
                    THEN

                        INSERT INTO :h_qrp_table1 (
                                    contributor_reference,
                                    inquiry,
                                    enterprise,
                                    question,
                                    question_industry,
                                    contributor_industry,
                                    aperiod,
                                    confirmation_code,
                                    acell,
                                    avalue)
                        SELECT      contributor_reference,
                                    inquiry,
                                    enterprise,
                                    question,
                                    question_industry,
                                    contributor_industry,
                                    aperiod,
                                    confirmation_code,
                                    acell,
                                    avalue
                        FROM       :h_qrp_table2;
                    ELSE
                        INSERT INTO :h_qrp_table1 (
                                    contributor_reference,
                                    inquiry,
                                    enterprise,
                                    question,
                                    question_industry,
                                    contributor_industry,
                                    qperiod,
                                    confirmation_code,
                                    acell,
                                    avalue)
                        SELECT      contributor_reference,
                                    inquiry,
                                    enterprise,
                                    question,
                                    question_industry,
                                    contributor_industry,
                                    qperiod,
                                    confirmation_code,
                                    acell,
                                    avalue
                        FROM       :h_qrp_table2;
                    ENDIF;

                    ret_val = CALLPROC check_inq_ing (
                              h_num_row_ck      = 1,
                              h_commit          = 'Y',
                              h_rollback        = 'N',
                              h_retries         = :h_retries,
                              h_retries_allowed = :h_retries_allowed,
                              h_frpr_name       = :h_frpr_name);

                    IF ret_val <> 7
                    THEN
                        h_retry_or_not = '';
                    ENDIF;

                ENDWHILE;

                IF ret_val = 7
                THEN
                    RETURN 7;

                ELSEIF ret_val = 9
                THEN
                    MESSAGE 'System error inserting into ' + :h_qrp_table1
                    WITH STYLE = POPUP;
                    RETURN 9;

                ELSEIF ret_val = 1
                THEN
                    MESSAGE 'No contributors to question ' +
                             VARCHAR(:tf.question)
                    WITH STYLE = POPUP;
                ENDIF;

            };

            h_output = '$PRINTOUT/qrp_print_' + VARCHAR(:g_industry) +
                       '.rpt';

            IF :g_inquiry = :gc_asi
            THEN
                ret_val = CALLPROC msa_cp_callsys (
                          'report ' + g_database +
                          ' ''(temptab = "' + :h_qrp_table1 +
                          '",user_name = "' + :g_user_name +
                          '", yr1 = ' + VARCHAR(period1) +
                          ', yr2 = ' + VARCHAR(period2) +
                          ', yr3 = ' + VARCHAR(period3) +
                          ')'' -f'+ :h_output +
                          ' -i$REPORTS/msach_rw_asi_qrp.rw >' +
                          ' report.output 2> report.output');
            ELSE
                ret_val = CALLPROC msa_cp_callsys (
                          'report ' + g_database +
                          ' ''(temptab = "' + :h_qrp_table1 +
                          '",user_name = "' + :g_user_name +
                          '", industry = ' + VARCHAR(g_industry) +
                          ', q1 = ' + VARCHAR(period1) +
                          ', q2 = ' + VARCHAR(period2) +
                          ', q3 = ' + VARCHAR(period3) +
                          ', q4 = ' + VARCHAR(period4) +
                          ', q5 = ' + VARCHAR(period5) +
                          ')'' -f' + :h_output +
                          ' -i$REPORTS/msach_rw_qsi_qrp.rw >' +
                          ' report.output 2> report.output');
            ENDIF;

            IF ret_val <> 0
            THEN
                MESSAGE 'Error producing report'
                WITH STYLE = POPUP;
            ELSE
	
                IF :g_inquiry = :gc_asi
                THEN
                    ret_val = CALLPROC msa_cp_callsys (
                              'lines=`wc -l < ' + :h_output + '`;' +
                              'lines=`expr ${lines} - 1`;' +
                              'head -${lines} ' + :h_output + ' | ' +
                              'lp -o16p -d' + :g_printer +
                              ' >> report.output 2>> report.output');
                ELSE
                    ret_val = CALLPROC msa_cp_callsys (
                              'lines=`wc -l < ' + :h_output + '`;' +
                              'lines=`expr ${lines} - 1`;' +
                              'head -${lines} ' + :h_output + ' | ' +
                              'lp -o16l -d' + :g_printer +
                              ' >> report.output 2>> report.output');
                ENDIF;

                IF ret_val <> 0
                THEN
                    MESSAGE 'Error sending report to printer ' +
                            :g_printer
                    WITH STYLE = POPUP;
                ELSE
                    MESSAGE 'Report sent to printer ' + :g_printer + ' OK'
                    WITH STYLE = POPUP;
                ENDIF;

            ENDIF;

            ret_val = CALLPROC msa_fp_drop_table (
                      h_table = :h_qrp_table1);

            ret_val = CALLPROC msa_fp_drop_table (
                      h_table = :h_qrp_table2);

            REDISPLAY;
            RESUME;

        }

        'PrintSelected' =
        {
            h_qrp_table1  = 'temp_' + VARCHAR(:g_industry) + '_prt';
            h_qrp_table2 = 'temp_' + VARCHAR(:g_industry) + '_ppers';

            ret_val = CALLPROC msa_fp_drop_table (
                      h_table = :h_qrp_table1);

            IF ret_val <> 0
            THEN
                RETURN ret_val;
            ENDIF;

            h_retry_or_not      = 'RETRY';
            h_retries           = 0;

            WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
            DO

                h_retries = :h_retries + 1;

                IF :g_inquiry = :gc_asi
                THEN
                    CREATE TABLE :h_qrp_table1 (
                      contributor_reference CHAR(11) NOT NULL,
                      inquiry               INTEGER1 NOT NULL,
                      enterprise            CHAR(10) NOT NULL,
                      question              INTEGER4 NOT NULL,
                      question_industry     INTEGER4 NOT NULL,
                      contributor_industry  INTEGER4 NOT NULL,
                      aperiod               INTEGER4 NOT NULL,
                      confirmation_code     CHAR(2)  NOT NULL,
                      acell                 CHAR(2)  NOT NULL,
                      avalue                INTEGER4 NOT NULL);
                ELSE
                    CREATE TABLE :h_qrp_table1 (
                      contributor_reference CHAR(11) NOT NULL,
                      inquiry               INTEGER1 NOT NULL,
                      enterprise            CHAR(10) NOT NULL,
                      question              INTEGER4 NOT NULL,
                      question_industry     INTEGER4 NOT NULL,
                      contributor_industry  INTEGER4 NOT NULL,
                      qperiod               INTEGER4 NOT NULL,
                      confirmation_code     CHAR(2)  NOT NULL,
                      acell                 CHAR(2)  NOT NULL,
                      avalue                INTEGER4 NOT NULL);
                ENDIF;

                ret_val = CALLPROC check_inq_ing (
                          h_num_row_ck      = 1,
                          h_commit          = 'Y',
                          h_rollback        = 'N',
                          h_retries         = :h_retries,
                          h_retries_allowed = :h_retries_allowed,
                          h_frpr_name       = :h_frpr_name);

                IF ret_val <> 7
                THEN
                    h_retry_or_not = '';
                ENDIF;

            ENDWHILE;

            IF ret_val = 7
            THEN
                RETURN 7;

            ELSEIF ret_val = 9
            THEN
                MESSAGE 'System error creating ' + :h_qrp_table1
                WITH STYLE = POPUP;
                RETURN 9;

            ENDIF;

            h_test = 0;
            UNLOADTABLE tf (h_record = _RECORD)
            {
                IF :tf.print <> 'P' AND :tf.print <> ''
                THEN
                    MESSAGE 'Only ''P'' is valid'
                    WITH STYLE = POPUP;
                    SCROLL tf TO h_record;
                    RESUME FIELD tf;
                ENDIF;
            };

            UNLOADTABLE tf
            {
                IF :tf.print = 'P'
                THEN
                    h_test = 1;

                    ret_val = CALLPROC msach_fp_qrp_setup (
                              question = :tf.question);

                    h_retry_or_not      = 'RETRY';
                    h_retries           = 0;

                    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
                    DO

                        h_retries = :h_retries + 1;

                        IF :g_inquiry = :gc_asi
                        THEN
                            INSERT INTO :h_qrp_table1 (
                                        contributor_reference,
                                        inquiry,
                                        enterprise,
                                        question,
                                        question_industry,
                                        contributor_industry,
                                        aperiod,
                                        confirmation_code,
                                        acell,
                                        avalue)
                            SELECT      contributor_reference,
                                        inquiry,
                                        enterprise,
                                        question,
                                        question_industry,
                                        contributor_industry,
                                        aperiod,
                                        confirmation_code,
                                        acell,
                                        avalue
                            FROM       :h_qrp_table2;
                        ELSE
                            INSERT INTO :h_qrp_table1 (
                                        contributor_reference,
                                        inquiry,
                                        enterprise,
                                        question,
                                        question_industry,
                                        contributor_industry,
                                        qperiod,
                                        confirmation_code,
                                        acell,
                                        avalue)
                            SELECT      contributor_reference,
                                        inquiry,
                                        enterprise,
                                        question,
                                        question_industry,
                                        contributor_industry,
                                        qperiod,
                                        confirmation_code,
                                        acell,
                                        avalue
                            FROM       :h_qrp_table2;
                        ENDIF;

                        ret_val = CALLPROC check_inq_ing (
                                  h_num_row_ck      = 1,
                                  h_commit          = 'Y',
                                  h_rollback        = 'N',
                                  h_retries         = :h_retries,
                                  h_retries_allowed = :h_retries_allowed,
                                  h_frpr_name       = :h_frpr_name);

                        IF ret_val <> 7
                        THEN
                            h_retry_or_not = '';
                        ENDIF;

                    ENDWHILE;

                    IF ret_val = 7
                    THEN
                        RETURN 7;

                    ELSEIF ret_val = 9
                    THEN
                        MESSAGE 'System error inserting into ' + :h_qrp_table1
                        WITH STYLE = POPUP;
                        RETURN 9;

                    ELSEIF ret_val = 1
                    THEN
                        MESSAGE 'No contributors to question ' +
                                 VARCHAR(:tf.question)
                        WITH STYLE = POPUP;
                    ENDIF;

                ENDIF;
            };

            IF h_test = 1
            THEN

                h_output = '$PRINTOUT/qrp_print_' +
                            VARCHAR(:g_industry) + '.rpt';

                IF :g_inquiry = :gc_asi
                THEN
                    ret_val = CALLPROC msa_cp_callsys (
                              'report ' + g_database +
                              ' ''(temptab = "' + :h_qrp_table1 +
                              '",user_name = "' + :g_user_name +
                              '", yr1 = ' + VARCHAR(period1) +
                              ', yr2 = ' + VARCHAR(period2) +
                              ', yr3 = ' + VARCHAR(period3) +
                              ')'' -f' + :h_output +
                              ' -i$REPORTS/msach_rw_asi_qrp.rw >' +
                              ' report.output 2> report.output');
                ELSE
                    ret_val = CALLPROC msa_cp_callsys (
                              'report ' + g_database +
                              ' ''(temptab = "' + :h_qrp_table1 +
                              '",user_name = "' + :g_user_name +
                              '", industry = ' + VARCHAR(g_industry) +
                              ', q1 = ' + VARCHAR(period1) +
                              ', q2 = ' + VARCHAR(period2) +
                              ', q3 = ' + VARCHAR(period3) +
                              ', q4 = ' + VARCHAR(period4) +
                              ', q5 = ' + VARCHAR(period5) +
                              ')'' -f' + :h_output +
                              ' -i$REPORTS/msach_rw_qsi_qrp.rw >' +
                              ' report.output 2> report.output');
                ENDIF;

                IF ret_val <> 0
                THEN
                    MESSAGE 'Error producing report'
                    WITH STYLE = POPUP;
                ELSE
		
                    IF :g_inquiry = :gc_asi
                    THEN
                        ret_val = CALLPROC msa_cp_callsys (
                                  'lines=`wc -l < ' + :h_output + '`;' +
                                  'lines=`expr ${lines} - 1`;' +
                                  'head -${lines} ' + :h_output + ' | '+
                                  'lp -o16p -d' + :g_printer +
                                  '>> report.output 2>> report.output');
                    ELSE
                        ret_val = CALLPROC msa_cp_callsys (
                                  'lines=`wc -l < ' + :h_output + '`;' +
                                  'lines=`expr ${lines} - 1`;' +
                                  'head -${lines} ' + :h_output + ' | '+
                                  'lp -o16l -d' + :g_printer +
                                  '>> report.output 2>> report.output');
                    ENDIF;

                    IF ret_val <> 0
                    THEN
                        MESSAGE 'Error sending report to printer ' +
                                :g_printer
                        WITH STYLE = POPUP;
                    ELSE
                        MESSAGE 'Report sent to printer ' + :g_printer + ' OK'
                        WITH STYLE = POPUP;
                    ENDIF;

                ENDIF;

                ret_val = CALLPROC msa_fp_drop_table (
                          h_table = :h_qrp_table1);

                ret_val = CALLPROC msa_fp_drop_table (
                          h_table = :h_qrp_table2);

                REDISPLAY;

            ELSE
                MESSAGE 'No Questions were selected'
                WITH STYLE = POPUP;
            ENDIF;

            REDISPLAY;
            RESUME;

        }

        'End', KEY FRSKEY6 =
        {
            ENDLOOP;
        }
    };

    UNLOADTABLE tf
    {
        tf.print = '';
    };

    SET_FORMS COLUMN '' tf (INVISIBLE(print) = 1);
    print_message = '';
    REDISPLAY;

}

'QuestResp' =    
{
    IF :g_inquiry = :gc_asi
    THEN
        ret_val = CALLFRAME msach_fr_quest_resp_asi ();
    ELSE
        ret_val = CALLFRAME msach_fr_quest_resp_qsi ();
    ENDIF
}

'End', KEY FRSKEY6 =
{
    MESSAGE 'Exiting Contributor Data Screen . . .';
    ret_val = CALLPROC msa_fp_drop_table ( h_table = :h_table);
    ret_val = CALLPROC msa_fp_drop_table ( h_table = 'temp_uv_table1');
    ret_val = CALLPROC msa_fp_drop_table ( h_table = 'temp_uv_table2');

    RETURN 0;
}

'QuickView', KEY FRSKEY7 = 
{
    CALL APPLICATION (exec = '$IMAGES/quickview_app -numeric_overflow=ignore ');
}

/*----------------------------------------------------------------------
                    L O C A L   P R O C E D U R E
----------------------------------------------------------------------*/

PROCEDURE lp_load_table () =
{
    MESSAGE 'Loading Questions . . .';

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        tf =

        SELECT   question,
                 quest_order,
                 curr_value,
                 curr_ents,
                 prev_value,
                 prev_ents,
                 diff,
                 perc_diff,
                 perc_imp,
                 perc_con
        FROM     :h_table
        WHERE    ABS(perc_diff) >= :cutoff
        ORDER BY quest_order,
                 question;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row         = BYREF(:no_of_questions),
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error loading table field'
        WITH STYLE = POPUP;
        RETURN 9;

    ENDIF;

    /*------------------------------------------------------------------
    Load table of questions into array
    ------------------------------------------------------------------*/

    ret_val = CALLPROC ARRAYCLEAR(g_question_array);
    h_counter = 0;

    UNLOADTABLE tf
    {
        h_counter = :h_counter + 1;
        g_question_array[:h_counter].question = :tf.question;
    };

    msa_date = 'now';

    /*------------------------------------------------------------------
    Count uv02s
    ------------------------------------------------------------------*/

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        g_uv02_array = 

        SELECT   DISTINCT(c.question) AS question
        FROM     question_period a,
                 question_period b,
                 :h_table c
        WHERE    a.question_industry = :industry
        AND      a.period IN (:curr_period,:prev_period)
        AND      a.period = b.period
        AND      b.question = a.question + 1
        AND      c.question = a.question
        AND      ABS(c.perc_diff) >= :cutoff
        AND      MOD(a.question,10) = 1;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row         = BYREF(:h_uv02_rows),
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error counting 02 UVs'
        WITH STYLE = POPUP;
        RETURN 9;

    ENDIF;

    /*------------------------------------------------------------------
    Count uv04s
    ------------------------------------------------------------------*/

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        g_uv04_array = 

        SELECT   DISTINCT(c.question) AS question
        FROM     question_period a,
                 question_period b,
                 :h_table c
        WHERE    a.question_industry = :industry
        AND      a.period IN (:curr_period,:prev_period)
        AND      a.period = b.period
        AND      b.question = a.question + 3
        AND      c.question = a.question
        AND      ABS(c.perc_diff) >= :cutoff
        AND      MOD(a.question,10) = 1;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row         = BYREF(:h_uv04_rows),
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error counting 04 UVs'
        WITH STYLE = POPUP;
        RETURN 9;

    ENDIF;

    IF :h_uv02_rows = 1
    THEN
        uv_message = VARCHAR(:h_uv02_rows) + ' 02 UV Question';
    ELSE
        uv_message = VARCHAR(:h_uv02_rows) + ' 02 UV Questions';
    ENDIF;

    IF :h_uv04_rows = 1
    THEN
        uv_message = uv_message + ', ' + VARCHAR(:h_uv04_rows) +
                     ' 04 UV Question';
    ELSEIF :h_uv04_rows > 1
    THEN
        uv_message = uv_message + ', ' + VARCHAR(:h_uv04_rows) +
                     ' 04 UV Questions';
    ENDIF;

    RETURN 0;
}
