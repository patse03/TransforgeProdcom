Initialize (

        last_unit_value      = INTEGER1 NOT NULL) =

DECLARE h_retries_allowed    = INTEGER1 NOT NULL,
        h_retries            = INTEGER1 NOT NULL,
        h_retry_or_not       = CHAR(5) NOT NULL,
        h_frpr_name          = VARCHAR(24) NOT NULL,
        h_table1             = VARCHAR(24) NOT NULL,
        h_table2             = VARCHAR(24) NOT NULL,
        h_field_name         = VARCHAR(24) NOT NULL,
        h_rows               = INTEGER4 NOT NULL,
        h_num_rows           = INTEGER4 NOT NULL,
        p1                   = INTEGER4 NOT NULL,
        p2                   = INTEGER4 NOT NULL,
        p3                   = INTEGER4 NOT NULL,
        p4                   = INTEGER4 NOT NULL,
        p5                   = INTEGER4 NOT NULL,
        h_order              = INTEGER1 NOT NULL,
        h_agg_value1         = FLOAT8 NOT NULL,
        h_agg_value2         = FLOAT8 NOT NULL,
        h_agg_value3         = FLOAT8 NOT NULL,
        h_agg_value4         = FLOAT8 NOT NULL,
        h_agg_value5         = FLOAT8 NOT NULL,
        h_old_agguv          = FLOAT8 NOT NULL,
        h_cur_agguv          = FLOAT8 NOT NULL,
        h_chosen_per         = INTEGER4 NOT NULL,
        h_chosen_prev_per    = INTEGER4 NOT NULL,
        h_sort_order         = VARCHAR(60) NOT NULL,
        h_msg                = VARCHAR(60) NOT NULL,
        h_max_rows           = INTEGER2 NOT NULL,
        h_periods            = INTEGER1 NOT NULL,
        contributor_industry = INTEGER4 NOT NULL,
        h_counter            = INTEGER4 NOT NULL,
        h_record             = INTEGER4 NOT NULL,
        ret_val              = INTEGER1 NOT NULL,
        h_up_or_down         = CHAR(1) NOT NULL,
        h_reference          = CHAR(11) NOT NULL,
        t_cqpv               = CHAR(21) NOT NULL,
        h_perc               = INTEGER4 NOT NULL,
        h_params             = CHAR(18) NOT NULL,

        lp_load_table        = PROCEDURE RETURNING INTEGER,
        lp_calc_all_uvs      = PROCEDURE RETURNING INTEGER

{
    h_retries_allowed = 3;
    h_frpr_name = 'msach_fr_unit_val';
    h_table1 = 'temp_uv_table1';
    h_table2 = 'temp_uv_table2';
    msa_date = 'now';
    h_perc = 15;

    h_order = 0;
    selection_order = 'Order by Reference';
    h_sort_order = 'contributor_reference';

    p1 = :g_period[1].period;
    p2 = 0;
    p3 = 0;
    p4 = 0;
    p5 = 0;

    IF g_periods >= 2
    THEN
        p2 = :g_period[2].period;
    ENDIF;

    IF g_periods >= 3
    THEN
        p3 = :g_period[3].period;
    ENDIF;

    IF g_periods >= 4
    THEN
        p4 = :g_period[4].period;
    ENDIF;

    IF g_periods >= 5
    THEN
        p5 = :g_period[5].period;
    ENDIF;

    h_periods = 0;
    select_period = 'Latest Periods';
    period1 = p1;
    period2 = p2;
    period3 = p3;

    SET_FORMS FIELD '' (MODE(tf) = 'READ');

    t_cqpv = 'sim_' + VARCHAR(:g_industry) + '_' +
             VARCHAR(:g_period[1].period) + '_cqpv';

    IF :unit_value = 2
    THEN
        h_max_rows = CALLPROC ARRAYALLROWS(g_uv02_array);
    ELSE
        h_max_rows = CALLPROC ARRAYALLROWS(g_uv04_array);
    ENDIF;

    h_counter = 1;
    IF :unit_value = 2
    THEN
        UNLOADTABLE g_uv02_array
        {
            IF :g_uv02_array[:h_counter].question = :question
            THEN
                ENDLOOP;
            ENDIF;
            h_counter = :h_counter + 1;
        };
    ELSE
        UNLOADTABLE g_uv04_array
        {
            IF :g_uv04_array[:h_counter].question = :question
            THEN
                ENDLOOP;
            ENDIF;
            h_counter = :h_counter + 1;
        };
    ENDIF;

    IF :h_counter > :h_max_rows
    THEN
        MESSAGE 'There is no 0' + VARCHAR(:unit_value) +
                ' Unit Value for this Question'
        WITH STYLE = POPUP;
        RETURN 9;
    ENDIF;

    IF :unit_value = 2
    THEN
        question = :g_uv02_array[:h_counter].question;
    ELSE
        question = :g_uv04_array[:h_counter].question;
    ENDIF;

    REDISPLAY;

    /*------------------------------------------------------------------
     Only re-create all unit values if you haven't been into this screen
     before for this particular UV
    ------------------------------------------------------------------*/

    IF :last_unit_value <> :unit_value
    THEN
        ret_val = CALLPROC lp_calc_all_uvs();
        IF ret_val <> 0
        THEN
            RETURN ret_val;
        ENDIF;
    ENDIF;

    ret_val = CALLPROC lp_load_table ();
    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;
}

'Help', KEY FRSKEY1 =
{
    HELP_FORMS(SUBJECT = 'HELP',
               FILE = :g_help + '/' + :h_frpr_name + '.hlp');
}

'PreviousQuestion' =
{
    IF h_counter = 1
    THEN
        MESSAGE 'No more Questions'
        WITH STYLE = POPUP;
        RESUME;
    ENDIF;

    h_counter = :h_counter - 1;

    ret_val = CALLPROC lp_load_table ();
    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;
}

'NextQuestion' =
{
    IF h_counter = h_max_rows
    THEN
        MESSAGE 'No more Questions'
        WITH STYLE = POPUP;
        RESUME;
    ENDIF;

    h_counter = :h_counter + 1;

    ret_val = CALLPROC lp_load_table ();
    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;
}

'QuestionText' =
{
     ret_val = CALLFRAME msach_fr_dis_ques_text(
               industry  = :contributor_industry,
               period    = :p1,
               question  = :question / 10 * 10 + :unit_value);
}

'ReOrder' =
{
    IF :h_num_rows = 0
    THEN
        MESSAGE 'There are no Contributor Values to Re-Order'
        WITH STYLE = POPUP;
        RESUME;
    ENDIF;

    IF :h_order = 1
    THEN
        selection_order = 'Order by Reference';
        h_sort_order = 'contributor_reference';
        h_order = 0;
    ELSE
        selection_order = 'Order by Value';
        h_sort_order = 'value1 desc, contributor_reference';
        h_order = 1;
    ENDIF;

    MESSAGE 'ReOrdering . . .';

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        IF h_periods = 0
        THEN
            tf =

            SELECT   contributor_reference,
                     contributor_industry,
                     period3_uv AS value3,
                     period3_cell AS cell3,
                     period3_conf AS conf3,
                     period2_uv AS value2,
                     period2_cell AS cell2,
                     period2_conf AS conf2,
                     period1_uv AS value1,
                     period1_cell AS cell1,
                     period1_conf AS conf1
            FROM     :h_table2
            WHERE    question = :question
            ORDER BY :h_sort_order;
        ELSE
            tf =

            SELECT   contributor_reference,
                     contributor_industry,
                     period5_uv AS value3,
                     period5_cell AS cell3,
                     period5_conf AS conf3,
                     period4_uv AS value2,
                     period4_cell AS cell2,
                     period4_conf AS conf2,
                     period3_uv AS value1,
                     period3_cell AS cell1,
                     period3_conf AS conf1
            FROM     :h_table2
            WHERE    question = :question
            ORDER BY :h_sort_order;
        ENDIF;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in loading screen table'
        WITH STYLE = POPUP;
        RETURN 9;

    ELSEIF ret_val = 1
    THEN
        MESSAGE 'No UV data is held for Question ' + VARCHAR(:question)
        WITH STYLE = POPUP;
    ENDIF;

}

'Contributor Info' =
{

  INQUIRE_FORMS TABLE '' (h_rows = DATAROWS(tf));

  IF h_rows = 0
  THEN
    MESSAGE 'Please highlight a Contributor.'
    WITH STYLE = POPUP;
    RESUME;
  ENDIF;

  h_params = VARCHAR(:p1) +' ' +VARCHAR(:tf.contributor_reference);

  SELECT DBMSINFO('username') AS g_user_id;

  IF g_user_id = 'produser'
  OR g_user_id = 'prodlive'
  THEN
    MESSAGE 'DEBUG: period = {' +VARCHAR(:p1) +'}' +X'0D'
          + '       conref = {' +VARCHAR(:tf.contributor_reference) +'}' +X'0D'
          + '       params = {' +VARCHAR(:h_params) +'}' 
    WITH STYLE = POPUP;
  ENDIF;

  CALL APPLICATION(exec='$IMAGES/despatch_app msaeb_fr_desp_contrib',
                   param=:h_params);

  msa_date = 'now';
}

'OtherPeriods' =
{
    IF :g_inquiry = 14
    THEN
        MESSAGE 'Annual Industries have no other Periods to display'
        WITH STYLE = POPUP;
        RESUME;
    ENDIF;

    IF h_periods = 0
    THEN
        period1 = p3;
        period2 = p4;
        period3 = p5;
        h_periods = 1;
        select_period = 'Previous Periods';
    ELSE
        period1 = p1;
        period2 = p2;
        period3 = p3;
        h_periods = 0;
        select_period = 'Latest Periods';
    ENDIF;

    INQUIRE_FORMS TABLE '' (h_rows = DATAROWS(tf));

    IF :h_rows > 0
    THEN
        h_reference = :tf.contributor_reference;
    ENDIF;

    ret_val = CALLPROC lp_load_table ();
    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    IF :h_rows > 0
    THEN
        UNLOADTABLE tf (h_record = _RECORD)
        {
             IF :tf.contributor_reference = :h_reference
             THEN
                 SCROLL tf TO :h_record;
                 RESUME FIELD tf;
             ENDIF;
        };
    ENDIF;

}

'ValueData' =
{
    IF :h_num_rows = 0
    THEN
        MESSAGE 'There are no Contributor Values to show data for'
        WITH STYLE = POPUP;
        RESUME;
    ENDIF;

    IF g_inquiry = 14
    THEN
        ret_val = CALLFRAME msach_fr_choose_period (
                  choose_per_1 = :p1,
                  choose_per_2 = :p2,
                  choose_per_3 = 0,
                  choose_per_4 = 0,
                  period       = BYREF(:h_chosen_per));
    ELSE
        ret_val = CALLFRAME msach_fr_choose_period (
                  choose_per_1 = :p1,
                  choose_per_2 = :p2,
                  choose_per_3 = :p3,
                  choose_per_4 = :p4,
                  period       = BYREF(:h_chosen_per));
    ENDIF;

    IF ret_val <> 0
    THEN
        RESUME;
    ENDIF;

    IF h_chosen_per = p1
    THEN
        h_chosen_prev_per = p2;
        h_old_agguv = :h_agg_value2;
        h_cur_agguv = :h_agg_value1;
    ELSEIF h_chosen_per = p2
    THEN
        h_chosen_prev_per = p3;
        h_old_agguv = :h_agg_value3;
        h_cur_agguv = :h_agg_value2;
    ENDIF;

    IF g_inquiry = gc_qsi
    THEN
        IF h_chosen_per = p3
        THEN
            h_chosen_prev_per = p4;
            h_old_agguv = :h_agg_value4;
            h_cur_agguv = :h_agg_value3;
        ELSEIF h_chosen_per = p4
        THEN
            h_chosen_prev_per = p5;
            h_old_agguv = :h_agg_value5;
            h_cur_agguv = :h_agg_value4;
        ENDIF;
    ENDIF;

    IF h_old_agguv < h_cur_agguv
    THEN
        h_up_or_down = 'U';
    ELSEIF h_old_agguv > h_cur_agguv
    THEN
        h_up_or_down = 'D';
    ELSE
        h_up_or_down = 'S';
    ENDIF;

    ret_val = CALLFRAME msach_fr_value_data ( 
              h_table1   = :h_table1,
              h_table2   = :h_table2,
              unit_value = :unit_value,
              old_agguv  = :h_old_agguv,
              question   = :question,
              up_or_down = :h_up_or_down,
              period1    = :h_chosen_per,
              period2    = :h_chosen_prev_per,
              perc       = :h_perc);
    
    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;
}

'End', KEY FRSKEY6 =
{
    RETURN 0;
}

'QuickView', KEY FRSKEY7 =
{
    CALL APPLICATION (exec = '$IMAGES/quickview_app -numeric_overflow=ignore ');
}

/*----------------------------------------------------------------------
                L O C A L   P R O C E D U R E    1
----------------------------------------------------------------------*/

PROCEDURE lp_calc_all_uvs () =
{

    ret_val = CALLPROC msa_fp_drop_table ( h_table = :h_table1);
    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    /*------------------------------------------------------------------
    Create UV table
    ------------------------------------------------------------------*/

    MESSAGE 'Creating UVs for All Questions and Periods . . .';

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        CREATE TABLE :h_table1
        AS SELECT    a.contributor_reference,
                     a.contributor_industry,
                     a.question,
                     a.avalue AS value,
                     b.avalue AS volume,
                     a.avalue * 1000.0 / b.avalue AS uv,
                     a.qperiod AS period,
                     CONCAT(TRIM(a.acell),b.acell) AS acell,
                     b.confirmation_code
        FROM         :t_cqpv a,
                     :t_cqpv b
        WHERE        a.contributor_reference = b.contributor_reference
        AND          b.question = a.question + :unit_value - 1
        AND          a.qperiod = b.qperiod
        AND          a.qperiod IN (:p1,:p2,:p3,:p4,:p5)
        UNION
        SELECT       a.contributor_reference,
                     a.contributor_industry,
                     c.new_question AS question,
                     a.avalue AS value,
                     b.avalue AS volume,
                     a.avalue * 1000.0 / b.avalue AS uv,
                     a.qperiod AS period,
                     CONCAT(TRIM(a.acell),b.acell) AS acell,
                     b.confirmation_code
        FROM         :t_cqpv a,
                     :t_cqpv b,
                     question_history c
        WHERE        a.contributor_reference = b.contributor_reference
        AND          a.question = c.old_question
        AND          c.rep_type = 1
        AND          b.question = a.question + :unit_value - 1
        AND          a.qperiod = b.qperiod
        AND          a.qperiod IN (:p1,:p2,:p3,:p4,:p5);

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in creating ' + :h_table1
        WITH STYLE = POPUP;
        RETURN 9;

    ELSEIF ret_val = 1
    THEN
        MESSAGE 'No Contributor Unit Values were found for this Industry'
        WITH STYLE = POPUP;
        RETURN 0;
    ENDIF;
    MESSAGE 'Modifying . . .';

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        MODIFY    :h_table1 TO BTREE
        UNIQUE ON contributor_reference,
                  question,
                  period;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in modifying ' + :h_table1
        WITH STYLE = POPUP;
        RETURN 9;

    ENDIF;

    /*------------------------------------------------------------------
    Update for 8888s
    ------------------------------------------------------------------*/

    MESSAGE 'IDBR''ing References . . .';

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        UPDATE :h_table1 a
        FROM   idbr_lookup b
        SET    contributor_reference = b.new_reference
        WHERE  a.contributor_reference = b.dummy_reference
        AND    a.contributor_reference LIKE '8888%';

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in modifying ' + :h_table1
        WITH STYLE = POPUP;
        RETURN 9;

    ENDIF;

    /*------------------------------------------------------------------
    Create 2nd table from the first
    ------------------------------------------------------------------*/

    MESSAGE 'Creating UVs for All Questions . . .';

    ret_val = CALLPROC msa_fp_drop_table ( h_table = :h_table2);
    IF ret_val <> 0
    THEN
        RETURN ret_val;
    ENDIF;

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        CREATE TABLE :h_table2
        AS SELECT    DISTINCT(contributor_reference),
                     INT4(0) AS contributor_industry,
                     question,
                     INT4(0) AS period1_value,
                     INT4(0) AS period1_volume,
                     FLOAT8(0) AS period1_uv,
                     'DD' AS period1_cell,
                     ' ' AS period1_conf,
                     INT4(0) AS period2_value,
                     INT4(0) AS period2_volume,
                     FLOAT8(0) AS period2_uv,
                     'DD' AS period2_cell,
                     ' ' AS period2_conf,
                     INT4(0) AS period3_value,
                     INT4(0) AS period3_volume,
                     FLOAT8(0) AS period3_uv,
                     'DD' AS period3_cell,
                     ' ' AS period3_conf,
                     INT4(0) AS period4_value,
                     INT4(0) AS period4_volume,
                     FLOAT8(0) AS period4_uv,
                     'DD' AS period4_cell,
                     ' ' AS period4_conf,
                     INT4(0) AS period5_value,
                     INT4(0) AS period5_volume,
                     FLOAT8(0) AS period5_uv,
                     'DD' AS period5_cell,
                     ' ' AS period5_conf
        FROM         :h_table1;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in creating ' + :h_table2
        WITH STYLE = POPUP;
        RETURN 9;

    ENDIF;

    MESSAGE 'Modifying . . .';

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        MODIFY    :h_table2 TO BTREE
        UNIQUE ON contributor_reference,
                  question;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in modifying ' + :h_table2
        WITH STYLE = POPUP;
        RETURN 9;

    ENDIF;

    /*--------------------------------------------------------------
    Update with 5 periods' values - period 5
    --------------------------------------------------------------*/

    IF p5 <> 0
    THEN
        MESSAGE 'Updating for ' + VARCHAR(:p5) + ' . . .';

        h_retry_or_not      = 'RETRY';
        h_retries           = 0;

        WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
        DO

            h_retries = :h_retries + 1;

            UPDATE :h_table2 a
            FROM   :h_table1 b
            SET    period5_value = b.value,
                   period5_volume = b.volume,
                   period5_uv = b.uv,
                   period5_cell = b.acell,
                   period5_conf = b.confirmation_code,
                   contributor_industry = b.contributor_industry
            WHERE  a.contributor_reference = b.contributor_reference
            AND    a.question = b.question
            AND    b.period = :p5;

            ret_val = CALLPROC check_inq_ing (
                      h_num_row_ck      = 1,
                      h_commit          = 'Y',
                      h_rollback        = 'N',
                      h_retries         = :h_retries,
                      h_retries_allowed = :h_retries_allowed,
                      h_frpr_name       = :h_frpr_name);

            IF ret_val <> 7
            THEN
                h_retry_or_not = '';
            ENDIF;

        ENDWHILE;

        IF ret_val = 7
        THEN
            RETURN 7;

        ELSEIF ret_val = 9
        THEN
            MESSAGE 'System error updating ' + :h_table2 + ' for ' +
                    VARCHAR(:p5)
            WITH STYLE = POPUP;
            RETURN 9;

        ENDIF;
    ENDIF;

    /*--------------------------------------------------------------
    Update with 5 periods' values - period 4
    --------------------------------------------------------------*/

    IF p4 <> 0
    THEN
        MESSAGE 'Updating for ' + VARCHAR(:p4) + ' . . .';

        h_retry_or_not      = 'RETRY';
        h_retries           = 0;

        WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
        DO

            h_retries = :h_retries + 1;

            UPDATE :h_table2 a
            FROM   :h_table1 b
            SET    period4_value = b.value,
                   period4_volume = b.volume,
                   period4_uv = b.uv,
                   period4_cell = b.acell,
                   period4_conf = b.confirmation_code,
                   contributor_industry = b.contributor_industry
            WHERE  a.contributor_reference = b.contributor_reference
            AND    a.question = b.question
            AND    b.period = :p4;

            ret_val = CALLPROC check_inq_ing (
                      h_num_row_ck      = 1,
                      h_commit          = 'Y',
                      h_rollback        = 'N',
                      h_retries         = :h_retries,
                      h_retries_allowed = :h_retries_allowed,
                      h_frpr_name       = :h_frpr_name);

            IF ret_val <> 7
            THEN
                h_retry_or_not = '';
            ENDIF;

        ENDWHILE;

        IF ret_val = 7
        THEN
            RETURN 7;

        ELSEIF ret_val = 9
        THEN
            MESSAGE 'System error updating ' + :h_table2 + ' for ' +
                    VARCHAR(:p4)
            WITH STYLE = POPUP;
            RETURN 9;

        ENDIF;
    ENDIF;

    /*------------------------------------------------------------------
    Update with 5 periods' values - period 3
    ------------------------------------------------------------------*/

    IF p3 <> 0
    THEN
        MESSAGE 'Updating for ' + VARCHAR(:p3) + ' . . .';

        h_retry_or_not      = 'RETRY';
        h_retries           = 0;

        WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
        DO

            h_retries = :h_retries + 1;

            UPDATE :h_table2 a
            FROM   :h_table1 b
            SET    period3_value = b.value,
                   period3_volume = b.volume,
                   period3_uv = b.uv,
                   period3_cell = b.acell,
                   period3_conf = b.confirmation_code,
                   contributor_industry = b.contributor_industry
            WHERE  a.contributor_reference = b.contributor_reference
            AND    a.question = b.question
            AND    b.period = :p3;

            ret_val = CALLPROC check_inq_ing (
                      h_num_row_ck      = 1,
                      h_commit          = 'Y',
                      h_rollback        = 'N',
                      h_retries         = :h_retries,
                      h_retries_allowed = :h_retries_allowed,
                      h_frpr_name       = :h_frpr_name);

            IF ret_val <> 7
            THEN
                h_retry_or_not = '';
            ENDIF;

        ENDWHILE;

        IF ret_val = 7
        THEN
            RETURN 7;

        ELSEIF ret_val = 9
        THEN
            MESSAGE 'System error updating ' + :h_table2 + ' for ' +
                    VARCHAR(:p3)
            WITH STYLE = POPUP;
            RETURN 9;

        ENDIF;
    ENDIF;

    /*------------------------------------------------------------------
    Update with 5 periods' values - period 2
    ------------------------------------------------------------------*/

    IF p2 <> 0
    THEN
        MESSAGE 'Updating for ' + VARCHAR(:p2) + ' . . .';

        h_retry_or_not      = 'RETRY';
        h_retries           = 0;

        WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
        DO

            h_retries = :h_retries + 1;

            UPDATE :h_table2 a
            FROM   :h_table1 b
            SET    period2_value = b.value,
                   period2_volume = b.volume,
                   period2_uv = b.uv,
                   period2_cell = b.acell,
                   period2_conf = b.confirmation_code,
                   contributor_industry = b.contributor_industry
            WHERE  a.contributor_reference = b.contributor_reference
            AND    a.question = b.question
            AND    b.period = :p2;

            ret_val = CALLPROC check_inq_ing (
                      h_num_row_ck      = 1,
                      h_commit          = 'Y',
                      h_rollback        = 'N',
                      h_retries         = :h_retries,
                      h_retries_allowed = :h_retries_allowed,
                      h_frpr_name       = :h_frpr_name);

            IF ret_val <> 7
            THEN
                h_retry_or_not = '';
            ENDIF;

        ENDWHILE;

        IF ret_val = 7
        THEN
            RETURN 7;

        ELSEIF ret_val = 9
        THEN
            MESSAGE 'System error updating ' + :h_table2 + ' for ' +
                    VARCHAR(:p2)
            WITH STYLE = POPUP;
            RETURN 9;

        ENDIF;
    ENDIF;

    /*------------------------------------------------------------------
    Update with 5 periods' values - period 1
    ------------------------------------------------------------------*/

    MESSAGE 'Updating for ' + VARCHAR(:p1) + ' . . .';

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        UPDATE :h_table2 a
        FROM   :h_table1 b
        SET    period1_value = b.value,
               period1_volume = b.volume,
               period1_uv = b.uv,
               period1_cell = b.acell,
               period1_conf = b.confirmation_code,
               contributor_industry = b.contributor_industry
        WHERE  a.contributor_reference = b.contributor_reference
        AND    a.question = b.question
        AND    b.period = :p1;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error updating ' + :h_table2 + ' for ' +
                VARCHAR(:p1)
        WITH STYLE = POPUP;
        RETURN 9;

    ENDIF;

    RETURN 0;
}

/*----------------------------------------------------------------------
                L O C A L   P R O C E D U R E  2
----------------------------------------------------------------------*/

PROCEDURE lp_load_table () =

DECLARE h_contrib_industry = INTEGER4 NOT NULL,
        h_contrib          = CHAR(11) NOT NULL,
        h_con_ref          = CHAR(11) NOT NULL,
        h_cell             = CHAR(2) NOT NULL,
        h_con_ind          = INTEGER4 NOT NULL,
        h_value            = INTEGER8 NOT NULL,
        h_volume           = INTEGER8 NOT NULL,
        h_val              = INTEGER8 NOT NULL,
        h_vol              = INTEGER8 NOT NULL,
        h_period           = INTEGER4 NOT NULL,
        t_mean             = CHAR(21) NOT NULL,
        t_credperc         = CHAR(21) NOT NULL,
        h_men_uv           = FLOAT8 NOT NULL,
        h_uv               = FLOAT8 NOT NULL

{
    CLEAR FIELD tf;

    quest_message = 'Question ' + VARCHAR(:h_counter) + ' of ' +
                    VARCHAR(:h_max_rows);

    IF :unit_value = 2
    THEN
        question = :g_uv02_array[:h_counter].question;
    ELSE
        question = :g_uv04_array[:h_counter].question;
    ENDIF;

    MESSAGE 'Selecting Data up to ' +
            VARCHAR(:period1) + ' for Question ' +
            VARCHAR(:question) + ' . . .';

    /*------------------------------------------------------------------
    Load to screen:
    If h_periods = 0, load the new periods (periods 1-3)
    If h_periods = 1, load the old periods (periods 3-5)
    ------------------------------------------------------------------*/

    t_mean = 'mean_unit_values';

    t_credperc = 'credibility_percent';

    agg_value1 = 0;
    agg_value2 = 0;
    agg_value3 = 0;

    mean_uv1 = 0;
    mean_uv2 = 0;
    mean_uv3 = 0;

    msg_diff = '';
    agg_cred1 = '';
    agg_cred2 = '';
    mean_cred1 = '';
    mean_cred2 = '';

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO
        h_retries = :h_retries + 1;

        IF h_periods = 0
        THEN
            tf =

            SELECT   contributor_reference,
                     contributor_industry,
                     period3_uv AS value3,
                     period3_cell AS cell3,
                     period3_conf AS conf3,
                     period2_uv AS value2,
                     period2_cell AS cell2,
                     period2_conf AS conf2,
                     period1_uv AS value1,
                     period1_cell AS cell1,
                     period1_conf AS conf1
            FROM     :h_table2
            WHERE    question = :question
            ORDER BY :h_sort_order;
        ELSE
            tf =

            SELECT   contributor_reference,
                     contributor_industry,
                     period5_uv AS value3,
                     period5_cell AS cell3,
                     period5_conf AS conf3,
                     period4_uv AS value2,
                     period4_cell AS cell2,
                     period4_conf AS conf2,
                     period3_uv AS value1,
                     period3_cell AS cell1,
                     period3_conf AS conf1
            FROM     :h_table2
            WHERE    question = :question
            ORDER BY :h_sort_order;
        ENDIF;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row         = BYREF(:h_num_rows),
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in loading screen table'
        WITH STYLE = POPUP;
        RETURN 9;

    ELSEIF ret_val = 1
    THEN
        MESSAGE 'No UV data is held for Question ' + VARCHAR(:question)
        WITH STYLE = POPUP;
        RETURN 0;
    ENDIF;

    /*------------------------------------------------------------------
     Finds the % to trigger credibility checks; default of h_perc is 15
    ------------------------------------------------------------------*/

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        SELECT   percent AS h_perc
        FROM     :t_credperc
        WHERE    question = :question - 1 + :unit_value;

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in selecting percent from ' + :t_credperc
        WITH STYLE = POPUP;
        RETURN 9;

    ENDIF;

    /*------------------------------------------------------------------
    Calculate Aggregates
    ------------------------------------------------------------------*/

    h_agg_value1 = 0;
    h_agg_value2 = 0;
    h_agg_value3 = 0;
    h_agg_value4 = 0;
    h_agg_value5 = 0;

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        SELECT   SUM(value) AS h_val,
                 SUM(volume) AS h_vol,
                 period as h_period
        FROM     :h_table1
        WHERE    question = :question
        GROUP BY period
        {
        h_uv = 0;
            IF h_vol <>0
            THEN
               h_uv = h_val *1000.0/h_vol;
            ENDIF;
    
            IF :h_period = p1
            THEN
                h_agg_value1 = h_uv;
            ELSEIF :h_period = p2
            THEN
                h_agg_value2 = h_uv;
            ELSEIF :h_period = p3
            THEN
                h_agg_value3 = h_uv;
            ELSEIF :h_period = p4
            THEN
                h_agg_value4 = h_uv;
            ELSEIF :h_period = p5
            THEN
                h_agg_value5 = h_uv;
            ENDIF;

       };

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in calculating aggregates from ' + :h_table1
        WITH STYLE = POPUP;
        RETURN 9;

    ENDIF;

    IF h_periods = 0
    THEN
        agg_value1 = :h_agg_value1;
        agg_value2 = :h_agg_value2;
        agg_value3 = :h_agg_value3;
    ELSE
        agg_value1 = :h_agg_value3;
        agg_value2 = :h_agg_value4;
        agg_value3 = :h_agg_value5;
    ENDIF;

    /*------------------------------------------------------------------
     Calculates the credibility of aggregate unit values.

     For the latest period only, if the change in UVs fails, say
     what it failed by:

      If it was more than the (old_value + %increase)
         say what the (old_value + %increase) actually was.

      If it was less than the (old_value - %decrease)
         say what the (old_value - %decrease) actually was.
    ------------------------------------------------------------------*/

    IF agg_value2 > 0 AND agg_value3 > 0
    THEN
        IF ABS(agg_value2 - agg_value3) * 100.0 / agg_value3 >= h_perc
        THEN
            agg_cred2 = '*';
        ENDIF;
    ELSEIF (agg_value2 > 0 AND agg_value3 = 0)
        OR (agg_value2 = 0 AND agg_value3 > 0)
    THEN
        agg_cred2 = '*';
    ENDIF;

    IF agg_value1 > 0 AND agg_value2 > 0
    THEN
        IF ABS(agg_value1 - agg_value2) * 100.0 / agg_value2 >= h_perc
        THEN
            agg_cred1 = '*';
            IF period1 = p1
            THEN
                IF agg_value2 > agg_value1
                THEN
                    h_msg = VARCHAR(agg_value2-(h_perc/100.0*agg_value2));
                    msg_diff = '(-' + VARCHAR(:h_perc) + '% would be ' +
                                h_msg + ')';
                ELSE
                    h_msg = VARCHAR(agg_value2+(h_perc/100.0*agg_value2));
                    msg_diff = '(+' + VARCHAR(:h_perc) + '% would be ' +
                               h_msg + ')';
                ENDIF;
            ENDIF;
        ENDIF;
    ELSEIF (agg_value1 > 0 AND agg_value2 = 0)
        OR (agg_value1 = 0 AND agg_value2 > 0)
    THEN
        agg_cred1 = '*';
    ENDIF;

    /*------------------------------------------------------------------
    Select Mean Unit Values
    ------------------------------------------------------------------*/

    h_retry_or_not      = 'RETRY';
    h_retries           = 0;

    WHILE :h_retries < h_retries_allowed AND :h_retry_or_not = 'RETRY'
    DO

        h_retries = :h_retries + 1;

        SELECT   unit_value AS h_men_uv,
                 period AS h_period
        FROM     :t_mean
        WHERE    question = :question - 1 + :unit_value
        {
            IF :h_period = :period1
            THEN
                mean_uv1 = :h_men_uv;
            ELSEIF :h_period = :period2
            THEN
                mean_uv2 = :h_men_uv;
            ELSEIF :h_period = :period3
            THEN
                mean_uv3 = :h_men_uv;
            ENDIF;
       };

        ret_val = CALLPROC check_inq_ing (
                  h_num_row_ck      = 1,
                  h_commit          = 'Y',
                  h_rollback        = 'N',
                  h_retries         = :h_retries,
                  h_retries_allowed = :h_retries_allowed,
                  h_frpr_name       = :h_frpr_name);

        IF ret_val <> 7
        THEN
            h_retry_or_not = '';
        ENDIF;

    ENDWHILE;

    IF ret_val = 7
    THEN
        RETURN 7;

    ELSEIF ret_val = 9
    THEN
        MESSAGE 'System error in selecting unit value from ' + :t_mean
        WITH STYLE = POPUP;
        RETURN 9;

    ENDIF;

    IF mean_uv2 > 0 AND mean_uv3 > 0
    THEN
        IF ABS(mean_uv2 - mean_uv3) * 100.0 / mean_uv3 >= h_perc
        THEN
            mean_cred2 = '*';
        ENDIF;
    ELSEIF (mean_uv2 > 0 AND mean_uv3 = 0)
        OR (mean_uv2 = 0 AND mean_uv3 > 0)
    THEN
        mean_cred2 = '*';
    ENDIF;

    IF mean_uv1 > 0 AND mean_uv2 > 0
    THEN
        IF ABS(mean_uv1 - mean_uv2) * 100.0 / mean_uv2 >= h_perc
        THEN
            mean_cred1 = '*';
        ENDIF;
    ELSEIF (mean_uv1 > 0 AND mean_uv2 = 0)
        OR (mean_uv1 = 0 AND mean_uv2 > 0)
    THEN
        mean_cred1 = '*';
    ENDIF;

    RETURN 0;
}
